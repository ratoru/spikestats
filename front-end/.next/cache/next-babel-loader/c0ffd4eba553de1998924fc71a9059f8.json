{"ast":null,"code":"var _jsxFileName = \"/Users/raphael/programming/web-projects/roundnet-stats/components/AddChips.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from \"react\";\nimport Chip from \"@material-ui/core/Chip\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FaceRoundedIcon from \"@material-ui/icons/FaceRounded\";\nimport SentimentVerySatisfiedRoundedIcon from \"@material-ui/icons/SentimentVerySatisfiedRounded\";\nimport EmojiPeopleRoundedIcon from \"@material-ui/icons/EmojiPeopleRounded\";\n\nfunction selectChip(oldChip, allChips) {\n  let numBlue = 0;\n  let numRed = 0;\n\n  for (let chip of allChips) {\n    if (chip.isBlue) {\n      numBlue++;\n    } else if (chip.isRed) {\n      numRed++;\n    }\n  }\n\n  const isBlue = numBlue < 2;\n  const isRed = !isBlue && numRed < 2;\n  return _objectSpread(_objectSpread({}, oldChip), {}, {\n    isBlue: isBlue,\n    isRed: isRed\n  });\n}\n\nfunction needToDisable(allChips) {\n  return allChips.filter(chip => chip.isBlue || chip.isRed).length >= 4;\n}\n\nexport const AddChips = ({\n  players\n}) => {\n  const initialChips = [];\n  players.forEach((name, id) => {\n    initialChips.push({\n      label: name,\n      isBlue: false,\n      isRed: false,\n      disabled: false,\n      id: id\n    });\n  });\n  const {\n    0: chips,\n    1: setChips\n  } = useState(initialChips);\n\n  const handleClick = index => {\n    let newChips = [...chips];\n    newChips[index] = selectChip(newChips[index], newChips);\n\n    if (needToDisable(newChips)) {\n      newChips = newChips.map(chip => {\n        return _objectSpread(_objectSpread({}, chip), {}, {\n          disabled: !(chip.isBlue || chip.isRed)\n        });\n      });\n    }\n\n    setChips(newChips);\n  };\n\n  const handleDelete = index => {\n    let newChips = [...chips];\n    newChips[index] = _objectSpread(_objectSpread({}, newChips[index]), {}, {\n      isBlue: false,\n      isRed: false\n    });\n\n    if (!needToDisable(newChips)) {\n      newChips = newChips.map(chip => {\n        return _objectSpread(_objectSpread({}, chip), {}, {\n          disabled: false\n        });\n      });\n    }\n\n    setChips(newChips);\n  };\n\n  return __jsx(Grid, {\n    container: true,\n    direction: \"row\",\n    spacing: 2,\n    justify: \"center\",\n    alignItems: \"baseline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, __jsx(Typography, {\n    variant: \"h5\",\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, \"Blue Team\")), __jsx(Grid, {\n    item: true,\n    xs: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, __jsx(Typography, {\n    variant: \"h5\",\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, \":\")), __jsx(Grid, {\n    item: true,\n    xs: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, __jsx(Typography, {\n    variant: \"h5\",\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, \"Red Team\")), __jsx(Grid, {\n    item: true,\n    xs: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, chips.map((chip, index) => {\n    if (chip.isBlue) {\n      return __jsx(Chip, {\n        key: chip.id,\n        color: \"primary\",\n        label: chip.label,\n        icon: __jsx(SentimentVerySatisfiedRoundedIcon, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 23\n          }\n        }),\n        onDelete: () => handleDelete(index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 15\n        }\n      });\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }), __jsx(Grid, {\n    item: true,\n    xs: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, chips.map((chip, index) => {\n    if (chip.isRed) {\n      return __jsx(Chip, {\n        key: chip.id,\n        color: \"secondary\",\n        label: chip.label,\n        icon: __jsx(EmojiPeopleRoundedIcon, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 23\n          }\n        }),\n        onDelete: () => handleDelete(index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 15\n        }\n      });\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    container: true,\n    justify: \"space-around\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, chips.map((chip, index) => {\n    if (!(chip.isBlue || chip.isRed)) {\n      return __jsx(Grid, {\n        item: true,\n        xs: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 15\n        }\n      }, __jsx(Chip, {\n        key: chip.id,\n        label: chip.label,\n        icon: __jsx(FaceRoundedIcon, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 25\n          }\n        }),\n        clickable: true,\n        disabled: chip.disabled,\n        onClick: () => handleClick(index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 17\n        }\n      }));\n    }\n  })));\n};","map":{"version":3,"sources":["/Users/raphael/programming/web-projects/roundnet-stats/components/AddChips.tsx"],"names":["React","useState","Chip","Grid","Typography","FaceRoundedIcon","SentimentVerySatisfiedRoundedIcon","EmojiPeopleRoundedIcon","selectChip","oldChip","allChips","numBlue","numRed","chip","isBlue","isRed","needToDisable","filter","length","AddChips","players","initialChips","forEach","name","id","push","label","disabled","chips","setChips","handleClick","index","newChips","map","handleDelete","textAlign"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Chip from \"@material-ui/core/Chip\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FaceRoundedIcon from \"@material-ui/icons/FaceRounded\";\nimport SentimentVerySatisfiedRoundedIcon from \"@material-ui/icons/SentimentVerySatisfiedRounded\";\nimport EmojiPeopleRoundedIcon from \"@material-ui/icons/EmojiPeopleRounded\";\nimport { Players } from \"../util/types\";\n\ninterface PlayerChip {\n  label: string;\n  isBlue: boolean;\n  isRed: boolean;\n  disabled: boolean;\n  id: number;\n}\n\ninterface AddChipsProps {\n  players: Players;\n}\n\nfunction selectChip(oldChip: PlayerChip, allChips: PlayerChip[]): PlayerChip {\n  let numBlue = 0;\n  let numRed = 0;\n  for (let chip of allChips) {\n    if (chip.isBlue) {\n      numBlue++;\n    } else if (chip.isRed) {\n      numRed++;\n    }\n  }\n  const isBlue = numBlue < 2;\n  const isRed = !isBlue && numRed < 2;\n  return { ...oldChip, isBlue: isBlue, isRed: isRed };\n}\n\nfunction needToDisable(allChips: PlayerChip[]): boolean {\n  return allChips.filter((chip) => chip.isBlue || chip.isRed).length >= 4;\n}\n\nexport const AddChips: React.FC<AddChipsProps> = ({ players }) => {\n  const initialChips: PlayerChip[] = [];\n  players.forEach((name, id) => {\n    initialChips.push({\n      label: name,\n      isBlue: false,\n      isRed: false,\n      disabled: false,\n      id: id,\n    });\n  });\n  const [chips, setChips] = useState<PlayerChip[]>(initialChips);\n\n  const handleClick = (index: number) => {\n    let newChips = [...chips];\n    newChips[index] = selectChip(newChips[index], newChips);\n    if (needToDisable(newChips)) {\n      newChips = newChips.map((chip) => {\n        return { ...chip, disabled: !(chip.isBlue || chip.isRed) };\n      });\n    }\n    setChips(newChips);\n  };\n\n  const handleDelete = (index: number) => {\n    let newChips = [...chips];\n    newChips[index] = { ...newChips[index], isBlue: false, isRed: false };\n    if (!needToDisable(newChips)) {\n      newChips = newChips.map((chip) => {\n        return { ...chip, disabled: false };\n      });\n    }\n    setChips(newChips);\n  };\n\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      spacing={2}\n      justify=\"center\"\n      alignItems=\"baseline\"\n    >\n      <Grid item xs={5}>\n        <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\n          Blue Team\n        </Typography>\n      </Grid>\n      <Grid item xs={2}>\n        <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\n          :\n        </Typography>\n      </Grid>\n      <Grid item xs={5}>\n        <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\n          Red Team\n        </Typography>\n      </Grid>\n      <Grid item xs={5}>\n        {chips.map((chip, index) => {\n          if (chip.isBlue) {\n            return (\n              <Chip\n                key={chip.id}\n                color=\"primary\"\n                label={chip.label}\n                icon={<SentimentVerySatisfiedRoundedIcon />}\n                onDelete={() => handleDelete(index)}\n              />\n            );\n          }\n        })}\n      </Grid>\n      <Grid item xs={2} />\n      <Grid item xs={5}>\n        {chips.map((chip, index) => {\n          if (chip.isRed) {\n            return (\n              <Chip\n                key={chip.id}\n                color=\"secondary\"\n                label={chip.label}\n                icon={<EmojiPeopleRoundedIcon />}\n                onDelete={() => handleDelete(index)}\n              />\n            );\n          }\n        })}\n      </Grid>\n      <Grid item xs={12} container justify=\"space-around\" alignItems=\"center\">\n        {chips.map((chip, index) => {\n          if (!(chip.isBlue || chip.isRed)) {\n            return (\n              <Grid item xs>\n                <Chip\n                  key={chip.id}\n                  label={chip.label}\n                  icon={<FaceRoundedIcon />}\n                  clickable\n                  disabled={chip.disabled}\n                  onClick={() => handleClick(index)}\n                />\n              </Grid>\n            );\n          }\n        })}\n      </Grid>\n    </Grid>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}