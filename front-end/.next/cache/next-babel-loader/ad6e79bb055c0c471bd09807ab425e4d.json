{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n// This file provides helper functions to tranform the data from the server\n// into data the react components can use.\n// Takes in a Game and converts it to the format used in the GameTable.\nexport function gameToRow(game, players) {\n  return {\n    id: game[\"id\"],\n    blueTeam: teamToString(game[\"blueTeam\"], players),\n    redTeam: teamToString(game[\"redTeam\"], players),\n    score: game[\"score\"].join(\":\"),\n    serve: game[\"serve\"],\n    date: game[\"date\"]\n  };\n}\n\nfunction teamToString(team, players) {\n  return team.map(function (playerId) {\n    return players.get(playerId);\n  }).join(\", \");\n} // Takes in a list of Games and returns serveData.\n\n\nexport function getServeData(games) {\n  var winPercentage = getServeWinPercentage(games);\n  return [{\n    name: \"No Serve\",\n    value: 100 - winPercentage,\n    disabled: true\n  }, {\n    name: \"Serve\",\n    value: winPercentage\n  }];\n} // Takes in a list of Games and returns the win percentage of the team\n// with the inital serve.\n\nfunction getServeWinPercentage(games) {\n  var wins = games.filter(function (game) {\n    return game.score[game.serve] > game.score[game.serve ? 0 : 1];\n  }).length;\n  var total = games.length;\n  return wins / total * 100;\n} // Takes in a list of games and all players, and returns how many points\n// each player scored.\n\n\nexport function getPlayerPointsData(games, players) {\n  var data = []; // Should be of key: id, value: points.\n\n  var points = new Map(Array.from(players.keys()).map(function (key) {\n    return [key, 0];\n  }));\n\n  var _iterator = _createForOfIteratorHelper(games),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var game = _step.value;\n      var scoreBlue = game.score[0];\n      var scoreRed = game.score[1];\n      points.set(game.blueTeam[0], points.get(game.blueTeam[0]) + scoreBlue);\n      points.set(game.blueTeam[1], points.get(game.blueTeam[1]) + scoreBlue);\n      points.set(game.redTeam[0], points.get(game.redTeam[0]) + scoreRed);\n      points.set(game.redTeam[1], points.get(game.redTeam[1]) + scoreRed);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  points.forEach(function (value, key) {\n    data.push({\n      name: players.get(key),\n      points: value\n    });\n  });\n  return data;\n} // Takes in a list of games and returns how often each player won (in relative terms).\n\nexport function getPlayerWinsSliceData(games, players) {\n  var data = []; // Should be of key: id, value: points.\n\n  var wins = new Map(Array.from(players.keys()).map(function (key) {\n    return [key, 0];\n  }));\n  var totalGames = new Map(Array.from(players.keys()).map(function (key) {\n    return [key, 0];\n  }));\n\n  var _iterator2 = _createForOfIteratorHelper(games),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var game = _step2.value;\n      addTotalGames(game.blueTeam, game.redTeam, totalGames);\n\n      if (game.score[0] > game.score[1]) {\n        wins.set(game.blueTeam[0], wins.get(game.blueTeam[0]) + 1);\n        wins.set(game.blueTeam[1], wins.get(game.blueTeam[1]) + 1);\n      } else {\n        wins.set(game.redTeam[0], wins.get(game.redTeam[0]) + 1);\n        wins.set(game.redTeam[1], wins.get(game.redTeam[1]) + 1);\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  wins.forEach(function (value, key) {\n    data.push({\n      name: players.get(key),\n      wins: value / totalGames.get(key)\n    });\n  });\n  return data;\n}\n\nfunction addTotalGames(blueTeam, redTeam, totalGames) {\n  totalGames.set(blueTeam[0], totalGames.get(blueTeam[0]) + 1);\n  totalGames.set(blueTeam[1], totalGames.get(blueTeam[1]) + 1);\n  totalGames.set(redTeam[0], totalGames.get(redTeam[0]) + 1);\n  totalGames.set(redTeam[1], totalGames.get(redTeam[1]) + 1);\n} // Gets a list of games and players and returns a list of PlayerWinsTreeDPs.\n\n\nexport function getPlayerWinsTreeData(games, players) {\n  var wins = new Map();\n  var losses = new Map();\n  players.forEach(function (value, key) {\n    wins.set(key, 0);\n    losses.set(key, 0);\n  });\n\n  var _iterator3 = _createForOfIteratorHelper(games),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var game = _step3.value;\n\n      var _ref = game.score[0] > game.score[1] ? [game.blueTeam, game.redTeam] : [game.redTeam, game.blueTeam],\n          _ref2 = _slicedToArray(_ref, 2),\n          winners = _ref2[0],\n          losers = _ref2[1];\n\n      console.log(\"Winners\", winners);\n      wins.set(winners[0], wins.get(winners[0]) + 1);\n      wins.set(winners[1], wins.get(winners[1]) + 1);\n      losses.set(losers[0], losses.get(losers[0]) + 1);\n      losses.set(losers[1], losses.get(losers[1]) + 1);\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  var data = [];\n  players.forEach(function (value, key) {\n    var dataPoint = {\n      name: value,\n      children: [{\n        name: \"Wins\",\n        value: wins.get(key)\n      }, {\n        name: \"Losses\",\n        value: losses.get(key)\n      }]\n    };\n    data.push(dataPoint);\n  });\n  console.log(data);\n  return data;\n} // Gets a list of games and players and returns a map with a list of winrates over time mapped to\n// each players name.\n\nexport function getWinPercentage(games, players) {\n  var dataIds = new Map();\n  players.forEach(function (value, key) {\n    return dataIds.set(key, []);\n  });\n  var valuesPerPlayer = new Map();\n  players.forEach(function (value, key) {\n    return valuesPerPlayer.set(key, {\n      wins: 0,\n      total: 0\n    });\n  });\n\n  var _iterator4 = _createForOfIteratorHelper(games),\n      _step4;\n\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var game = _step4.value;\n      var player1 = game.blueTeam[0];\n      var player2 = game.blueTeam[1];\n      var player3 = game.redTeam[0];\n      var player4 = game.redTeam[1];\n      incrementNumTotal(player1, valuesPerPlayer);\n      incrementNumTotal(player2, valuesPerPlayer);\n      incrementNumTotal(player3, valuesPerPlayer);\n      incrementNumTotal(player4, valuesPerPlayer);\n\n      if (game.score[0] > game.score[1]) {\n        incrementNumWins(player1, valuesPerPlayer);\n        incrementNumWins(player2, valuesPerPlayer);\n      } else {\n        incrementNumWins(player3, valuesPerPlayer);\n        incrementNumWins(player4, valuesPerPlayer);\n      }\n\n      setNewWinPercentageDP(player1, game, valuesPerPlayer, dataIds);\n      setNewWinPercentageDP(player2, game, valuesPerPlayer, dataIds);\n      setNewWinPercentageDP(player3, game, valuesPerPlayer, dataIds);\n      setNewWinPercentageDP(player4, game, valuesPerPlayer, dataIds);\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n\n  var finalData = new Map();\n  dataIds.forEach(function (value, key) {\n    finalData.set(players.get(key), value);\n  });\n  return finalData;\n}\n\nfunction incrementNumTotal(id, valuesPerPlayer) {\n  var newPoint = _objectSpread({}, valuesPerPlayer.get(id));\n\n  newPoint.total = newPoint.total + 1;\n  valuesPerPlayer.set(id, newPoint);\n}\n\nfunction incrementNumWins(id, valuesPerPlayer) {\n  var playerScore = valuesPerPlayer.get(id);\n  valuesPerPlayer.set(id, _objectSpread(_objectSpread({}, playerScore), {}, {\n    wins: playerScore.wins + 1\n  }));\n}\n\nfunction setNewWinPercentageDP(id, game, valuesPerPlayer, dataIds) {\n  var values = valuesPerPlayer.get(id);\n  var dataPoint = {\n    date: game.date,\n    winPercentage: values.wins / values.total * 100\n  };\n  dataIds.set(id, [].concat(_toConsumableArray(dataIds.get(id)), [dataPoint]));\n}","map":{"version":3,"sources":["/Users/raphael/programming/web-projects/roundnet-stats/util/utils.tsx"],"names":["gameToRow","game","players","id","blueTeam","teamToString","redTeam","score","join","serve","date","team","map","playerId","get","getServeData","games","winPercentage","getServeWinPercentage","name","value","disabled","wins","filter","length","total","getPlayerPointsData","data","points","Map","Array","from","keys","key","scoreBlue","scoreRed","set","forEach","push","getPlayerWinsSliceData","totalGames","addTotalGames","getPlayerWinsTreeData","losses","winners","losers","console","log","dataPoint","children","getWinPercentage","dataIds","valuesPerPlayer","player1","player2","player3","player4","incrementNumTotal","incrementNumWins","setNewWinPercentageDP","finalData","newPoint","playerScore","values"],"mappings":"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","sourcesContent":["// This file provides helper functions to tranform the data from the server\n// into data the react components can use.\nimport {\n  Game,\n  Team,\n  Players,\n  ServeData,\n  PlayerPointsDataInstance,\n  PlayerWinsSliceDP,\n  PlayerWinsTreeDP,\n  WinPercentageDP,\n} from \"./types\";\n\n// Takes in a Game and converts it to the format used in the GameTable.\nexport function gameToRow(game: Game, players: Players) {\n  return {\n    id: game[\"id\"],\n    blueTeam: teamToString(game[\"blueTeam\"], players),\n    redTeam: teamToString(game[\"redTeam\"], players),\n    score: game[\"score\"].join(\":\"),\n    serve: game[\"serve\"],\n    date: game[\"date\"],\n  };\n}\n\nfunction teamToString(team: Team, players: Players): string {\n  return team.map((playerId) => players.get(playerId)).join(\", \");\n}\n\n// Takes in a list of Games and returns serveData.\nexport function getServeData(games: Game[]): ServeData {\n  const winPercentage = getServeWinPercentage(games);\n  return [\n    {\n      name: \"No Serve\",\n      value: 100 - winPercentage,\n      disabled: true,\n    },\n    {\n      name: \"Serve\",\n      value: winPercentage,\n    },\n  ];\n}\n\n// Takes in a list of Games and returns the win percentage of the team\n// with the inital serve.\nfunction getServeWinPercentage(games: Game[]): number {\n  const wins = games.filter((game) => {\n    return game.score[game.serve] > game.score[game.serve ? 0 : 1];\n  }).length;\n  const total = games.length;\n  return (wins / total) * 100;\n}\n\n// Takes in a list of games and all players, and returns how many points\n// each player scored.\nexport function getPlayerPointsData(\n  games: Game[],\n  players: Players\n): PlayerPointsDataInstance[] {\n  const data: PlayerPointsDataInstance[] = [];\n  // Should be of key: id, value: points.\n  const points = new Map(Array.from(players.keys()).map((key) => [key, 0]));\n  for (let game of games) {\n    const scoreBlue = game.score[0];\n    const scoreRed = game.score[1];\n    points.set(game.blueTeam[0], points.get(game.blueTeam[0]) + scoreBlue);\n    points.set(game.blueTeam[1], points.get(game.blueTeam[1]) + scoreBlue);\n    points.set(game.redTeam[0], points.get(game.redTeam[0]) + scoreRed);\n    points.set(game.redTeam[1], points.get(game.redTeam[1]) + scoreRed);\n  }\n  points.forEach((value, key) => {\n    data.push({ name: players.get(key), points: value });\n  });\n  return data;\n}\n\n// Takes in a list of games and returns how often each player won (in relative terms).\nexport function getPlayerWinsSliceData(\n  games: Game[],\n  players: Players\n): PlayerWinsSliceDP[] {\n  const data: PlayerWinsSliceDP[] = [];\n  // Should be of key: id, value: points.\n  const wins = new Map(Array.from(players.keys()).map((key) => [key, 0]));\n  const totalGames = new Map(Array.from(players.keys()).map((key) => [key, 0]));\n  for (let game of games) {\n    addTotalGames(game.blueTeam, game.redTeam, totalGames);\n    if (game.score[0] > game.score[1]) {\n      wins.set(game.blueTeam[0], wins.get(game.blueTeam[0]) + 1);\n      wins.set(game.blueTeam[1], wins.get(game.blueTeam[1]) + 1);\n    } else {\n      wins.set(game.redTeam[0], wins.get(game.redTeam[0]) + 1);\n      wins.set(game.redTeam[1], wins.get(game.redTeam[1]) + 1);\n    }\n  }\n  wins.forEach((value, key) => {\n    data.push({ name: players.get(key), wins: value / totalGames.get(key) });\n  });\n  return data;\n}\n\nfunction addTotalGames(\n  blueTeam: Team,\n  redTeam: Team,\n  totalGames: Map<string, number>\n): void {\n  totalGames.set(blueTeam[0], totalGames.get(blueTeam[0]) + 1);\n  totalGames.set(blueTeam[1], totalGames.get(blueTeam[1]) + 1);\n  totalGames.set(redTeam[0], totalGames.get(redTeam[0]) + 1);\n  totalGames.set(redTeam[1], totalGames.get(redTeam[1]) + 1);\n}\n\n// Gets a list of games and players and returns a list of PlayerWinsTreeDPs.\nexport function getPlayerWinsTreeData(\n  games: Game[],\n  players: Players\n): PlayerWinsTreeDP[] {\n  const wins = new Map<string, number>();\n  const losses = new Map<string, number>();\n  players.forEach((value, key) => {\n    wins.set(key, 0);\n    losses.set(key, 0);\n  });\n  for (let game of games) {\n    const [winners, losers] =\n      game.score[0] > game.score[1]\n        ? [game.blueTeam, game.redTeam]\n        : [game.redTeam, game.blueTeam];\n    console.log(\"Winners\", winners);\n    wins.set(winners[0], wins.get(winners[0]) + 1);\n    wins.set(winners[1], wins.get(winners[1]) + 1);\n    losses.set(losers[0], losses.get(losers[0]) + 1);\n    losses.set(losers[1], losses.get(losers[1]) + 1);\n  }\n  const data: PlayerWinsTreeDP[] = [];\n  players.forEach((value, key) => {\n    const dataPoint: PlayerWinsTreeDP = {\n      name: value,\n      children: [\n        { name: \"Wins\", value: wins.get(key) },\n        { name: \"Losses\", value: losses.get(key) },\n      ],\n    };\n    data.push(dataPoint);\n  });\n  console.log(data);\n  return data;\n}\n\n// Gets a list of games and players and returns a map with a list of winrates over time mapped to\n// each players name.\nexport function getWinPercentage(\n  games: Game[],\n  players: Players\n): Map<string, WinPercentageDP[]> {\n  const dataIds: Map<string, WinPercentageDP[]> = new Map();\n  players.forEach((value, key) => dataIds.set(key, []));\n  const valuesPerPlayer: Map<\n    string,\n    { wins: number; total: number }\n  > = new Map();\n  players.forEach((value, key) =>\n    valuesPerPlayer.set(key, { wins: 0, total: 0 })\n  );\n\n  for (let game of games) {\n    const player1 = game.blueTeam[0];\n    const player2 = game.blueTeam[1];\n    const player3 = game.redTeam[0];\n    const player4 = game.redTeam[1];\n    incrementNumTotal(player1, valuesPerPlayer);\n    incrementNumTotal(player2, valuesPerPlayer);\n    incrementNumTotal(player3, valuesPerPlayer);\n    incrementNumTotal(player4, valuesPerPlayer);\n    if (game.score[0] > game.score[1]) {\n      incrementNumWins(player1, valuesPerPlayer);\n      incrementNumWins(player2, valuesPerPlayer);\n    } else {\n      incrementNumWins(player3, valuesPerPlayer);\n      incrementNumWins(player4, valuesPerPlayer);\n    }\n    setNewWinPercentageDP(player1, game, valuesPerPlayer, dataIds);\n    setNewWinPercentageDP(player2, game, valuesPerPlayer, dataIds);\n    setNewWinPercentageDP(player3, game, valuesPerPlayer, dataIds);\n    setNewWinPercentageDP(player4, game, valuesPerPlayer, dataIds);\n  }\n  const finalData = new Map<string, WinPercentageDP[]>();\n  dataIds.forEach((value, key) => {\n    finalData.set(players.get(key), value);\n  });\n  return finalData;\n}\n\nfunction incrementNumTotal(\n  id: string,\n  valuesPerPlayer: Map<string, { wins: number; total: number }>\n): void {\n  const newPoint = { ...valuesPerPlayer.get(id) };\n  newPoint.total = newPoint.total + 1;\n  valuesPerPlayer.set(id, newPoint);\n}\n\nfunction incrementNumWins(\n  id: string,\n  valuesPerPlayer: Map<string, { wins: number; total: number }>\n): void {\n  const playerScore = valuesPerPlayer.get(id);\n  valuesPerPlayer.set(id, {\n    ...playerScore,\n    wins: playerScore.wins + 1,\n  });\n}\n\nfunction setNewWinPercentageDP(\n  id: string,\n  game: Game,\n  valuesPerPlayer: Map<string, { wins: number; total: number }>,\n  dataIds: Map<string, WinPercentageDP[]>\n) {\n  const values = valuesPerPlayer.get(id);\n  const dataPoint: WinPercentageDP = {\n    date: game.date,\n    winPercentage: (values.wins / values.total) * 100,\n  };\n  dataIds.set(id, [...dataIds.get(id), dataPoint]);\n}\n"]},"metadata":{},"sourceType":"module"}