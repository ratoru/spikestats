{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/raphael/programming/web-projects/roundnet-stats/components/LoginForm.tsx\";\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { Formik, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport PersonRoundedIcon from \"@material-ui/icons/PersonRounded\";\nimport LockRoundedIcon from \"@material-ui/icons/LockRounded\";\nimport { InputFormField } from \"./common/InputFormField\";\nvar SignupSchema = Yup.object().shape({\n  username: Yup.string().min(3, \"Too short!\").max(30, \"Too long!\").required(\"Required!\"),\n  password: Yup.string().min(4, \"Too short!\").max(30, \"Too long!\").required(\"Required!\")\n});\nexport var LoginForm = function LoginForm(_ref) {\n  var header = _ref.header;\n  var initialValues = {\n    username: \"\",\n    password: \"\"\n  };\n\n  var handleSubmit = function handleSubmit(values) {\n    console.log(\"Submitted \", values);\n  };\n\n  return __jsx(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, __jsx(Typography, {\n    variant: \"h1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, __jsx(\"img\", {\n    id: \"logo\",\n    src: \"/roundnet-pie.svg\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }), \" \", header, \" \"), __jsx(Formik, {\n    initialValues: initialValues,\n    onSubmit: handleSubmit,\n    validationSchema: SignupSchema,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, function (_ref2) {\n    var dirty = _ref2.dirty,\n        isValid = _ref2.isValid,\n        handleReset = _ref2.handleReset;\n    return __jsx(Form, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }\n    }, __jsx(InputFormField, {\n      name: \"username\",\n      label: \"Username\",\n      icon: __jsx(PersonRoundedIcon, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 23\n        }\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 15\n      }\n    }), __jsx(InputFormField, {\n      name: \"password\",\n      label: \"Password\",\n      type: \"password\",\n      icon: __jsx(LockRoundedIcon, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 23\n        }\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 15\n      }\n    }), __jsx(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      disabled: !dirty || !isValid,\n      onClick: handleReset,\n      type: \"submit\",\n      fullWidth: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 15\n      }\n    }, \"Submit\"));\n  }));\n};\n_c = LoginForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"sources":["/Users/raphael/programming/web-projects/roundnet-stats/components/LoginForm.tsx"],"names":["React","Formik","Form","Yup","Typography","Button","PersonRoundedIcon","LockRoundedIcon","InputFormField","SignupSchema","object","shape","username","string","min","max","required","password","LoginForm","header","initialValues","handleSubmit","values","console","log","dirty","isValid","handleReset"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Formik, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport PersonRoundedIcon from \"@material-ui/icons/PersonRounded\";\nimport LockRoundedIcon from \"@material-ui/icons/LockRounded\";\nimport { InputFormField } from \"./common/InputFormField\";\n\ninterface FormValues {\n  username: string;\n  password: string;\n}\ninterface LoginFormProps {\n  header: string;\n}\n\nconst SignupSchema = Yup.object().shape({\n  username: Yup.string()\n    .min(3, \"Too short!\")\n    .max(30, \"Too long!\")\n    .required(\"Required!\"),\n  password: Yup.string()\n    .min(4, \"Too short!\")\n    .max(30, \"Too long!\")\n    .required(\"Required!\"),\n});\n\nexport const LoginForm: React.FC<LoginFormProps> = ({ header }) => {\n  const initialValues: FormValues = {\n    username: \"\",\n    password: \"\",\n  };\n  const handleSubmit = (values: FormValues): void => {\n    console.log(\"Submitted \", values);\n  };\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h1\">\n        <img id=\"logo\" src=\"/roundnet-pie.svg\" /> {header}{\" \"}\n      </Typography>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        validationSchema={SignupSchema}\n      >\n        {({ dirty, isValid, handleReset }) => {\n          return (\n            <Form>\n              <InputFormField\n                name=\"username\"\n                label=\"Username\"\n                icon={<PersonRoundedIcon />}\n              />\n              <InputFormField\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                icon={<LockRoundedIcon />}\n              />\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                disabled={!dirty || !isValid}\n                onClick={handleReset}\n                type=\"submit\"\n                fullWidth\n              >\n                Submit\n              </Button>\n            </Form>\n          );\n        }}\n      </Formik>\n    </React.Fragment>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}