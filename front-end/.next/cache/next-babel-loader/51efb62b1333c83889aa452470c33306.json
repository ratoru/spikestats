{"ast":null,"code":"var _jsxFileName = \"/Users/raphael/programming/web-projects/roundnet-stats/components/GroupList.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from \"react\";\nimport List from \"@material-ui/core/List\";\nimport Fab from \"@material-ui/core/Fab\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport GroupAddRoundedIcon from \"@material-ui/icons/GroupAddRounded\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Swal from \"sweetalert2\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { GroupListItem } from \"./common/GroupListItem\";\nimport { errorToast, groupPlayerSelection, groupConfirmation } from \"../util/swals\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: \"100vw\"\n  },\n  fabButton: {\n    position: \"absolute\",\n    bottom: theme.spacing(5),\n    left: 0,\n    right: 0,\n    margin: \"0 auto\"\n  }\n}));\nexport const GroupList = () => {\n  // Use style\n  const classes = useStyles(); // Use state hook\n\n  const {\n    0: groups,\n    1: setGroups\n  } = useState([]); // Add a group\n\n  const handleAdd = async () => {\n    let newGroup = {\n      groupId: uuidv4(),\n      groupname: \"\",\n      players: new Map()\n    }; // Ask for new group name.\n\n    const {\n      value: newGroupname\n    } = await Swal.fire({\n      title: \"New Group Name\",\n      text: \"Must be a unique group name.\",\n      icon: \"question\",\n      showCancelButton: true,\n      confirmButtonText: \"Next &rarr;\",\n      input: \"text\",\n      inputPlaceholder: \"New group name\",\n      inputValidator: value => {\n        if (!value) {\n          return \"Enter a name.\";\n        }\n\n        for (let group of groups) {\n          if (group.groupname === value) {\n            return \"Name is not unique!\";\n          }\n        }\n      },\n      progressSteps: [\"1\", \"2\", \"3\"],\n      currentProgressStep: \"0\"\n    });\n\n    if (!newGroupname) {\n      return;\n    }\n\n    newGroup.groupname = `${newGroupname}`; // Add Players until \"\" is returned.\n\n    groupPlayerSelection(newGroup.groupname).then(createdPlayers => {\n      newGroup.players = createdPlayers;\n      return groupConfirmation(newGroup.groupname, newGroup.players);\n    }).then(() => {\n      setGroups(groups => [...groups, newGroup]); // Call server\n    }).catch(() => {\n      return;\n    });\n  }; // Delete a group\n\n\n  const handleDelete = groupname => {\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: `You won't be able to revert deleting ${groupname}!`,\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: \"Yes, delete it!\",\n      focusConfirm: false,\n      focusCancel: true,\n      cancelButtonText: \"No, cancel!\"\n    }).then(result => {\n      if (result.value) {\n        // Save old state\n        const prevGroups = [...groups]; // Update UI.\n\n        setGroups(groups.filter(curGroup => curGroup.groupname !== groupname));\n        console.log(\",Handle delete.\", groupname, groups); // Call backend and revert if error.\n\n        const apiSuccess = true;\n\n        if (!apiSuccess) {\n          errorToast.fire({\n            text: \"The group was already deleted.\"\n          });\n          setGroups(prevGroups);\n        }\n      }\n    });\n  }; // Rename a group\n\n\n  const handleRenameGroup = (oldName, newName) => {\n    // New name can't be the old name.\n    const newGroups = [];\n\n    for (let curGroup of groups) {\n      const curName = curGroup.groupname; // Check if the name is unique.\n\n      if (newName === curName) {\n        errorToast.fire({\n          text: \"Group name is not unique!\"\n        });\n        return;\n      }\n\n      if (curName === oldName) {\n        // Modify old name.\n        newGroups.push(_objectSpread(_objectSpread({}, curGroup), {}, {\n          groupname: newName\n        }));\n      } else {\n        newGroups.push(curGroup);\n      }\n    }\n\n    setGroups(newGroups); // Call server here.\n  }; // Rename a player.\n\n\n  const handleRenamePlayer = (oldPlayerId, newName) => {\n    // New name can't be the old name.\n    const newGroups = [];\n\n    for (let curGroup of groups) {\n      let newPlayers = _objectSpread({}, curGroup.players);\n\n      if (newPlayers.has(oldPlayerId)) {\n        // Check if the name is unique.\n        let isDuplicate = false;\n        Array.from(newPlayers, ([key, value]) => {\n          if (key !== oldPlayerId && newName === value) {\n            errorToast.fire({\n              text: \"Player name is not unique!\"\n            });\n            isDuplicate = true; // I don't think you can return from here.\n          }\n        });\n\n        if (isDuplicate) {\n          return;\n        }\n\n        newPlayers.set(oldPlayerId, newName);\n      }\n\n      newGroups.push(_objectSpread(_objectSpread({}, curGroup), {}, {\n        players: newPlayers\n      }));\n    }\n\n    setGroups(newGroups); // Call server here.\n  };\n\n  let content;\n\n  if (groups.length == 0) {\n    content = __jsx(Typography, {\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 7\n      }\n    }, \"Seems like you have no groups yet. Create one by clicking the button below.\");\n  } else {\n    content = __jsx(List, {\n      component: \"nav\",\n      className: classes.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 7\n      }\n    }, groups.map(group => {\n      return __jsx(GroupListItem, {\n        key: group.groupname,\n        group: group,\n        onDelete: handleDelete,\n        onRenameGroup: handleRenameGroup,\n        onRenamePlayer: handleRenamePlayer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 13\n        }\n      });\n    }));\n  }\n\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 5\n    }\n  }, content, __jsx(Tooltip, {\n    title: \"New Group\",\n    arrow: true,\n    placement: \"top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }\n  }, __jsx(Fab, {\n    size: \"large\",\n    className: classes.fabButton,\n    \"aria-label\": \"add\",\n    color: \"secondary\",\n    onClick: handleAdd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }\n  }, __jsx(GroupAddRoundedIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 11\n    }\n  }))));\n};","map":{"version":3,"sources":["/Users/raphael/programming/web-projects/roundnet-stats/components/GroupList.tsx"],"names":["React","useState","List","Fab","Tooltip","GroupAddRoundedIcon","Typography","makeStyles","Swal","v4","uuidv4","GroupListItem","errorToast","groupPlayerSelection","groupConfirmation","useStyles","theme","root","width","fabButton","position","bottom","spacing","left","right","margin","GroupList","classes","groups","setGroups","handleAdd","newGroup","groupId","groupname","players","Map","value","newGroupname","fire","title","text","icon","showCancelButton","confirmButtonText","input","inputPlaceholder","inputValidator","group","progressSteps","currentProgressStep","then","createdPlayers","catch","handleDelete","focusConfirm","focusCancel","cancelButtonText","result","prevGroups","filter","curGroup","console","log","apiSuccess","handleRenameGroup","oldName","newName","newGroups","curName","push","handleRenamePlayer","oldPlayerId","newPlayers","has","isDuplicate","Array","from","key","set","content","length","map"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport List from \"@material-ui/core/List\";\nimport Fab from \"@material-ui/core/Fab\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport GroupAddRoundedIcon from \"@material-ui/icons/GroupAddRounded\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Swal from \"sweetalert2\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { GroupListItem } from \"./common/GroupListItem\";\nimport {\n  errorToast,\n  groupPlayerSelection,\n  groupConfirmation,\n} from \"../util/swals\";\nimport { Players } from \"../util/types\";\n\nexport interface Group {\n  groupname: string;\n  groupId: string;\n  players: Players;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100vw\",\n  },\n  fabButton: {\n    position: \"absolute\",\n    bottom: theme.spacing(5),\n    left: 0,\n    right: 0,\n    margin: \"0 auto\",\n  },\n}));\n\nexport const GroupList: React.FC = () => {\n  // Use style\n  const classes = useStyles();\n\n  // Use state hook\n  const [groups, setGroups] = useState<Group[]>([]);\n\n  // Add a group\n  const handleAdd = async () => {\n    let newGroup: Group = {\n      groupId: uuidv4(),\n      groupname: \"\",\n      players: new Map(),\n    };\n\n    // Ask for new group name.\n    const { value: newGroupname } = await Swal.fire({\n      title: \"New Group Name\",\n      text: \"Must be a unique group name.\",\n      icon: \"question\",\n      showCancelButton: true,\n      confirmButtonText: \"Next &rarr;\",\n      input: \"text\",\n      inputPlaceholder: \"New group name\",\n      inputValidator: (value) => {\n        if (!value) {\n          return \"Enter a name.\";\n        }\n        for (let group of groups) {\n          if (group.groupname === value) {\n            return \"Name is not unique!\";\n          }\n        }\n      },\n      progressSteps: [\"1\", \"2\", \"3\"],\n      currentProgressStep: \"0\",\n    });\n    if (!newGroupname) {\n      return;\n    }\n    newGroup.groupname = `${newGroupname}`;\n\n    // Add Players until \"\" is returned.\n    groupPlayerSelection(newGroup.groupname)\n      .then((createdPlayers) => {\n        newGroup.players = createdPlayers;\n        return groupConfirmation(newGroup.groupname, newGroup.players);\n      })\n      .then(() => {\n        setGroups((groups) => [...groups, newGroup]);\n        // Call server\n      })\n      .catch(() => {\n        return;\n      });\n  };\n\n  // Delete a group\n  const handleDelete = (groupname: string) => {\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: `You won't be able to revert deleting ${groupname}!`,\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: \"Yes, delete it!\",\n      focusConfirm: false,\n      focusCancel: true,\n      cancelButtonText: \"No, cancel!\",\n    }).then((result) => {\n      if (result.value) {\n        // Save old state\n        const prevGroups = [...groups];\n        // Update UI.\n        setGroups(\n          groups.filter((curGroup) => curGroup.groupname !== groupname)\n        );\n        console.log(\",Handle delete.\", groupname, groups);\n        // Call backend and revert if error.\n        const apiSuccess = true;\n        if (!apiSuccess) {\n          errorToast.fire({ text: \"The group was already deleted.\" });\n          setGroups(prevGroups);\n        }\n      }\n    });\n  };\n\n  // Rename a group\n  const handleRenameGroup = (oldName: string, newName: string) => {\n    // New name can't be the old name.\n\n    const newGroups: Group[] = [];\n    for (let curGroup of groups) {\n      const curName = curGroup.groupname;\n      // Check if the name is unique.\n      if (newName === curName) {\n        errorToast.fire({ text: \"Group name is not unique!\" });\n        return;\n      }\n      if (curName === oldName) {\n        // Modify old name.\n        newGroups.push({ ...curGroup, groupname: newName });\n      } else {\n        newGroups.push(curGroup);\n      }\n    }\n    setGroups(newGroups);\n    // Call server here.\n  };\n\n  // Rename a player.\n  const handleRenamePlayer = (oldPlayerId: string, newName: string) => {\n    // New name can't be the old name.\n    const newGroups: Group[] = [];\n    for (let curGroup of groups) {\n      let newPlayers = { ...curGroup.players };\n      if (newPlayers.has(oldPlayerId)) {\n        // Check if the name is unique.\n        let isDuplicate = false;\n        Array.from(newPlayers, ([key, value]) => {\n          if (key !== oldPlayerId && newName === value) {\n            errorToast.fire({ text: \"Player name is not unique!\" });\n            isDuplicate = true; // I don't think you can return from here.\n          }\n        });\n        if (isDuplicate) {\n          return;\n        }\n        newPlayers.set(oldPlayerId, newName);\n      }\n      newGroups.push({ ...curGroup, players: newPlayers });\n    }\n    setGroups(newGroups);\n    // Call server here.\n  };\n\n  let content: React.ReactNode;\n  if (groups.length == 0) {\n    content = (\n      <Typography align=\"center\">\n        Seems like you have no groups yet. Create one by clicking the button\n        below.\n      </Typography>\n    );\n  } else {\n    content = (\n      <List component=\"nav\" className={classes.root}>\n        {groups.map((group) => {\n          return (\n            <GroupListItem\n              key={group.groupname}\n              group={group}\n              onDelete={handleDelete}\n              onRenameGroup={handleRenameGroup}\n              onRenamePlayer={handleRenamePlayer}\n            />\n          );\n        })}\n      </List>\n    );\n  }\n  return (\n    <React.Fragment>\n      {content}\n      <Tooltip title=\"New Group\" arrow placement=\"top\">\n        <Fab\n          size=\"large\"\n          className={classes.fabButton}\n          aria-label=\"add\"\n          color=\"secondary\"\n          onClick={handleAdd}\n        >\n          <GroupAddRoundedIcon />\n        </Fab>\n      </Tooltip>\n    </React.Fragment>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}