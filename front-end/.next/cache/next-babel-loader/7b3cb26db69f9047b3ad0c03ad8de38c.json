{"ast":null,"code":"var _jsxFileName = \"/Users/raphael/programming/web-projects/roundnet-stats/components/AllCharts.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { getServeData, getPlayerPointsData, getPlayerWinsData } from \"../util/utils\"; // Need to use browser rendering for all amCharts.\n// https://github.com/amcharts/amcharts4/issues/272#issuecomment-646326596\n\nimport dynamic from \"next/dynamic\";\nconst ServePictorial = dynamic(() => import(\"./graphs/ServePictorial\"), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"./graphs/ServePictorial\")],\n    modules: [\"./graphs/ServePictorial\"]\n  }\n});\nconst PlayerPoints = dynamic(() => import(\"./graphs/PlayerPoints\"), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"./graphs/PlayerPoints\")],\n    modules: [\"./graphs/PlayerPoints\"]\n  }\n});\nconst PlayerWins = dynamic(() => import(\"./graphs/PlayerWins\"), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"./graphs/PlayerWins\")],\n    modules: [\"./graphs/PlayerWins\"]\n  }\n});\nexport const AllCharts = ({\n  groupname,\n  games,\n  players\n}) => {\n  return __jsx(Grid, {\n    container: true,\n    spacing: 5,\n    justify: \"center\",\n    alignItems: \"baseline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, __jsx(Typography, {\n    variant: \"h5\",\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, groupname, \"'s Stats!\")), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    container: true,\n    justify: \"center\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, __jsx(Typography, {\n    variant: \"h6\",\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  }, \"How many points did each player contribute to?\")), __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, __jsx(PlayerPoints, {\n    data: getPlayerPointsData(games, players),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    container: true,\n    justify: \"center\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, __jsx(Typography, {\n    variant: \"h6\",\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, \"How many wins was each player a part of?\"), __jsx(Typography, {\n    variant: \"subtitle1\",\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }, \"At the moment it's wins out of total games (including games you didn't play in).\"), __jsx(Typography, {\n    variant: \"subtitle1\",\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }, \"Drag players across the line to compare their # of wins.\"), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, __jsx(PlayerWins, {\n    data: getPlayerWinsData(games, players),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  })))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    container: true,\n    justify: \"center\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, __jsx(Typography, {\n    variant: \"h6\",\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, \"How often does the team with the first serve win?\")), __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, __jsx(ServePictorial, {\n    data: getServeData(games),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }))));\n};","map":{"version":3,"sources":["/Users/raphael/programming/web-projects/roundnet-stats/components/AllCharts.tsx"],"names":["React","Typography","Grid","getServeData","getPlayerPointsData","getPlayerWinsData","dynamic","ServePictorial","ssr","PlayerPoints","PlayerWins","AllCharts","groupname","games","players","textAlign"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { Game, Players } from \"../util/types\";\nimport {\n  getServeData,\n  getPlayerPointsData,\n  getPlayerWinsData,\n} from \"../util/utils\";\n\n// Need to use browser rendering for all amCharts.\n// https://github.com/amcharts/amcharts4/issues/272#issuecomment-646326596\nimport dynamic from \"next/dynamic\";\n\nconst ServePictorial = dynamic(() => import(\"./graphs/ServePictorial\"), {\n  ssr: false,\n});\n\nconst PlayerPoints = dynamic(() => import(\"./graphs/PlayerPoints\"), {\n  ssr: false,\n});\n\nconst PlayerWins = dynamic(() => import(\"./graphs/PlayerWins\"), {\n  ssr: false,\n});\n\ninterface AllChartsProps {\n  groupname: string | string[];\n  games: Game[];\n  players: Players;\n}\n\nexport const AllCharts: React.FC<AllChartsProps> = ({\n  groupname,\n  games,\n  players,\n}) => {\n  return (\n    <Grid container spacing={5} justify=\"center\" alignItems=\"baseline\">\n      <Grid item xs={12}>\n        <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\n          {groupname}'s Stats!\n        </Typography>\n      </Grid>\n      <Grid item xs={12} container justify=\"center\" alignItems=\"center\">\n        <Grid item xs={12}>\n          <Typography variant=\"h6\" style={{ textAlign: \"center\" }}>\n            How many points did each player contribute to?\n          </Typography>\n        </Grid>\n        <Grid item>\n          <PlayerPoints data={getPlayerPointsData(games, players)} />\n        </Grid>\n      </Grid>\n      <Grid item xs={12} container justify=\"center\" alignItems=\"center\">\n        <Grid item xs={12}>\n          <Typography variant=\"h6\" style={{ textAlign: \"center\" }}>\n            How many wins was each player a part of?\n          </Typography>\n          <Typography variant=\"subtitle1\" style={{ textAlign: \"center\" }}>\n            At the moment it's wins out of total games (including games you\n            didn't play in).\n          </Typography>\n          <Typography variant=\"subtitle1\" style={{ textAlign: \"center\" }}>\n            Drag players across the line to compare their # of wins.\n          </Typography>\n          <Grid item xs={12}>\n            <PlayerWins data={getPlayerWinsData(games, players)} />\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item xs={12} container justify=\"center\" alignItems=\"center\">\n        <Grid item xs={12}>\n          <Typography variant=\"h6\" style={{ textAlign: \"center\" }}>\n            How often does the team with the first serve win?\n          </Typography>\n        </Grid>\n        <Grid item>\n          <ServePictorial data={getServeData(games)} />\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}