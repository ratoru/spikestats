{"ast":null,"code":"var _jsxFileName = \"/Users/raphael/programming/web-projects/roundnet-stats/components/AddChips.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from \"react\";\nimport Chip from \"@material-ui/core/Chip\";\n\nfunction selectChip(oldChip, allChips) {\n  let numBlue = 0;\n  let numRed = 0;\n\n  for (let chip of allChips) {\n    if (chip.isBlue) {\n      numBlue++;\n    } else if (chip.isRed) {\n      numRed++;\n    }\n  }\n\n  const isBlue = numBlue < 2;\n  const isRed = !isBlue && numRed < 2;\n  return _objectSpread(_objectSpread({}, oldChip), {}, {\n    isBlue: isBlue,\n    isRed: isRed\n  });\n}\n\nfunction needToDisable(allChips) {\n  return allChips.filter(chip => {\n    chip.isBlue || chip.isRed;\n  }).length >= 4;\n}\n\nexport const AddChips = ({\n  players\n}) => {\n  const initialChips = [];\n  players.forEach((name, id) => {\n    initialChips.push({\n      label: name,\n      isBlue: false,\n      isRed: false,\n      disabled: false,\n      id: id\n    });\n  });\n  const {\n    0: chips,\n    1: setChips\n  } = useState(initialChips);\n\n  const handleClick = index => {\n    let newChips = [...chips];\n    newChips[index] = selectChip(newChips[index], newChips);\n\n    if (needToDisable(newChips)) {\n      newChips = newChips.map(chip => {\n        return _objectSpread(_objectSpread({}, chip), {}, {\n          disabled: !(chip.isBlue || chip.isRed)\n        });\n      });\n    }\n\n    setChips(newChips);\n  };\n\n  const handleDelete = index => {\n    let newChips = [...chips];\n    newChips[index] = _objectSpread(_objectSpread({}, newChips[index]), {}, {\n      isBlue: false,\n      isRed: false\n    });\n\n    if (!needToDisable(newChips)) {\n      newChips = newChips.map(chip => {\n        return _objectSpread(_objectSpread({}, chip), {}, {\n          disabled: false\n        });\n      });\n    }\n\n    setChips(newChips);\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, chips.map((chip, index) => {\n    if (chip.isBlue || chip.isRed) {\n      return __jsx(Chip, {\n        key: chip.id,\n        color: chip.isBlue ? \"primary\" : chip.isRed ? \"secondary\" : \"default\",\n        label: chip.label,\n        onDelete: () => handleDelete(index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }\n      });\n    }\n\n    return __jsx(Chip, {\n      key: chip.id,\n      color: chip.isBlue ? \"primary\" : chip.isRed ? \"secondary\" : \"default\",\n      label: chip.label,\n      clickable: true,\n      disabled: chip.disabled,\n      onClick: () => handleClick(index),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    });\n  }));\n};","map":{"version":3,"sources":["/Users/raphael/programming/web-projects/roundnet-stats/components/AddChips.tsx"],"names":["React","useState","Chip","selectChip","oldChip","allChips","numBlue","numRed","chip","isBlue","isRed","needToDisable","filter","length","AddChips","players","initialChips","forEach","name","id","push","label","disabled","chips","setChips","handleClick","index","newChips","map","handleDelete"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Chip from \"@material-ui/core/Chip\";\nimport Box from \"@material-ui/core/Box\";\nimport { Players } from \"../util/types\";\n\ninterface PlayerChip {\n  label: string;\n  isBlue: boolean;\n  isRed: boolean;\n  disabled: boolean;\n  id: number;\n}\n\ninterface AddChipsProps {\n  players: Players;\n}\n\nfunction selectChip(oldChip: PlayerChip, allChips: PlayerChip[]): PlayerChip {\n  let numBlue = 0;\n  let numRed = 0;\n  for (let chip of allChips) {\n    if (chip.isBlue) {\n      numBlue++;\n    } else if (chip.isRed) {\n      numRed++;\n    }\n  }\n  const isBlue = numBlue < 2;\n  const isRed = !isBlue && numRed < 2;\n  return { ...oldChip, isBlue: isBlue, isRed: isRed };\n}\n\nfunction needToDisable(allChips: PlayerChip[]): boolean {\n  return (\n    allChips.filter((chip) => {\n      chip.isBlue || chip.isRed;\n    }).length >= 4\n  );\n}\n\nexport const AddChips: React.FC<AddChipsProps> = ({ players }) => {\n  const initialChips: PlayerChip[] = [];\n  players.forEach((name, id) => {\n    initialChips.push({\n      label: name,\n      isBlue: false,\n      isRed: false,\n      disabled: false,\n      id: id,\n    });\n  });\n  const [chips, setChips] = useState<PlayerChip[]>(initialChips);\n\n  const handleClick = (index: number) => {\n    let newChips = [...chips];\n    newChips[index] = selectChip(newChips[index], newChips);\n    if (needToDisable(newChips)) {\n      newChips = newChips.map((chip) => {\n        return { ...chip, disabled: !(chip.isBlue || chip.isRed) };\n      });\n    }\n    setChips(newChips);\n  };\n\n  const handleDelete = (index: number) => {\n    let newChips = [...chips];\n    newChips[index] = { ...newChips[index], isBlue: false, isRed: false };\n    if (!needToDisable(newChips)) {\n      newChips = newChips.map((chip) => {\n        return { ...chip, disabled: false };\n      });\n    }\n    setChips(newChips);\n  };\n\n  return (\n    <div>\n      {chips.map((chip, index) => {\n        if (chip.isBlue || chip.isRed) {\n          return (\n            <Chip\n              key={chip.id}\n              color={\n                chip.isBlue ? \"primary\" : chip.isRed ? \"secondary\" : \"default\"\n              }\n              label={chip.label}\n              onDelete={() => handleDelete(index)}\n            />\n          );\n        }\n        return (\n          <Chip\n            key={chip.id}\n            color={\n              chip.isBlue ? \"primary\" : chip.isRed ? \"secondary\" : \"default\"\n            }\n            label={chip.label}\n            clickable\n            disabled={chip.disabled}\n            onClick={() => handleClick(index)}\n          />\n        );\n      })}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}