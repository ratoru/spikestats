{"ast":null,"code":"var _jsxFileName = \"/Users/raphael/programming/web-projects/roundnet-stats/components/GameTable.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Adapted from MUI Documentation\nimport React from \"react\";\nimport MaterialTable from \"material-table\"; // Imports to so that material-table icons are working.\n// Also see https://github.com/mbrn/material-table/issues/93#issuecomment-457015457\n\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Check from \"@material-ui/icons/Check\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport Remove from \"@material-ui/icons/Remove\";\nexport const GameTable = () => {\n  const [state, setState] = React.useState({\n    columns: [{\n      title: \"Blue Team\",\n      field: \"blueTeam\"\n    }, {\n      title: \"Red Team\",\n      field: \"redTeam\"\n    }, {\n      title: \"Score\",\n      field: \"score\",\n      type: \"numeric\"\n    }, {\n      title: \"Team with Serve\",\n      field: \"serve\",\n      lookup: {\n        0: \"Blue\",\n        1: \"Red\"\n      }\n    }, {\n      title: \"Date\",\n      field: \"date\",\n      type: \"datetime\"\n    }],\n    data: [{\n      blueTeam: \"Raph, Alex\",\n      redTeam: \"Val, Son\",\n      score: \"21:10\",\n      serve: 0,\n      date: new Date()\n    }]\n  });\n  return __jsx(MaterialTable, {\n    title: \"Your Games\",\n    icons: {\n      Check: () => __jsx(Check, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 23\n        }\n      }),\n      Export: () => __jsx(SaveAlt, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 24\n        }\n      }),\n      Filter: () => __jsx(FilterList, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 24\n        }\n      }),\n      FirstPage: () => __jsx(FirstPage, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 27\n        }\n      }),\n      LastPage: () => __jsx(LastPage, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 26\n        }\n      }),\n      NextPage: () => __jsx(ChevronRight, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 26\n        }\n      }),\n      PreviousPage: () => __jsx(ChevronLeft, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 12\n        }\n      }),\n      Search: () => __jsx(Search, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 24\n        }\n      }),\n      ThirdStateCheck: () => __jsx(Remove, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 33\n        }\n      }),\n      ViewColumn: () => __jsx(ViewColumn, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 28\n        }\n      }),\n      DetailPanel: () => __jsx(ChevronRight, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 12\n        }\n      })\n    },\n    columns: state.columns,\n    data: state.data,\n    editable: {\n      onRowAdd: newData => new Promise(resolve => {\n        resolve();\n        setState(prevState => {\n          const data = [...prevState.data];\n          data.push(newData);\n          return _objectSpread(_objectSpread({}, prevState), {}, {\n            data\n          });\n        });\n      }),\n      onRowDelete: oldData => new Promise(resolve => {\n        resolve();\n        setState(prevState => {\n          const data = [...prevState.data];\n          data.splice(data.indexOf(oldData), 1);\n          return _objectSpread(_objectSpread({}, prevState), {}, {\n            data\n          });\n        });\n      })\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  });\n};","map":{"version":3,"sources":["/Users/raphael/programming/web-projects/roundnet-stats/components/GameTable.tsx"],"names":["React","MaterialTable","Search","ViewColumn","SaveAlt","ChevronLeft","ChevronRight","FirstPage","LastPage","Check","FilterList","Remove","GameTable","state","setState","useState","columns","title","field","type","lookup","data","blueTeam","redTeam","score","serve","date","Date","Export","Filter","NextPage","PreviousPage","ThirdStateCheck","DetailPanel","onRowAdd","newData","Promise","resolve","prevState","push","onRowDelete","oldData","splice","indexOf"],"mappings":"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","sourcesContent":["// Adapted from MUI Documentation\nimport React from \"react\";\nimport MaterialTable, { Column } from \"material-table\";\n// Imports to so that material-table icons are working.\n// Also see https://github.com/mbrn/material-table/issues/93#issuecomment-457015457\nimport { SvgIconProps } from \"@material-ui/core/SvgIcon\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Add from \"@material-ui/icons/Add\";\nimport Check from \"@material-ui/icons/Check\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport Remove from \"@material-ui/icons/Remove\";\n\ninterface Row {\n  blueTeam: string;\n  redTeam: string;\n  score: string;\n  serve: number;\n  date: Date;\n}\n\ninterface TableState {\n  columns: Array<Column<Row>>;\n  data: Row[];\n}\n\ninterface GameTableProps {}\n\nexport const GameTable: React.FC<GameTableProps> = () => {\n  const [state, setState] = React.useState<TableState>({\n    columns: [\n      { title: \"Blue Team\", field: \"blueTeam\" },\n      { title: \"Red Team\", field: \"redTeam\" },\n      { title: \"Score\", field: \"score\", type: \"numeric\" },\n      {\n        title: \"Team with Serve\",\n        field: \"serve\",\n        lookup: { 0: \"Blue\", 1: \"Red\" },\n      },\n      { title: \"Date\", field: \"date\", type: \"datetime\" },\n    ],\n    data: [\n      {\n        blueTeam: \"Raph, Alex\",\n        redTeam: \"Val, Son\",\n        score: \"21:10\",\n        serve: 0,\n        date: new Date(),\n      },\n    ],\n  });\n\n  return (\n    <MaterialTable\n      title=\"Your Games\"\n      icons={{\n        Check: () => (<Check />) as React.ReactElement<SvgIconProps>,\n        Export: () => (<SaveAlt />) as React.ReactElement<SvgIconProps>,\n        Filter: () => (<FilterList />) as React.ReactElement<SvgIconProps>,\n        FirstPage: () => (<FirstPage />) as React.ReactElement<SvgIconProps>,\n        LastPage: () => (<LastPage />) as React.ReactElement<SvgIconProps>,\n        NextPage: () => (<ChevronRight />) as React.ReactElement<SvgIconProps>,\n        PreviousPage: () =>\n          (<ChevronLeft />) as React.ReactElement<SvgIconProps>,\n        Search: () => (<Search />) as React.ReactElement<SvgIconProps>,\n        ThirdStateCheck: () => (<Remove />) as React.ReactElement<SvgIconProps>,\n        ViewColumn: () => (<ViewColumn />) as React.ReactElement<SvgIconProps>,\n        DetailPanel: () =>\n          (<ChevronRight />) as React.ReactElement<SvgIconProps>,\n      }}\n      columns={state.columns}\n      data={state.data}\n      editable={{\n        onRowAdd: (newData) =>\n          new Promise((resolve) => {\n            resolve();\n            setState((prevState) => {\n              const data = [...prevState.data];\n              data.push(newData);\n              return { ...prevState, data };\n            });\n          }),\n        onRowDelete: (oldData) =>\n          new Promise((resolve) => {\n            resolve();\n            setState((prevState) => {\n              const data = [...prevState.data];\n              data.splice(data.indexOf(oldData), 1);\n              return { ...prevState, data };\n            });\n          }),\n      }}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}