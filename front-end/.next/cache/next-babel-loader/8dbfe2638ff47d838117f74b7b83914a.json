{"ast":null,"code":"// This file defines the basic type structure of the data structures used.\n// Two player Ids.\nexport var ServeTeam; // Always in order teamBlue, teamRed.\n\n(function (ServeTeam) {\n  ServeTeam[ServeTeam[\"Blue\"] = 0] = \"Blue\";\n  ServeTeam[ServeTeam[\"Red\"] = 1] = \"Red\";\n})(ServeTeam || (ServeTeam = {}));","map":{"version":3,"sources":["/Users/raphael/programming/web-projects/roundnet-stats/util/types.tsx"],"names":["ServeTeam"],"mappings":"AAAA;AAEA;AAGA,WAAYA,SAAZ,C,CAKA;;WALYA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;GAAAA,S,KAAAA,S","sourcesContent":["// This file defines the basic type structure of the data structures used.\n\n// Two player Ids.\nexport type Team = [number, number];\n\nexport enum ServeTeam {\n  Blue,\n  Red,\n}\n\n// Always in order teamBlue, teamRed.\ntype Score = [number, number];\n\nexport interface Game {\n  id: number;\n  blueTeam: Team;\n  redTeam: Team;\n  score: Score;\n  serve: ServeTeam;\n  date: Date;\n}\n\ninterface Player {\n  id: number;\n  name: string;\n}\n\n// export type Players = Map<Player[\"id\"], Player[\"name\"]>;\nexport type Players = Map<number, string>;\n\n// Chart Data Definitons\nexport type ServeData = [\n  { name: string; value: number; disabled: boolean },\n  { name: string; value: number }\n];\n"]},"metadata":{},"sourceType":"module"}