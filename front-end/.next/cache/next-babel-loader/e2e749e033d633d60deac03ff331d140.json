{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/raphael/programming/web-projects/roundnet-stats/components/AddChips.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React, { useState } from \"react\";\nimport Chip from \"@material-ui/core/Chip\";\n\nfunction updateChip(oldChip, allChips) {\n  var numBlue = 0;\n  var numRed = 0;\n\n  var _iterator = _createForOfIteratorHelper(allChips),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var chip = _step.value;\n\n      if (chip.isBlue) {\n        numBlue++;\n      } else if (chip.isRed) {\n        numRed++;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var isBlue = numBlue < 2;\n  var isRed = !isBlue && numRed < 2;\n  return _objectSpread({\n    isBlue: isBlue,\n    isRed: isRed\n  }, oldChip);\n}\n\nfunction needToDisable(allChips) {\n  return allChips.filter(function (chip) {\n    chip.isBlue || chip.isRed;\n  }).length >= 4;\n}\n\nexport var AddChips = function AddChips(_ref) {\n  _s();\n\n  var players = _ref.players;\n  var initialChips = [];\n  players.forEach(function (name, id) {\n    initialChips.push({\n      label: name,\n      isBlue: false,\n      isRed: false,\n      disabled: false,\n      id: id\n    });\n  });\n\n  var _useState = useState(initialChips),\n      chips = _useState[0],\n      setChips = _useState[1];\n\n  var handleClick = function handleClick(index) {\n    var newChips = _toConsumableArray(chips);\n\n    newChips[index] = updateChip(newChips[index], chips);\n\n    if (needToDisable(newChips)) {\n      newChips = newChips.map(function (chip) {\n        return _objectSpread(_objectSpread({}, chip), {}, {\n          disabled: true\n        });\n      });\n    }\n\n    setChips(newChips);\n  };\n\n  var handleDelete = function handleDelete(id, index) {};\n\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, chips.map(function (chip, index) {\n    if (chip.isBlue || chip.isRed) {\n      return __jsx(Chip, {\n        key: chip.id,\n        color: chip.isBlue ? \"primary\" : chip.isRed ? \"secondary\" : \"default\",\n        label: chip.label,\n        clickable: true,\n        disabled: chip.disabled,\n        onClick: function onClick() {\n          return handleClick(index);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }\n      });\n    }\n\n    return __jsx(Chip, {\n      key: chip.id,\n      color: chip.isBlue ? \"primary\" : chip.isRed ? \"secondary\" : \"default\",\n      label: chip.label,\n      clickable: true,\n      disabled: chip.disabled,\n      onClick: function onClick() {\n        return handleClick(index);\n      },\n      onDelete: function onDelete() {\n        return handleDelete(chip.id, index);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }\n    });\n  }));\n};\n\n_s(AddChips, \"J79dli3DCdckx66vzXn9ZiDaNk4=\");\n\n_c = AddChips;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddChips\");","map":{"version":3,"sources":["/Users/raphael/programming/web-projects/roundnet-stats/components/AddChips.tsx"],"names":["React","useState","Chip","updateChip","oldChip","allChips","numBlue","numRed","chip","isBlue","isRed","needToDisable","filter","length","AddChips","players","initialChips","forEach","name","id","push","label","disabled","chips","setChips","handleClick","index","newChips","map","handleDelete"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Chip from \"@material-ui/core/Chip\";\nimport { Players } from \"../util/types\";\n\ninterface PlayerChip {\n  label: string;\n  isBlue: boolean;\n  isRed: boolean;\n  disabled: boolean;\n  id: number;\n}\n\ninterface AddChipsProps {\n  players: Players;\n}\n\nfunction updateChip(oldChip: PlayerChip, allChips: PlayerChip[]): PlayerChip {\n  let numBlue = 0;\n  let numRed = 0;\n  for (let chip of allChips) {\n    if (chip.isBlue) {\n      numBlue++;\n    } else if (chip.isRed) {\n      numRed++;\n    }\n  }\n  const isBlue = numBlue < 2;\n  const isRed = !isBlue && numRed < 2;\n  return { isBlue: isBlue, isRed: isRed, ...oldChip };\n}\n\nfunction needToDisable(allChips: PlayerChip[]): boolean {\n  return (\n    allChips.filter((chip) => {\n      chip.isBlue || chip.isRed;\n    }).length >= 4\n  );\n}\n\nexport const AddChips: React.FC<AddChipsProps> = ({ players }) => {\n  const initialChips: PlayerChip[] = [];\n  players.forEach((name, id) => {\n    initialChips.push({\n      label: name,\n      isBlue: false,\n      isRed: false,\n      disabled: false,\n      id: id,\n    });\n  });\n  const [chips, setChips] = useState<PlayerChip[]>(initialChips);\n\n  const handleClick = (index: number) => {\n    let newChips = [...chips];\n    newChips[index] = updateChip(newChips[index], chips);\n    if (needToDisable(newChips)) {\n      newChips = newChips.map((chip) => {\n        return { ...chip, disabled: true };\n      });\n    }\n    setChips(newChips);\n  };\n  const handleDelete = (id: number, index: number) => {};\n\n  return (\n    <div>\n      {chips.map((chip, index) => {\n        if (chip.isBlue || chip.isRed) {\n          return (\n            <Chip\n              key={chip.id}\n              color={\n                chip.isBlue ? \"primary\" : chip.isRed ? \"secondary\" : \"default\"\n              }\n              label={chip.label}\n              clickable\n              disabled={chip.disabled}\n              onClick={() => handleClick(index)}\n            />\n          );\n        }\n        return (\n          <Chip\n            key={chip.id}\n            color={\n              chip.isBlue ? \"primary\" : chip.isRed ? \"secondary\" : \"default\"\n            }\n            label={chip.label}\n            clickable\n            disabled={chip.disabled}\n            onClick={() => handleClick(index)}\n            onDelete={() => handleDelete(chip.id, index)}\n          />\n        );\n      })}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}