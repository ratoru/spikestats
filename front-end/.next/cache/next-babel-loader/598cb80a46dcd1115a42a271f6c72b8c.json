{"ast":null,"code":"// This file provides helper functions to tranform the data from the server\n// into data the react components can use.\n// Takes in a Game and converts it to the format used in the GameTable.\nexport function gameToRow(game, players) {\n  return {\n    id: game[\"id\"],\n    blueTeam: teamToString(game[\"blueTeam\"], players),\n    redTeam: teamToString(game[\"redTeam\"], players),\n    score: game[\"score\"].join(\":\"),\n    serve: game[\"serve\"],\n    date: game[\"date\"]\n  };\n}\n\nfunction teamToString(team, players) {\n  return team.map(playerId => players.get(playerId)).join(\", \");\n} // Takes in a list of Games and returns serveData.\n\n\nexport function getServeData(games) {\n  const winPercentage = getServeWinPercentage(games);\n  console.log(winPercentage);\n  return [{\n    name: \"No Serve\",\n    value: 100 - winPercentage,\n    disabled: true\n  }, {\n    name: \"Serve\",\n    value: winPercentage\n  }];\n} // Takes in a list of Games and returns the win percentage of the team\n// with the inital serve.\n\nfunction getServeWinPercentage(games) {\n  return Math.floor(games.filter(game => {\n    return game.score[game.serve] > game.score[game.serve ? 1 : 0];\n  }).length * 100 / games.length);\n}","map":{"version":3,"sources":["/Users/raphael/programming/web-projects/roundnet-stats/util/utils.tsx"],"names":["gameToRow","game","players","id","blueTeam","teamToString","redTeam","score","join","serve","date","team","map","playerId","get","getServeData","games","winPercentage","getServeWinPercentage","console","log","name","value","disabled","Math","floor","filter","length"],"mappings":"AAAA;AACA;AAGA;AACA,OAAO,SAASA,SAAT,CAAmBC,IAAnB,EAA+BC,OAA/B,EAAiD;AACtD,SAAO;AACLC,IAAAA,EAAE,EAAEF,IAAI,CAAC,IAAD,CADH;AAELG,IAAAA,QAAQ,EAAEC,YAAY,CAACJ,IAAI,CAAC,UAAD,CAAL,EAAmBC,OAAnB,CAFjB;AAGLI,IAAAA,OAAO,EAAED,YAAY,CAACJ,IAAI,CAAC,SAAD,CAAL,EAAkBC,OAAlB,CAHhB;AAILK,IAAAA,KAAK,EAAEN,IAAI,CAAC,OAAD,CAAJ,CAAcO,IAAd,CAAmB,GAAnB,CAJF;AAKLC,IAAAA,KAAK,EAAER,IAAI,CAAC,OAAD,CALN;AAMLS,IAAAA,IAAI,EAAET,IAAI,CAAC,MAAD;AANL,GAAP;AAQD;;AAED,SAASI,YAAT,CAAsBM,IAAtB,EAAkCT,OAAlC,EAA4D;AAC1D,SAAOS,IAAI,CAACC,GAAL,CAAUC,QAAD,IAAcX,OAAO,CAACY,GAAR,CAAYD,QAAZ,CAAvB,EAA8CL,IAA9C,CAAmD,IAAnD,CAAP;AACD,C,CAED;;;AACA,OAAO,SAASO,YAAT,CAAsBC,KAAtB,EAAgD;AACrD,QAAMC,aAAa,GAAGC,qBAAqB,CAACF,KAAD,CAA3C;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYH,aAAZ;AACA,SAAO,CACL;AACEI,IAAAA,IAAI,EAAE,UADR;AAEEC,IAAAA,KAAK,EAAE,MAAML,aAFf;AAGEM,IAAAA,QAAQ,EAAE;AAHZ,GADK,EAML;AACEF,IAAAA,IAAI,EAAE,OADR;AAEEC,IAAAA,KAAK,EAAEL;AAFT,GANK,CAAP;AAWD,C,CAED;AACA;;AACA,SAASC,qBAAT,CAA+BF,KAA/B,EAAsD;AACpD,SAAOQ,IAAI,CAACC,KAAL,CACJT,KAAK,CAACU,MAAN,CAAczB,IAAD,IAAU;AACtB,WAAOA,IAAI,CAACM,KAAL,CAAWN,IAAI,CAACQ,KAAhB,IAAyBR,IAAI,CAACM,KAAL,CAAWN,IAAI,CAACQ,KAAL,GAAa,CAAb,GAAiB,CAA5B,CAAhC;AACD,GAFA,EAEEkB,MAFF,GAGC,GAHF,GAIEX,KAAK,CAACW,MALH,CAAP;AAOD","sourcesContent":["// This file provides helper functions to tranform the data from the server\n// into data the react components can use.\nimport { Game, Team, Players, ServeData } from \"./types\";\n\n// Takes in a Game and converts it to the format used in the GameTable.\nexport function gameToRow(game: Game, players: Players) {\n  return {\n    id: game[\"id\"],\n    blueTeam: teamToString(game[\"blueTeam\"], players),\n    redTeam: teamToString(game[\"redTeam\"], players),\n    score: game[\"score\"].join(\":\"),\n    serve: game[\"serve\"],\n    date: game[\"date\"],\n  };\n}\n\nfunction teamToString(team: Team, players: Players): string {\n  return team.map((playerId) => players.get(playerId)).join(\", \");\n}\n\n// Takes in a list of Games and returns serveData.\nexport function getServeData(games: Game[]): ServeData {\n  const winPercentage = getServeWinPercentage(games);\n  console.log(winPercentage);\n  return [\n    {\n      name: \"No Serve\",\n      value: 100 - winPercentage,\n      disabled: true,\n    },\n    {\n      name: \"Serve\",\n      value: winPercentage,\n    },\n  ];\n}\n\n// Takes in a list of Games and returns the win percentage of the team\n// with the inital serve.\nfunction getServeWinPercentage(games: Game[]): number {\n  return Math.floor(\n    (games.filter((game) => {\n      return game.score[game.serve] > game.score[game.serve ? 1 : 0];\n    }).length *\n      100) /\n      games.length\n  );\n}\n"]},"metadata":{},"sourceType":"module"}