{"ast":null,"code":"var _jsxFileName = \"/Users/raphael/programming/web-projects/roundnet-stats/components/AllCharts.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { getServeData, getPlayerPointsData } from \"../util/utils\"; // Need to use browser rendering for all amCharts.\n// https://github.com/amcharts/amcharts4/issues/272#issuecomment-646326596\n\nimport dynamic from \"next/dynamic\";\nconst ServePictorial = dynamic(() => import(\"./graphs/ServePictorial\"), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"./graphs/ServePictorial\")],\n    modules: [\"./graphs/ServePictorial\"]\n  }\n});\nconst PlayerPoints = dynamic(() => import(\"./graphs/PlayerPoints\"), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak(\"./graphs/PlayerPoints\")],\n    modules: [\"./graphs/PlayerPoints\"]\n  }\n});\nexport const AllCharts = ({\n  groupname,\n  games,\n  players\n}) => {\n  return __jsx(Grid, {\n    container: true,\n    spacing: 5,\n    justify: \"center\",\n    alignItems: \"baseline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, __jsx(Typography, {\n    variant: \"h5\",\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, groupname, \"'s Stats!\")), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    container: true,\n    justify: \"center\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, __jsx(Typography, {\n    variant: \"h6\",\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }\n  }, \"How often does the team with the first serve win?\")), __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, __jsx(ServePictorial, {\n    data: getServeData(games),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    container: true,\n    justify: \"center\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, __jsx(Typography, {\n    variant: \"h6\",\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }, \"How many points did each player contribute to?\")), __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, __jsx(PlayerPoints, {\n    data: getPlayerPointsData(games, players),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }))));\n};","map":{"version":3,"sources":["/Users/raphael/programming/web-projects/roundnet-stats/components/AllCharts.tsx"],"names":["React","Typography","Grid","getServeData","getPlayerPointsData","dynamic","ServePictorial","ssr","PlayerPoints","AllCharts","groupname","games","players","textAlign"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { Game, Players } from \"../util/types\";\nimport { getServeData, getPlayerPointsData } from \"../util/utils\";\n\n// Need to use browser rendering for all amCharts.\n// https://github.com/amcharts/amcharts4/issues/272#issuecomment-646326596\nimport dynamic from \"next/dynamic\";\n\nconst ServePictorial = dynamic(() => import(\"./graphs/ServePictorial\"), {\n  ssr: false,\n});\n\nconst PlayerPoints = dynamic(() => import(\"./graphs/PlayerPoints\"), {\n  ssr: false,\n});\n\ninterface AllChartsProps {\n  groupname: string | string[];\n  games: Game[];\n  players: Players;\n}\n\nexport const AllCharts: React.FC<AllChartsProps> = ({\n  groupname,\n  games,\n  players,\n}) => {\n  return (\n    <Grid container spacing={5} justify=\"center\" alignItems=\"baseline\">\n      <Grid item xs={12}>\n        <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\n          {groupname}'s Stats!\n        </Typography>\n      </Grid>\n      <Grid item xs={12} container justify=\"center\" alignItems=\"center\">\n        <Grid item xs={12}>\n          <Typography variant=\"h6\" style={{ textAlign: \"center\" }}>\n            How often does the team with the first serve win?\n          </Typography>\n        </Grid>\n        <Grid item>\n          <ServePictorial data={getServeData(games)} />\n        </Grid>\n      </Grid>\n      <Grid item xs={12} container justify=\"center\" alignItems=\"center\">\n        <Grid item xs={12}>\n          <Typography variant=\"h6\" style={{ textAlign: \"center\" }}>\n            How many points did each player contribute to?\n          </Typography>\n        </Grid>\n        <Grid item>\n          <PlayerPoints data={getPlayerPointsData(games, players)} />\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}