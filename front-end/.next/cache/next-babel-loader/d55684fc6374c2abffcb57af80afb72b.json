{"ast":null,"code":"var _jsxFileName = \"/Users/raphael/programming/web-projects/roundnet-stats/util/swals.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport Swal from \"sweetalert2\";\nimport withReactContent from \"sweetalert2-react-content\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { AddChips } from \"../components/addComponents/AddChips\";\nimport { AddScoreField } from \"../components/addComponents/AddScoreField\";\nimport { AddServe } from \"../components/addComponents/AddServe\";\nimport { AddConfirm } from \"../components/addComponents/AddConfirm\";\nimport { AddGroupPlayers } from \"../components/addComponents/AddGroupPlayers\";\nimport { GroupConfirm } from \"../components/addComponents/GroupConfirm\";\nimport { ServeTeam } from \"./types\"; // Template for error messages.\n\nexport const errorToast = Swal.mixin({\n  title: \"Something went wrong!\",\n  icon: \"error\",\n  toast: true,\n  position: \"center\",\n  showConfirmButton: false,\n  timer: 4000,\n  timerProgressBar: true\n});\nexport async function teamSelection(players) {\n  const emptyTeamBlue = [\"\", \"\"];\n  const emptyTeamRed = [\"\", \"\"];\n  const selectedTeams = {\n    blueTeam: emptyTeamBlue,\n    redTeam: emptyTeamRed\n  };\n\n  const handleSelectPlayer = (id, isBlue) => {\n    if (isBlue) {\n      if (selectedTeams.blueTeam[0] === \"\") {\n        selectedTeams.blueTeam[0] = id;\n      } else {\n        selectedTeams.blueTeam[1] = id;\n      }\n    } else {\n      if (selectedTeams.redTeam[0] === \"\") {\n        selectedTeams.redTeam[0] = id;\n      } else {\n        selectedTeams.redTeam[1] = id;\n      }\n    }\n  };\n\n  const handleRemovePlayer = (id, isBlue) => {\n    if (isBlue) {\n      if (selectedTeams.blueTeam[0] === id) {\n        selectedTeams.blueTeam[0] = \"\";\n      } else {\n        selectedTeams.blueTeam[1] = \"\";\n      }\n    } else {\n      if (selectedTeams.redTeam[0] === id) {\n        selectedTeams.redTeam[0] = \"\";\n      } else {\n        selectedTeams.redTeam[1] = \"\";\n      }\n    }\n  };\n\n  const AddGameSwal = withReactContent(Swal);\n  const {\n    value: finalSelection\n  } = await AddGameSwal.fire({\n    title: \"Choose Teams\",\n    html: __jsx(AddChips, {\n      players: players,\n      onSelect: handleSelectPlayer,\n      onDelete: handleRemovePlayer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }\n    }),\n    showCancelButton: true,\n    confirmButtonText: \"Next &rarr;\",\n    progressSteps: [\"1\", \"2\", \"3\", \"4\"],\n    currentProgressStep: \"0\",\n    preConfirm: () => {\n      if (selectedTeams.blueTeam[0] === \"\" || selectedTeams.blueTeam[1] === \"\" || selectedTeams.redTeam[0] === \"\" || selectedTeams.redTeam[1] === \"\") {\n        AddGameSwal.showValidationMessage(\"You must select four players.\");\n        return false;\n      }\n\n      return selectedTeams;\n    }\n  }); // Correct and neccessary syntax??\n\n  return new Promise((resolve, reject) => {\n    if (!finalSelection) {\n      reject();\n    } else {\n      resolve(finalSelection);\n    }\n  });\n} // Score Selection\n\nexport async function scoreSelection(players, teamSelection) {\n  let blueScore;\n  let redScore;\n\n  const handleChange = (score, isBlue) => {\n    isBlue ? blueScore = score : redScore = score;\n  };\n\n  const scoreSwal = withReactContent(Swal);\n  const {\n    value: finalScore\n  } = await scoreSwal.fire({\n    title: \"Enter the Score\",\n    html: __jsx(AddScoreField, {\n      players: players,\n      teams: teamSelection,\n      blueScore: blueScore,\n      redScore: redScore,\n      onChange: handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 7\n      }\n    }),\n    showCancelButton: true,\n    confirmButtonText: \"Next &rarr;\",\n    progressSteps: [\"1\", \"2\", \"3\", \"4\"],\n    currentProgressStep: \"1\",\n    preConfirm: () => {\n      if (blueScore >= 0 && redScore >= 0 && blueScore !== redScore) {\n        const score = [blueScore, redScore];\n        return score;\n      }\n\n      scoreSwal.showValidationMessage(\"The score can't be a tie.\");\n      return false;\n    }\n  }); // Correct and neccessary syntax??\n\n  return new Promise((resolve, reject) => {\n    if (!finalScore) {\n      reject();\n    } else {\n      resolve(finalScore);\n    }\n  });\n} // Serve Selection\n\nexport async function serveSelection(players, teamSelection, score) {\n  let curServeSelection = \"\";\n\n  const handleChange = newSelection => {\n    curServeSelection = newSelection;\n  };\n\n  const scoreSwal = withReactContent(Swal);\n  const {\n    value: teamWithServe\n  } = await scoreSwal.fire({\n    title: \"Initial Serve\",\n    html: __jsx(AddServe, {\n      players: players,\n      teams: teamSelection,\n      score: score,\n      onChange: handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 7\n      }\n    }),\n    showCancelButton: true,\n    confirmButtonText: \"Next &rarr;\",\n    progressSteps: [\"1\", \"2\", \"3\", \"4\"],\n    currentProgressStep: \"2\",\n    preConfirm: () => {\n      if (curServeSelection === \"\") {\n        scoreSwal.showValidationMessage(\"Select who had the initial serve.\");\n        return false;\n      }\n\n      return curServeSelection;\n    }\n  }); // Correct and neccessary syntax??\n\n  return new Promise((resolve, reject) => {\n    if (!teamWithServe) {\n      reject();\n    } else {\n      resolve(teamWithServe === \"blue\" ? ServeTeam.Blue : ServeTeam.Red);\n    }\n  });\n} // Confirm Selection\n\nexport async function confirmSelection(players, teamSelection, score, serve) {\n  const scoreSwal = withReactContent(Swal);\n  const result = await scoreSwal.fire({\n    icon: \"success\",\n    title: \"Confirm Game\",\n    html: __jsx(AddConfirm, {\n      players: players,\n      teams: teamSelection,\n      score: score,\n      serve: serve,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 7\n      }\n    }),\n    showCancelButton: true,\n    confirmButtonText: \"Finish\",\n    progressSteps: [\"1\", \"2\", \"3\", \"4\"],\n    currentProgressStep: \"3\"\n  }); // Correct and neccessary syntax??\n\n  return new Promise((resolve, reject) => {\n    if (!result) {\n      reject();\n    } else {\n      resolve(true);\n    }\n  });\n} // Group's Player Selection\n\nexport async function groupPlayerSelection(groupname) {\n  const players = new Map();\n\n  const handleAdd = input => {\n    players.set(uuidv4(), input);\n  };\n\n  const handleDelete = playerId => {\n    players.delete(playerId);\n  };\n\n  const addGroupPlayersSwal = withReactContent(Swal);\n  const {\n    value: playerMap\n  } = await addGroupPlayersSwal.fire({\n    html: __jsx(AddGroupPlayers, {\n      players: players,\n      onAdd: handleAdd,\n      onDelete: handleDelete,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 7\n      }\n    }),\n    showCancelButton: true,\n    confirmButtonText: \"Next &rarr;\",\n    progressSteps: [\"1\", \"2\", \"3\"],\n    currentProgressStep: \"1\",\n    preConfirm: () => {\n      if (players.size < 4) {\n        addGroupPlayersSwal.showValidationMessage(\"You need at least 4 players.\");\n        return false;\n      }\n\n      return players;\n    }\n  }); // Correct and neccessary syntax??\n\n  return new Promise((resolve, reject) => {\n    if (!playerMap) {\n      reject();\n    } else {\n      resolve(playerMap);\n    }\n  });\n} // Group Confirmation\n\nexport async function groupConfirmation(groupname, players) {\n  const confirmSwal = withReactContent(Swal);\n  const result = await confirmSwal.fire({\n    title: \"Confrim\",\n    icon: \"success\",\n    html: __jsx(GroupConfirm, {\n      groupname: groupname,\n      players: players,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 11\n      }\n    }),\n    showCancelButton: true,\n    confirmButtonText: \"Next &rarr;\",\n    progressSteps: [\"1\", \"2\", \"3\"],\n    currentProgressStep: \"2\"\n  }); // Correct and neccessary syntax??\n\n  return new Promise((resolve, reject) => {\n    if (!result) {\n      reject();\n    } else {\n      resolve(true);\n    }\n  });\n}","map":{"version":3,"sources":["/Users/raphael/programming/web-projects/roundnet-stats/util/swals.tsx"],"names":["React","Swal","withReactContent","v4","uuidv4","AddChips","AddScoreField","AddServe","AddConfirm","AddGroupPlayers","GroupConfirm","ServeTeam","errorToast","mixin","title","icon","toast","position","showConfirmButton","timer","timerProgressBar","teamSelection","players","emptyTeamBlue","emptyTeamRed","selectedTeams","blueTeam","redTeam","handleSelectPlayer","id","isBlue","handleRemovePlayer","AddGameSwal","value","finalSelection","fire","html","showCancelButton","confirmButtonText","progressSteps","currentProgressStep","preConfirm","showValidationMessage","Promise","resolve","reject","scoreSelection","blueScore","redScore","handleChange","score","scoreSwal","finalScore","serveSelection","curServeSelection","newSelection","teamWithServe","Blue","Red","confirmSelection","serve","result","groupPlayerSelection","groupname","Map","handleAdd","input","set","handleDelete","playerId","delete","addGroupPlayersSwal","playerMap","size","groupConfirmation","confirmSwal"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Swal from \"sweetalert2\";\nimport withReactContent from \"sweetalert2-react-content\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { AddChips } from \"../components/addComponents/AddChips\";\nimport { AddScoreField } from \"../components/addComponents/AddScoreField\";\nimport { AddServe } from \"../components/addComponents/AddServe\";\nimport { AddConfirm } from \"../components/addComponents/AddConfirm\";\nimport { AddGroupPlayers } from \"../components/addComponents/AddGroupPlayers\";\nimport { GroupConfirm } from \"../components/addComponents/GroupConfirm\";\nimport { Team, Players, ServeTeam } from \"./types\";\n\n// Template for error messages.\nexport const errorToast = Swal.mixin({\n  title: \"Something went wrong!\",\n  icon: \"error\",\n  toast: true,\n  position: \"center\",\n  showConfirmButton: false,\n  timer: 4000,\n  timerProgressBar: true,\n});\n\ninterface Selection {\n  blueTeam: Team;\n  redTeam: Team;\n}\nexport async function teamSelection(players: Players): Promise<Selection> {\n  const emptyTeamBlue: Team = [\"\", \"\"];\n  const emptyTeamRed: Team = [\"\", \"\"];\n  const selectedTeams = { blueTeam: emptyTeamBlue, redTeam: emptyTeamRed };\n  const handleSelectPlayer = (id: string, isBlue: boolean) => {\n    if (isBlue) {\n      if (selectedTeams.blueTeam[0] === \"\") {\n        selectedTeams.blueTeam[0] = id;\n      } else {\n        selectedTeams.blueTeam[1] = id;\n      }\n    } else {\n      if (selectedTeams.redTeam[0] === \"\") {\n        selectedTeams.redTeam[0] = id;\n      } else {\n        selectedTeams.redTeam[1] = id;\n      }\n    }\n  };\n  const handleRemovePlayer = (id: string, isBlue: boolean) => {\n    if (isBlue) {\n      if (selectedTeams.blueTeam[0] === id) {\n        selectedTeams.blueTeam[0] = \"\";\n      } else {\n        selectedTeams.blueTeam[1] = \"\";\n      }\n    } else {\n      if (selectedTeams.redTeam[0] === id) {\n        selectedTeams.redTeam[0] = \"\";\n      } else {\n        selectedTeams.redTeam[1] = \"\";\n      }\n    }\n  };\n  const AddGameSwal = withReactContent(Swal);\n  const { value: finalSelection } = await AddGameSwal.fire({\n    title: \"Choose Teams\",\n    html: (\n      <AddChips\n        players={players}\n        onSelect={handleSelectPlayer}\n        onDelete={handleRemovePlayer}\n      />\n    ),\n    showCancelButton: true,\n    confirmButtonText: \"Next &rarr;\",\n    progressSteps: [\"1\", \"2\", \"3\", \"4\"],\n    currentProgressStep: \"0\",\n    preConfirm: () => {\n      if (\n        selectedTeams.blueTeam[0] === \"\" ||\n        selectedTeams.blueTeam[1] === \"\" ||\n        selectedTeams.redTeam[0] === \"\" ||\n        selectedTeams.redTeam[1] === \"\"\n      ) {\n        AddGameSwal.showValidationMessage(\"You must select four players.\");\n        return false;\n      }\n      return selectedTeams;\n    },\n  });\n  // Correct and neccessary syntax??\n  return new Promise((resolve, reject) => {\n    if (!finalSelection) {\n      reject();\n    } else {\n      resolve(finalSelection);\n    }\n  });\n}\n\n// Score Selection\nexport async function scoreSelection(\n  players: Players,\n  teamSelection: Selection\n): Promise<[number, number]> {\n  let blueScore: number;\n  let redScore: number;\n  const handleChange = (score: number, isBlue: boolean) => {\n    isBlue ? (blueScore = score) : (redScore = score);\n  };\n  const scoreSwal = withReactContent(Swal);\n  const { value: finalScore } = await scoreSwal.fire({\n    title: \"Enter the Score\",\n    html: (\n      <AddScoreField\n        players={players}\n        teams={teamSelection}\n        blueScore={blueScore}\n        redScore={redScore}\n        onChange={handleChange}\n      />\n    ),\n    showCancelButton: true,\n    confirmButtonText: \"Next &rarr;\",\n    progressSteps: [\"1\", \"2\", \"3\", \"4\"],\n    currentProgressStep: \"1\",\n    preConfirm: () => {\n      if (blueScore >= 0 && redScore >= 0 && blueScore !== redScore) {\n        const score: [number, number] = [blueScore, redScore];\n        return score;\n      }\n      scoreSwal.showValidationMessage(\"The score can't be a tie.\");\n      return false;\n    },\n  });\n  // Correct and neccessary syntax??\n  return new Promise((resolve, reject) => {\n    if (!finalScore) {\n      reject();\n    } else {\n      resolve(finalScore);\n    }\n  });\n}\n\n// Serve Selection\nexport async function serveSelection(\n  players: Players,\n  teamSelection: Selection,\n  score: [number, number]\n): Promise<ServeTeam> {\n  let curServeSelection = \"\";\n  const handleChange = (newSelection: string) => {\n    curServeSelection = newSelection;\n  };\n\n  const scoreSwal = withReactContent(Swal);\n  const { value: teamWithServe } = await scoreSwal.fire({\n    title: \"Initial Serve\",\n    html: (\n      <AddServe\n        players={players}\n        teams={teamSelection}\n        score={score}\n        onChange={handleChange}\n      />\n    ),\n    showCancelButton: true,\n    confirmButtonText: \"Next &rarr;\",\n    progressSteps: [\"1\", \"2\", \"3\", \"4\"],\n    currentProgressStep: \"2\",\n    preConfirm: () => {\n      if (curServeSelection === \"\") {\n        scoreSwal.showValidationMessage(\"Select who had the initial serve.\");\n        return false;\n      }\n      return curServeSelection;\n    },\n  });\n  // Correct and neccessary syntax??\n  return new Promise((resolve, reject) => {\n    if (!teamWithServe) {\n      reject();\n    } else {\n      resolve(teamWithServe === \"blue\" ? ServeTeam.Blue : ServeTeam.Red);\n    }\n  });\n}\n\n// Confirm Selection\nexport async function confirmSelection(\n  players: Players,\n  teamSelection: Selection,\n  score: [number, number],\n  serve: ServeTeam\n): Promise<boolean> {\n  const scoreSwal = withReactContent(Swal);\n  const result = await scoreSwal.fire({\n    icon: \"success\",\n    title: \"Confirm Game\",\n    html: (\n      <AddConfirm\n        players={players}\n        teams={teamSelection}\n        score={score}\n        serve={serve}\n      />\n    ),\n    showCancelButton: true,\n    confirmButtonText: \"Finish\",\n    progressSteps: [\"1\", \"2\", \"3\", \"4\"],\n    currentProgressStep: \"3\",\n  });\n  // Correct and neccessary syntax??\n  return new Promise((resolve, reject) => {\n    if (!result) {\n      reject();\n    } else {\n      resolve(true);\n    }\n  });\n}\n\n// Group's Player Selection\nexport async function groupPlayerSelection(\n  groupname: string\n): Promise<Players> {\n  const players: Players = new Map();\n  const handleAdd = (input: string) => {\n    players.set(uuidv4(), input);\n  };\n  const handleDelete = (playerId: string) => {\n    players.delete(playerId);\n  };\n\n  const addGroupPlayersSwal = withReactContent(Swal);\n  const { value: playerMap } = await addGroupPlayersSwal.fire({\n    html: (\n      <AddGroupPlayers\n        players={players}\n        onAdd={handleAdd}\n        onDelete={handleDelete}\n      />\n    ),\n    showCancelButton: true,\n    confirmButtonText: \"Next &rarr;\",\n    progressSteps: [\"1\", \"2\", \"3\"],\n    currentProgressStep: \"1\",\n    preConfirm: () => {\n      if (players.size < 4) {\n        addGroupPlayersSwal.showValidationMessage(\n          \"You need at least 4 players.\"\n        );\n        return false;\n      }\n      return players;\n    },\n  });\n  // Correct and neccessary syntax??\n  return new Promise((resolve, reject) => {\n    if (!playerMap) {\n      reject();\n    } else {\n      resolve(playerMap);\n    }\n  });\n}\n\n// Group Confirmation\nexport async function groupConfirmation(\n  groupname: string,\n  players: Players\n): Promise<boolean> {\n  const confirmSwal = withReactContent(Swal);\n  const result = await confirmSwal.fire({\n    title: \"Confrim\",\n    icon: \"success\",\n    html: <GroupConfirm groupname={groupname} players={players} />,\n    showCancelButton: true,\n    confirmButtonText: \"Next &rarr;\",\n    progressSteps: [\"1\", \"2\", \"3\"],\n    currentProgressStep: \"2\",\n  });\n  // Correct and neccessary syntax??\n  return new Promise((resolve, reject) => {\n    if (!result) {\n      reject();\n    } else {\n      resolve(true);\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}