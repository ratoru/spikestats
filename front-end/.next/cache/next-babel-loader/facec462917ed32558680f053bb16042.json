{"ast":null,"code":"var _jsxFileName = \"/Users/raphael/programming/web-projects/roundnet-stats/pages/stats/[groupname].tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { MainBar } from \"../../components/MainBar\";\nimport { NavStats } from \"../../components/NavStats\";\nimport { GameTable } from \"../../components/GameTable\";\nimport { ServeTeam } from \"../../util/types\";\nimport { teamSelection, scoreSelection } from \"../../util/swals\";\nimport { AddServe } from \"../../components/AddServe\";\nexport default function Stats() {\n  const router = useRouter();\n  const {\n    groupname\n  } = router.query; // For testing\n\n  const examplePlayers = new Map([[0, \"Raphael\"], [1, \"Alex\"], [2, \"Valentin\"], [3, \"Sonam\"], [4, \"Timon\"]]);\n  const exampleGames = [{\n    id: 0,\n    blueTeam: [4, 3],\n    redTeam: [1, 2],\n    score: [21, 17],\n    serve: ServeTeam.Blue,\n    date: new Date()\n  }, {\n    id: 1,\n    blueTeam: [0, 1],\n    redTeam: [3, 2],\n    score: [10, 21],\n    serve: ServeTeam.Red,\n    date: new Date()\n  }];\n  const {\n    0: games,\n    1: setGames\n  } = useState(exampleGames);\n\n  const handleDelete = id => {\n    console.log(\"Delete this game from the server.\", id);\n    setGames(games.filter(game => game[\"id\"] !== id));\n  };\n\n  const handleAdd = async () => {\n    const addedGame = {\n      id: 100,\n      blueTeam: [-1, -1],\n      redTeam: [-1, -1],\n      score: [-1, -1],\n      serve: ServeTeam.Blue,\n      date: new Date()\n    };\n    teamSelection(examplePlayers).then(curTeamSelection => {\n      addedGame.blueTeam = curTeamSelection.blueTeam;\n      addedGame.redTeam = curTeamSelection.redTeam;\n      console.log(curTeamSelection);\n      return scoreSelection(examplePlayers, curTeamSelection);\n    }).then(curScore => {\n      addedGame.score = curScore;\n      console.log(curScore);\n    }).catch(() => {\n      return;\n    });\n    const dummyGame = {\n      id: 5,\n      blueTeam: [1, 2],\n      redTeam: [3, 0],\n      score: [21, 10],\n      serve: ServeTeam.Blue,\n      date: new Date()\n    };\n    setGames(games => [...games, dummyGame]);\n  };\n\n  const tab1 = __jsx(AddServe, {\n    players: examplePlayers,\n    teams: {\n      blueTeam: [0, 1],\n      redTeam: [3, 2]\n    },\n    score: [21, 18],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  });\n\n  const tab2 = __jsx(GameTable, {\n    onDelete: handleDelete,\n    games: games,\n    players: examplePlayers,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  });\n\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, __jsx(MainBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }), __jsx(NavStats, {\n    tab1Content: tab1,\n    tab2Content: tab2,\n    onAdd: handleAdd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/raphael/programming/web-projects/roundnet-stats/pages/stats/[groupname].tsx"],"names":["React","useState","useRouter","MainBar","NavStats","GameTable","ServeTeam","teamSelection","scoreSelection","AddServe","Stats","router","groupname","query","examplePlayers","Map","exampleGames","id","blueTeam","redTeam","score","serve","Blue","date","Date","Red","games","setGames","handleDelete","console","log","filter","game","handleAdd","addedGame","then","curTeamSelection","curScore","catch","dummyGame","tab1","tab2"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { MainBar } from \"../../components/MainBar\";\nimport { NavStats } from \"../../components/NavStats\";\nimport { GameTable } from \"../../components/GameTable\";\nimport { Game, Players, ServeTeam } from \"../../util/types\";\nimport { teamSelection, scoreSelection } from \"../../util/swals\";\nimport { AddServe } from \"../../components/AddServe\";\n\nexport default function Stats() {\n  const router = useRouter();\n  const { groupname } = router.query;\n\n  // For testing\n  const examplePlayers: Players = new Map([\n    [0, \"Raphael\"],\n    [1, \"Alex\"],\n    [2, \"Valentin\"],\n    [3, \"Sonam\"],\n    [4, \"Timon\"],\n  ]);\n\n  const exampleGames: Game[] = [\n    {\n      id: 0,\n      blueTeam: [4, 3],\n      redTeam: [1, 2],\n      score: [21, 17],\n      serve: ServeTeam.Blue,\n      date: new Date(),\n    },\n    {\n      id: 1,\n      blueTeam: [0, 1],\n      redTeam: [3, 2],\n      score: [10, 21],\n      serve: ServeTeam.Red,\n      date: new Date(),\n    },\n  ];\n  const [games, setGames] = useState(exampleGames);\n  const handleDelete = (id: number) => {\n    console.log(\"Delete this game from the server.\", id);\n    setGames(games.filter((game) => game[\"id\"] !== id));\n  };\n\n  const handleAdd = async () => {\n    const addedGame: Game = {\n      id: 100,\n      blueTeam: [-1, -1],\n      redTeam: [-1, -1],\n      score: [-1, -1],\n      serve: ServeTeam.Blue,\n      date: new Date(),\n    };\n    teamSelection(examplePlayers)\n      .then((curTeamSelection) => {\n        addedGame.blueTeam = curTeamSelection.blueTeam;\n        addedGame.redTeam = curTeamSelection.redTeam;\n        console.log(curTeamSelection);\n        return scoreSelection(examplePlayers, curTeamSelection);\n      })\n      .then((curScore) => {\n        addedGame.score = curScore;\n        console.log(curScore);\n      })\n      .catch(() => {\n        return;\n      });\n\n    const dummyGame: Game = {\n      id: 5,\n      blueTeam: [1, 2],\n      redTeam: [3, 0],\n      score: [21, 10],\n      serve: ServeTeam.Blue,\n      date: new Date(),\n    };\n    setGames((games) => [...games, dummyGame]);\n  };\n\n  const tab1 = (\n    <AddServe\n      players={examplePlayers}\n      teams={{ blueTeam: [0, 1], redTeam: [3, 2] }}\n      score={[21, 18]}\n    />\n  );\n  const tab2 = (\n    <GameTable onDelete={handleDelete} games={games} players={examplePlayers} />\n  );\n\n  return (\n    <React.Fragment>\n      <MainBar />\n      <NavStats tab1Content={tab1} tab2Content={tab2} onAdd={handleAdd} />\n    </React.Fragment>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}