{"ast":null,"code":"var _jsxFileName = \"/Users/raphael/programming/web-projects/roundnet-stats/components/GroupList.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport List from \"@material-ui/core/List\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Fab from \"@material-ui/core/Fab\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport GroupAddRoundedIcon from \"@material-ui/icons/GroupAddRounded\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Swal from \"sweetalert2\";\nimport { GroupListItem } from \"./common/GroupListItem\";\n\nconst handleRenameGroup = groupname => {\n  console.log(\"Rename this group\", groupname);\n};\n\nconst handleRenamePlayer = (groupname, player) => {\n  console.log(\"Rename this player\", groupname, player);\n};\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: \"100vw\",\n    // maxWidth: 360,\n    backgroundColor: theme.palette.background.paper\n  },\n  fab: {\n    position: \"fixed\",\n    bottom: theme.spacing(4),\n    backgroundColor: theme.palette.success.main\n  }\n}));\nexport const GroupList = () => {\n  // Use style\n  const classes = useStyles(); // For testing porpuses.\n\n  const group1 = {\n    groupname: \"Group1\",\n    players: [\"Player 1.1\", \"Player 1.2\", \"Player 1.3\", \"Player 1.4\"]\n  };\n  const group2 = {\n    groupname: \"Group2\",\n    players: [\"Player 2.1\", \"Player 2.2\", \"Player 2.3\", \"Player 2.4\"]\n  }; // Use state hook\n\n  const initialGroups = [group1, group2];\n  const {\n    0: groups,\n    1: setGroups\n  } = useState(initialGroups); // Add a group\n\n  const handleAdd = async () => {\n    let newGroup = {\n      groupname: \"\",\n      players: []\n    };\n    const PlayerSwal = Swal.mixin({\n      title: \"New Player\",\n      text: \"Names must be unique within groups.\",\n      icon: \"question\",\n      showCancelButton: true,\n      confirmButtonText: \"Next &rarr;\",\n      footer: \"Leave box empty to stop adding players.\",\n      input: \"text\",\n      inputPlaceholder: \"New Name\",\n      inputValidator: value => {\n        for (let player of newGroup.players) {\n          if (player === value) {\n            return \"Name is not unique!\";\n          }\n        }\n      },\n      progressSteps: [\"1\", \"2\", \"3\"],\n      currentProgressStep: \"1\"\n    });\n    const {\n      value: newGroupname\n    } = await Swal.fire({\n      title: \"New Group Name\",\n      text: \"Must be a unique groupname.\",\n      icon: \"question\",\n      showCancelButton: true,\n      confirmButtonText: \"Next &rarr;\",\n      input: \"text\",\n      inputPlaceholder: \"New group name\",\n      inputValidator: value => {\n        if (!value) {\n          return \"Enter a name.\";\n        }\n\n        for (let group of groups) {\n          if (group.groupname === value) {\n            return \"Name is not unique!\";\n          }\n        }\n      },\n      progressSteps: [\"1\", \"2\", \"3\"],\n      currentProgressStep: \"0\"\n    });\n\n    if (!newGroupname) {\n      return;\n    }\n\n    newGroup.groupname = `${newGroupname}`;\n    let {\n      value: newPlayer\n    } = await PlayerSwal.fire();\n\n    while (newPlayer) {\n      newGroup.players.push(`${newPlayer}`);\n      const {\n        value: temp\n      } = await PlayerSwal.fire();\n      newPlayer = temp;\n    }\n\n    Swal.fire({\n      title: `Group: ${newGroup.groupname}`,\n      text: `Players: ${newGroup.players}`,\n      icon: \"success\",\n      confirmButtonText: \"Create group\",\n      showCancelButton: true,\n      progressSteps: [\"1\", \"2\", \"3\"],\n      currentProgressStep: \"2\",\n      preConfirm: () => {\n        // If everything went well.\n        if (newGroup.groupname !== \"\" && newGroup.players.length >= 4) {\n          setGroups(groups => [...groups, newGroup]); // Call server here.\n        } else {\n          Swal.fire({\n            title: \"Something went wrong.\",\n            icon: \"error\"\n          });\n        }\n      }\n    });\n  }; // Delete a group\n\n\n  const handleDelete = groupname => {\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: `You won't be able to revert deleting ${groupname}!`,\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: \"Yes, delete it!\",\n      focusConfirm: false,\n      focusCancel: true,\n      cancelButtonText: \"No, cancel!\"\n    }).then(result => {\n      if (result.value) {\n        // Save old state\n        const prevGroups = [...groups]; // Update UI.\n\n        setGroups(groups.filter(curGroup => curGroup.groupname !== groupname));\n        console.log(\"Handle delete.\", groupname, groups); // Call backend and revert if error.\n\n        if (true) {\n          Swal.fire({\n            title: \"Something went wrong!\",\n            text: \"The group was already deleted.\",\n            icon: \"error\",\n            toast: true,\n            position: \"center\",\n            showConfirmButton: false,\n            timer: 4000,\n            timerProgressBar: true\n          });\n          setGroups(prevGroups);\n        }\n      }\n    });\n  };\n\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 5\n    }\n  }, __jsx(List, {\n    component: \"nav\",\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }\n  }, groups.map(group => {\n    return __jsx(GroupListItem, {\n      key: group.groupname,\n      group: group,\n      onDelete: handleDelete,\n      onRenameGroup: handleRenameGroup,\n      onRenamePlayer: handleRenamePlayer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 13\n      }\n    });\n  })), __jsx(Grid, {\n    container: true,\n    spacing: 0,\n    justify: \"center\",\n    style: {\n      minWidth: \"100vw\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }\n  }, __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }\n  }, __jsx(Tooltip, {\n    title: \"New Group\",\n    arrow: true,\n    placement: \"top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 11\n    }\n  }, __jsx(Fab, {\n    size: \"large\",\n    className: classes.fab,\n    \"aria-label\": \"add\",\n    onClick: handleAdd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }\n  }, __jsx(GroupAddRoundedIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 15\n    }\n  }))))));\n};","map":{"version":3,"sources":["/Users/raphael/programming/web-projects/roundnet-stats/components/GroupList.tsx"],"names":["React","useState","List","Grid","Fab","Tooltip","GroupAddRoundedIcon","makeStyles","Swal","GroupListItem","handleRenameGroup","groupname","console","log","handleRenamePlayer","player","useStyles","theme","root","width","backgroundColor","palette","background","paper","fab","position","bottom","spacing","success","main","GroupList","classes","group1","players","group2","initialGroups","groups","setGroups","handleAdd","newGroup","PlayerSwal","mixin","title","text","icon","showCancelButton","confirmButtonText","footer","input","inputPlaceholder","inputValidator","value","progressSteps","currentProgressStep","newGroupname","fire","group","newPlayer","push","temp","preConfirm","length","handleDelete","focusConfirm","focusCancel","cancelButtonText","then","result","prevGroups","filter","curGroup","toast","showConfirmButton","timer","timerProgressBar","map","minWidth"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,mBAAP,MAAgC,oCAAhC;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,SAASC,aAAT,QAA8B,wBAA9B;;AAEA,MAAMC,iBAAiB,GAAIC,SAAD,IAAuB;AAC/CC,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCF,SAAjC;AACD,CAFD;;AAIA,MAAMG,kBAAkB,GAAG,CAACH,SAAD,EAAoBI,MAApB,KAAuC;AAChEH,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCF,SAAlC,EAA6CI,MAA7C;AACD,CAFD;;AASA,MAAMC,SAAS,GAAGT,UAAU,CAAEU,KAAD,KAAY;AACvCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE,OADH;AAEJ;AACAC,IAAAA,eAAe,EAAEH,KAAK,CAACI,OAAN,CAAcC,UAAd,CAAyBC;AAHtC,GADiC;AAMvCC,EAAAA,GAAG,EAAE;AACHC,IAAAA,QAAQ,EAAE,OADP;AAEHC,IAAAA,MAAM,EAAET,KAAK,CAACU,OAAN,CAAc,CAAd,CAFL;AAGHP,IAAAA,eAAe,EAAEH,KAAK,CAACI,OAAN,CAAcO,OAAd,CAAsBC;AAHpC;AANkC,CAAZ,CAAD,CAA5B;AAaA,OAAO,MAAMC,SAAmB,GAAG,MAAM;AACvC;AACA,QAAMC,OAAO,GAAGf,SAAS,EAAzB,CAFuC,CAIvC;;AACA,QAAMgB,MAAa,GAAG;AACpBrB,IAAAA,SAAS,EAAE,QADS;AAEpBsB,IAAAA,OAAO,EAAE,CAAC,YAAD,EAAe,YAAf,EAA6B,YAA7B,EAA2C,YAA3C;AAFW,GAAtB;AAIA,QAAMC,MAAa,GAAG;AACpBvB,IAAAA,SAAS,EAAE,QADS;AAEpBsB,IAAAA,OAAO,EAAE,CAAC,YAAD,EAAe,YAAf,EAA6B,YAA7B,EAA2C,YAA3C;AAFW,GAAtB,CATuC,CAavC;;AACA,QAAME,aAAsB,GAAG,CAACH,MAAD,EAASE,MAAT,CAA/B;AACA,QAAM;AAAA,OAACE,MAAD;AAAA,OAASC;AAAT,MAAsBpC,QAAQ,CAACkC,aAAD,CAApC,CAfuC,CAiBvC;;AACA,QAAMG,SAAS,GAAG,YAAY;AAC5B,QAAIC,QAAe,GAAG;AACpB5B,MAAAA,SAAS,EAAE,EADS;AAEpBsB,MAAAA,OAAO,EAAE;AAFW,KAAtB;AAKA,UAAMO,UAAU,GAAGhC,IAAI,CAACiC,KAAL,CAAW;AAC5BC,MAAAA,KAAK,EAAE,YADqB;AAE5BC,MAAAA,IAAI,EAAE,qCAFsB;AAG5BC,MAAAA,IAAI,EAAE,UAHsB;AAI5BC,MAAAA,gBAAgB,EAAE,IAJU;AAK5BC,MAAAA,iBAAiB,EAAE,aALS;AAM5BC,MAAAA,MAAM,EAAE,yCANoB;AAO5BC,MAAAA,KAAK,EAAE,MAPqB;AAQ5BC,MAAAA,gBAAgB,EAAE,UARU;AAS5BC,MAAAA,cAAc,EAAGC,KAAD,IAAW;AACzB,aAAK,IAAIpC,MAAT,IAAmBwB,QAAQ,CAACN,OAA5B,EAAqC;AACnC,cAAIlB,MAAM,KAAKoC,KAAf,EAAsB;AACpB,mBAAO,qBAAP;AACD;AACF;AACF,OAf2B;AAgB5BC,MAAAA,aAAa,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAhBa;AAiB5BC,MAAAA,mBAAmB,EAAE;AAjBO,KAAX,CAAnB;AAoBA,UAAM;AAAEF,MAAAA,KAAK,EAAEG;AAAT,QAA0B,MAAM9C,IAAI,CAAC+C,IAAL,CAAU;AAC9Cb,MAAAA,KAAK,EAAE,gBADuC;AAE9CC,MAAAA,IAAI,EAAE,6BAFwC;AAG9CC,MAAAA,IAAI,EAAE,UAHwC;AAI9CC,MAAAA,gBAAgB,EAAE,IAJ4B;AAK9CC,MAAAA,iBAAiB,EAAE,aAL2B;AAM9CE,MAAAA,KAAK,EAAE,MANuC;AAO9CC,MAAAA,gBAAgB,EAAE,gBAP4B;AAQ9CC,MAAAA,cAAc,EAAGC,KAAD,IAAW;AACzB,YAAI,CAACA,KAAL,EAAY;AACV,iBAAO,eAAP;AACD;;AACD,aAAK,IAAIK,KAAT,IAAkBpB,MAAlB,EAA0B;AACxB,cAAIoB,KAAK,CAAC7C,SAAN,KAAoBwC,KAAxB,EAA+B;AAC7B,mBAAO,qBAAP;AACD;AACF;AACF,OAjB6C;AAkB9CC,MAAAA,aAAa,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAlB+B;AAmB9CC,MAAAA,mBAAmB,EAAE;AAnByB,KAAV,CAAtC;;AAqBA,QAAI,CAACC,YAAL,EAAmB;AACjB;AACD;;AACDf,IAAAA,QAAQ,CAAC5B,SAAT,GAAsB,GAAE2C,YAAa,EAArC;AAEA,QAAI;AAAEH,MAAAA,KAAK,EAAEM;AAAT,QAAuB,MAAMjB,UAAU,CAACe,IAAX,EAAjC;;AACA,WAAOE,SAAP,EAAkB;AAChBlB,MAAAA,QAAQ,CAACN,OAAT,CAAiByB,IAAjB,CAAuB,GAAED,SAAU,EAAnC;AACA,YAAM;AAAEN,QAAAA,KAAK,EAAEQ;AAAT,UAAkB,MAAMnB,UAAU,CAACe,IAAX,EAA9B;AACAE,MAAAA,SAAS,GAAGE,IAAZ;AACD;;AAEDnD,IAAAA,IAAI,CAAC+C,IAAL,CAAU;AACRb,MAAAA,KAAK,EAAG,UAASH,QAAQ,CAAC5B,SAAU,EAD5B;AAERgC,MAAAA,IAAI,EAAG,YAAWJ,QAAQ,CAACN,OAAQ,EAF3B;AAGRW,MAAAA,IAAI,EAAE,SAHE;AAIRE,MAAAA,iBAAiB,EAAE,cAJX;AAKRD,MAAAA,gBAAgB,EAAE,IALV;AAMRO,MAAAA,aAAa,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CANP;AAORC,MAAAA,mBAAmB,EAAE,GAPb;AAQRO,MAAAA,UAAU,EAAE,MAAM;AAChB;AACA,YAAIrB,QAAQ,CAAC5B,SAAT,KAAuB,EAAvB,IAA6B4B,QAAQ,CAACN,OAAT,CAAiB4B,MAAjB,IAA2B,CAA5D,EAA+D;AAC7DxB,UAAAA,SAAS,CAAED,MAAD,IAAY,CAAC,GAAGA,MAAJ,EAAYG,QAAZ,CAAb,CAAT,CAD6D,CAE7D;AACD,SAHD,MAGO;AACL/B,UAAAA,IAAI,CAAC+C,IAAL,CAAU;AACRb,YAAAA,KAAK,EAAE,uBADC;AAERE,YAAAA,IAAI,EAAE;AAFE,WAAV;AAID;AACF;AAnBO,KAAV;AAqBD,GAhFD,CAlBuC,CAoGvC;;;AACA,QAAMkB,YAAY,GAAInD,SAAD,IAAuB;AAC1CH,IAAAA,IAAI,CAAC+C,IAAL,CAAU;AACRb,MAAAA,KAAK,EAAE,eADC;AAERC,MAAAA,IAAI,EAAG,wCAAuChC,SAAU,GAFhD;AAGRiC,MAAAA,IAAI,EAAE,SAHE;AAIRC,MAAAA,gBAAgB,EAAE,IAJV;AAKRC,MAAAA,iBAAiB,EAAE,iBALX;AAMRiB,MAAAA,YAAY,EAAE,KANN;AAORC,MAAAA,WAAW,EAAE,IAPL;AAQRC,MAAAA,gBAAgB,EAAE;AARV,KAAV,EASGC,IATH,CASSC,MAAD,IAAY;AAClB,UAAIA,MAAM,CAAChB,KAAX,EAAkB;AAChB;AACA,cAAMiB,UAAU,GAAG,CAAC,GAAGhC,MAAJ,CAAnB,CAFgB,CAGhB;;AACAC,QAAAA,SAAS,CACPD,MAAM,CAACiC,MAAP,CAAeC,QAAD,IAAcA,QAAQ,CAAC3D,SAAT,KAAuBA,SAAnD,CADO,CAAT;AAGAC,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BF,SAA9B,EAAyCyB,MAAzC,EAPgB,CAQhB;;AACA,YAAI,IAAJ,EAAU;AACR5B,UAAAA,IAAI,CAAC+C,IAAL,CAAU;AACRb,YAAAA,KAAK,EAAE,uBADC;AAERC,YAAAA,IAAI,EAAE,gCAFE;AAGRC,YAAAA,IAAI,EAAE,OAHE;AAIR2B,YAAAA,KAAK,EAAE,IAJC;AAKR9C,YAAAA,QAAQ,EAAE,QALF;AAMR+C,YAAAA,iBAAiB,EAAE,KANX;AAORC,YAAAA,KAAK,EAAE,IAPC;AAQRC,YAAAA,gBAAgB,EAAE;AARV,WAAV;AAUArC,UAAAA,SAAS,CAAC+B,UAAD,CAAT;AACD;AACF;AACF,KAjCD;AAkCD,GAnCD;;AAqCA,SACE,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,SAAS,EAAC,KAAhB;AAAsB,IAAA,SAAS,EAAErC,OAAO,CAACb,IAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGkB,MAAM,CAACuC,GAAP,CAAYnB,KAAD,IAAW;AACrB,WACE,MAAC,aAAD;AACE,MAAA,GAAG,EAAEA,KAAK,CAAC7C,SADb;AAEE,MAAA,KAAK,EAAE6C,KAFT;AAGE,MAAA,QAAQ,EAAEM,YAHZ;AAIE,MAAA,aAAa,EAAEpD,iBAJjB;AAKE,MAAA,cAAc,EAAEI,kBALlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AASD,GAVA,CADH,CADF,EAcE,MAAC,IAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,OAAO,EAAE,CAFX;AAGE,IAAA,OAAO,EAAC,QAHV;AAIE,IAAA,KAAK,EAAE;AAAE8D,MAAAA,QAAQ,EAAE;AAAZ,KAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AAAS,IAAA,KAAK,EAAC,WAAf;AAA2B,IAAA,KAAK,MAAhC;AAAiC,IAAA,SAAS,EAAC,KAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,SAAS,EAAE7C,OAAO,CAACP,GAFrB;AAGE,kBAAW,KAHb;AAIE,IAAA,OAAO,EAAEc,SAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME,MAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF,CADF,CANF,CAdF,CADF;AAoCD,CA9KM","sourcesContent":["import React, { useState } from \"react\";\nimport List from \"@material-ui/core/List\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Fab from \"@material-ui/core/Fab\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport GroupAddRoundedIcon from \"@material-ui/icons/GroupAddRounded\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Swal from \"sweetalert2\";\nimport { GroupListItem } from \"./common/GroupListItem\";\n\nconst handleRenameGroup = (groupname: string) => {\n  console.log(\"Rename this group\", groupname);\n};\n\nconst handleRenamePlayer = (groupname: string, player: string) => {\n  console.log(\"Rename this player\", groupname, player);\n};\n\nexport interface Group {\n  groupname: string;\n  players: string[];\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100vw\",\n    // maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n  },\n  fab: {\n    position: \"fixed\",\n    bottom: theme.spacing(4),\n    backgroundColor: theme.palette.success.main,\n  },\n}));\n\nexport const GroupList: React.FC = () => {\n  // Use style\n  const classes = useStyles();\n\n  // For testing porpuses.\n  const group1: Group = {\n    groupname: \"Group1\",\n    players: [\"Player 1.1\", \"Player 1.2\", \"Player 1.3\", \"Player 1.4\"],\n  };\n  const group2: Group = {\n    groupname: \"Group2\",\n    players: [\"Player 2.1\", \"Player 2.2\", \"Player 2.3\", \"Player 2.4\"],\n  };\n  // Use state hook\n  const initialGroups: Group[] = [group1, group2];\n  const [groups, setGroups] = useState(initialGroups);\n\n  // Add a group\n  const handleAdd = async () => {\n    let newGroup: Group = {\n      groupname: \"\",\n      players: [],\n    };\n\n    const PlayerSwal = Swal.mixin({\n      title: \"New Player\",\n      text: \"Names must be unique within groups.\",\n      icon: \"question\",\n      showCancelButton: true,\n      confirmButtonText: \"Next &rarr;\",\n      footer: \"Leave box empty to stop adding players.\",\n      input: \"text\",\n      inputPlaceholder: \"New Name\",\n      inputValidator: (value) => {\n        for (let player of newGroup.players) {\n          if (player === value) {\n            return \"Name is not unique!\";\n          }\n        }\n      },\n      progressSteps: [\"1\", \"2\", \"3\"],\n      currentProgressStep: \"1\",\n    });\n\n    const { value: newGroupname } = await Swal.fire({\n      title: \"New Group Name\",\n      text: \"Must be a unique groupname.\",\n      icon: \"question\",\n      showCancelButton: true,\n      confirmButtonText: \"Next &rarr;\",\n      input: \"text\",\n      inputPlaceholder: \"New group name\",\n      inputValidator: (value) => {\n        if (!value) {\n          return \"Enter a name.\";\n        }\n        for (let group of groups) {\n          if (group.groupname === value) {\n            return \"Name is not unique!\";\n          }\n        }\n      },\n      progressSteps: [\"1\", \"2\", \"3\"],\n      currentProgressStep: \"0\",\n    });\n    if (!newGroupname) {\n      return;\n    }\n    newGroup.groupname = `${newGroupname}`;\n\n    let { value: newPlayer } = await PlayerSwal.fire();\n    while (newPlayer) {\n      newGroup.players.push(`${newPlayer}`);\n      const { value: temp } = await PlayerSwal.fire();\n      newPlayer = temp;\n    }\n\n    Swal.fire({\n      title: `Group: ${newGroup.groupname}`,\n      text: `Players: ${newGroup.players}`,\n      icon: \"success\",\n      confirmButtonText: \"Create group\",\n      showCancelButton: true,\n      progressSteps: [\"1\", \"2\", \"3\"],\n      currentProgressStep: \"2\",\n      preConfirm: () => {\n        // If everything went well.\n        if (newGroup.groupname !== \"\" && newGroup.players.length >= 4) {\n          setGroups((groups) => [...groups, newGroup]);\n          // Call server here.\n        } else {\n          Swal.fire({\n            title: \"Something went wrong.\",\n            icon: \"error\",\n          });\n        }\n      },\n    });\n  };\n\n  // Delete a group\n  const handleDelete = (groupname: string) => {\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: `You won't be able to revert deleting ${groupname}!`,\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: \"Yes, delete it!\",\n      focusConfirm: false,\n      focusCancel: true,\n      cancelButtonText: \"No, cancel!\",\n    }).then((result) => {\n      if (result.value) {\n        // Save old state\n        const prevGroups = [...groups];\n        // Update UI.\n        setGroups(\n          groups.filter((curGroup) => curGroup.groupname !== groupname)\n        );\n        console.log(\"Handle delete.\", groupname, groups);\n        // Call backend and revert if error.\n        if (true) {\n          Swal.fire({\n            title: \"Something went wrong!\",\n            text: \"The group was already deleted.\",\n            icon: \"error\",\n            toast: true,\n            position: \"center\",\n            showConfirmButton: false,\n            timer: 4000,\n            timerProgressBar: true,\n          });\n          setGroups(prevGroups);\n        }\n      }\n    });\n  };\n\n  return (\n    <React.Fragment>\n      <List component=\"nav\" className={classes.root}>\n        {groups.map((group) => {\n          return (\n            <GroupListItem\n              key={group.groupname}\n              group={group}\n              onDelete={handleDelete}\n              onRenameGroup={handleRenameGroup}\n              onRenamePlayer={handleRenamePlayer}\n            />\n          );\n        })}\n      </List>\n      <Grid\n        container\n        spacing={0}\n        justify=\"center\"\n        style={{ minWidth: \"100vw\" }}\n      >\n        <Grid item>\n          <Tooltip title=\"New Group\" arrow placement=\"top\">\n            <Fab\n              size=\"large\"\n              className={classes.fab}\n              aria-label=\"add\"\n              onClick={handleAdd}\n            >\n              <GroupAddRoundedIcon />\n            </Fab>\n          </Tooltip>\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}