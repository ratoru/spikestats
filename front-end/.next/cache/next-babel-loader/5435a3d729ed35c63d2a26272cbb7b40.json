{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/raphael/programming/web-projects/roundnet-stats/components/AddChips.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React, { useState } from \"react\";\nimport Chip from \"@material-ui/core/Chip\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FaceRoundedIcon from \"@material-ui/icons/FaceRounded\";\nimport SentimentVerySatisfiedRoundedIcon from \"@material-ui/icons/SentimentVerySatisfiedRounded\";\nimport EmojiPeopleRoundedIcon from \"@material-ui/icons/EmojiPeopleRounded\";\n\nfunction selectChip(oldChip, allChips) {\n  var numBlue = 0;\n  var numRed = 0;\n\n  var _iterator = _createForOfIteratorHelper(allChips),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var chip = _step.value;\n\n      if (chip.isBlue) {\n        numBlue++;\n      } else if (chip.isRed) {\n        numRed++;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var isBlue = numBlue < 2;\n  var isRed = !isBlue && numRed < 2;\n  return _objectSpread(_objectSpread({}, oldChip), {}, {\n    isBlue: isBlue,\n    isRed: isRed\n  });\n}\n\nfunction needToDisable(allChips) {\n  return allChips.filter(function (chip) {\n    return chip.isBlue || chip.isRed;\n  }).length >= 4;\n}\n\nexport var AddChips = function AddChips(_ref) {\n  _s();\n\n  var players = _ref.players;\n  var initialChips = [];\n  players.forEach(function (name, id) {\n    initialChips.push({\n      label: name,\n      isBlue: false,\n      isRed: false,\n      disabled: false,\n      id: id\n    });\n  });\n\n  var _useState = useState(initialChips),\n      chips = _useState[0],\n      setChips = _useState[1];\n\n  var handleClick = function handleClick(index) {\n    var newChips = _toConsumableArray(chips);\n\n    newChips[index] = selectChip(newChips[index], newChips);\n\n    if (needToDisable(newChips)) {\n      newChips = newChips.map(function (chip) {\n        return _objectSpread(_objectSpread({}, chip), {}, {\n          disabled: !(chip.isBlue || chip.isRed)\n        });\n      });\n    }\n\n    setChips(newChips);\n  };\n\n  var handleDelete = function handleDelete(index) {\n    var newChips = _toConsumableArray(chips);\n\n    newChips[index] = _objectSpread(_objectSpread({}, newChips[index]), {}, {\n      isBlue: false,\n      isRed: false\n    });\n\n    if (!needToDisable(newChips)) {\n      newChips = newChips.map(function (chip) {\n        return _objectSpread(_objectSpread({}, chip), {}, {\n          disabled: false\n        });\n      });\n    }\n\n    setChips(newChips);\n  };\n\n  return __jsx(Grid, {\n    container: true,\n    direction: \"row\",\n    spacing: 2,\n    justify: \"center\",\n    alignItems: \"baseline\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 5,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, __jsx(Typography, {\n    variant: \"h5\",\n    style: {\n      textAlign: \"center\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, \"Blue Team\")), __jsx(Grid, {\n    item: true,\n    xs: 2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, __jsx(Typography, {\n    variant: \"h5\",\n    style: {\n      textAlign: \"center\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, \":\")), __jsx(Grid, {\n    item: true,\n    xs: 5,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, __jsx(Typography, {\n    variant: \"h5\",\n    style: {\n      textAlign: \"center\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, \"Red Team\")), __jsx(Grid, {\n    item: true,\n    xs: 5,\n    container: true,\n    justify: \"space-around\",\n    alignItems: \"center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, chips.map(function (chip, index) {\n    if (chip.isBlue) {\n      return __jsx(Grid, {\n        item: true,\n        key: chip.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 15\n        }\n      }, __jsx(Chip, {\n        key: chip.id,\n        color: \"primary\",\n        label: chip.label,\n        icon: __jsx(SentimentVerySatisfiedRoundedIcon, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 25\n          }\n        }),\n        onDelete: function onDelete() {\n          return handleDelete(index);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 17\n        }\n      }));\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }), __jsx(Grid, {\n    item: true,\n    xs: 5,\n    container: true,\n    justify: \"space-around\",\n    alignItems: \"center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, chips.map(function (chip, index) {\n    if (chip.isRed) {\n      return __jsx(Grid, {\n        item: true,\n        key: chip.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 15\n        }\n      }, __jsx(Chip, {\n        key: chip.id,\n        color: \"secondary\",\n        label: chip.label,\n        icon: __jsx(EmojiPeopleRoundedIcon, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 25\n          }\n        }),\n        onDelete: function onDelete() {\n          return handleDelete(index);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 17\n        }\n      }));\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    container: true,\n    justify: \"space-around\",\n    alignItems: \"center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }, chips.map(function (chip, index) {\n    if (!(chip.isBlue || chip.isRed)) {\n      return __jsx(Grid, {\n        item: true,\n        key: chip.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 15\n        }\n      }, __jsx(Chip, {\n        key: chip.id,\n        label: chip.label,\n        icon: __jsx(FaceRoundedIcon, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 25\n          }\n        }),\n        clickable: true,\n        disabled: chip.disabled,\n        onClick: function onClick() {\n          return handleClick(index);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 17\n        }\n      }));\n    }\n  })));\n};\n\n_s(AddChips, \"J79dli3DCdckx66vzXn9ZiDaNk4=\");\n\n_c = AddChips;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddChips\");","map":{"version":3,"sources":["/Users/raphael/programming/web-projects/roundnet-stats/components/AddChips.tsx"],"names":["React","useState","Chip","Grid","Typography","FaceRoundedIcon","SentimentVerySatisfiedRoundedIcon","EmojiPeopleRoundedIcon","selectChip","oldChip","allChips","numBlue","numRed","chip","isBlue","isRed","needToDisable","filter","length","AddChips","players","initialChips","forEach","name","id","push","label","disabled","chips","setChips","handleClick","index","newChips","map","handleDelete","textAlign"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Chip from \"@material-ui/core/Chip\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FaceRoundedIcon from \"@material-ui/icons/FaceRounded\";\nimport SentimentVerySatisfiedRoundedIcon from \"@material-ui/icons/SentimentVerySatisfiedRounded\";\nimport EmojiPeopleRoundedIcon from \"@material-ui/icons/EmojiPeopleRounded\";\nimport { Players } from \"../util/types\";\n\ninterface PlayerChip {\n  label: string;\n  isBlue: boolean;\n  isRed: boolean;\n  disabled: boolean;\n  id: number;\n}\n\ninterface AddChipsProps {\n  players: Players;\n}\n\nfunction selectChip(oldChip: PlayerChip, allChips: PlayerChip[]): PlayerChip {\n  let numBlue = 0;\n  let numRed = 0;\n  for (let chip of allChips) {\n    if (chip.isBlue) {\n      numBlue++;\n    } else if (chip.isRed) {\n      numRed++;\n    }\n  }\n  const isBlue = numBlue < 2;\n  const isRed = !isBlue && numRed < 2;\n  return { ...oldChip, isBlue: isBlue, isRed: isRed };\n}\n\nfunction needToDisable(allChips: PlayerChip[]): boolean {\n  return allChips.filter((chip) => chip.isBlue || chip.isRed).length >= 4;\n}\n\nexport const AddChips: React.FC<AddChipsProps> = ({ players }) => {\n  const initialChips: PlayerChip[] = [];\n  players.forEach((name, id) => {\n    initialChips.push({\n      label: name,\n      isBlue: false,\n      isRed: false,\n      disabled: false,\n      id: id,\n    });\n  });\n  const [chips, setChips] = useState<PlayerChip[]>(initialChips);\n\n  const handleClick = (index: number) => {\n    let newChips = [...chips];\n    newChips[index] = selectChip(newChips[index], newChips);\n    if (needToDisable(newChips)) {\n      newChips = newChips.map((chip) => {\n        return { ...chip, disabled: !(chip.isBlue || chip.isRed) };\n      });\n    }\n    setChips(newChips);\n  };\n\n  const handleDelete = (index: number) => {\n    let newChips = [...chips];\n    newChips[index] = { ...newChips[index], isBlue: false, isRed: false };\n    if (!needToDisable(newChips)) {\n      newChips = newChips.map((chip) => {\n        return { ...chip, disabled: false };\n      });\n    }\n    setChips(newChips);\n  };\n\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      spacing={2}\n      justify=\"center\"\n      alignItems=\"baseline\"\n    >\n      <Grid item xs={5}>\n        <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\n          Blue Team\n        </Typography>\n      </Grid>\n      <Grid item xs={2}>\n        <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\n          :\n        </Typography>\n      </Grid>\n      <Grid item xs={5}>\n        <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\n          Red Team\n        </Typography>\n      </Grid>\n      <Grid item xs={5} container justify=\"space-around\" alignItems=\"center\">\n        {chips.map((chip, index) => {\n          if (chip.isBlue) {\n            return (\n              <Grid item key={chip.id}>\n                <Chip\n                  key={chip.id}\n                  color=\"primary\"\n                  label={chip.label}\n                  icon={<SentimentVerySatisfiedRoundedIcon />}\n                  onDelete={() => handleDelete(index)}\n                />\n              </Grid>\n            );\n          }\n        })}\n      </Grid>\n      <Grid item xs={2} />\n      <Grid item xs={5} container justify=\"space-around\" alignItems=\"center\">\n        {chips.map((chip, index) => {\n          if (chip.isRed) {\n            return (\n              <Grid item key={chip.id}>\n                <Chip\n                  key={chip.id}\n                  color=\"secondary\"\n                  label={chip.label}\n                  icon={<EmojiPeopleRoundedIcon />}\n                  onDelete={() => handleDelete(index)}\n                />\n              </Grid>\n            );\n          }\n        })}\n      </Grid>\n      <Grid item xs={12} container justify=\"space-around\" alignItems=\"center\">\n        {chips.map((chip, index) => {\n          if (!(chip.isBlue || chip.isRed)) {\n            return (\n              <Grid item key={chip.id}>\n                <Chip\n                  key={chip.id}\n                  label={chip.label}\n                  icon={<FaceRoundedIcon />}\n                  clickable\n                  disabled={chip.disabled}\n                  onClick={() => handleClick(index)}\n                />\n              </Grid>\n            );\n          }\n        })}\n      </Grid>\n    </Grid>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}