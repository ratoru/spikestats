{"ast":null,"code":"// This file provides helper functions to tranform the data from the server\n// into data the react components can use.\n// Takes in a Game and converts it to the format used in the GameTable.\nexport function gameToRow(game, players) {\n  return {\n    id: game[\"id\"],\n    blueTeam: teamToString(game[\"blueTeam\"], players),\n    redTeam: teamToString(game[\"redTeam\"], players),\n    score: game[\"score\"].join(\":\"),\n    serve: game[\"serve\"],\n    date: game[\"date\"]\n  };\n}\n\nfunction teamToString(team, players) {\n  return team.map(playerId => players.get(playerId)).join(\", \");\n} // Takes in a list of Games and returns serveData.\n\n\nexport function getServeData(games) {\n  const winPercentage = getServeWinPercentage(games);\n  return [{\n    name: \"No Serve\",\n    value: 100 - winPercentage,\n    disabled: true\n  }, {\n    name: \"Serve\",\n    value: winPercentage\n  }];\n} // Takes in a list of Games and returns the win percentage of the team\n// with the inital serve.\n\nfunction getServeWinPercentage(games) {\n  const wins = games.filter(game => {\n    return game.score[game.serve] > game.score[game.serve ? 0 : 1];\n  }).length;\n  const total = games.length;\n  return wins / total * 100;\n} // Takes in a list of games and all players, and returns how many points\n// each player scored.\n\n\nexport function getPlayerPointsData(games, players) {\n  const data = []; // Should be of key: id, value: points.\n\n  const points = new Map(Array.from(players.keys()).map(key => [key, 0]));\n\n  for (let game of games) {\n    const scoreBlue = game.score[0];\n    const scoreRed = game.score[1];\n    points.set(game.blueTeam[0], points.get(game.blueTeam[0]) + scoreBlue);\n    points.set(game.blueTeam[1], points.get(game.blueTeam[1]) + scoreBlue);\n    points.set(game.redTeam[0], points.get(game.redTeam[0]) + scoreRed);\n    points.set(game.redTeam[1], points.get(game.redTeam[1]) + scoreRed);\n  }\n\n  points.forEach((value, key) => {\n    data.push({\n      name: players.get(key),\n      points: value\n    });\n  });\n  return data;\n}","map":{"version":3,"sources":["/Users/raphael/programming/web-projects/roundnet-stats/util/utils.tsx"],"names":["gameToRow","game","players","id","blueTeam","teamToString","redTeam","score","join","serve","date","team","map","playerId","get","getServeData","games","winPercentage","getServeWinPercentage","name","value","disabled","wins","filter","length","total","getPlayerPointsData","data","points","Map","Array","from","keys","key","scoreBlue","scoreRed","set","forEach","push"],"mappings":"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","sourcesContent":["// This file provides helper functions to tranform the data from the server\n// into data the react components can use.\nimport {\n  Game,\n  Team,\n  Players,\n  ServeData,\n  PlayerPointsDataInstance,\n} from \"./types\";\n\n// Takes in a Game and converts it to the format used in the GameTable.\nexport function gameToRow(game: Game, players: Players) {\n  return {\n    id: game[\"id\"],\n    blueTeam: teamToString(game[\"blueTeam\"], players),\n    redTeam: teamToString(game[\"redTeam\"], players),\n    score: game[\"score\"].join(\":\"),\n    serve: game[\"serve\"],\n    date: game[\"date\"],\n  };\n}\n\nfunction teamToString(team: Team, players: Players): string {\n  return team.map((playerId) => players.get(playerId)).join(\", \");\n}\n\n// Takes in a list of Games and returns serveData.\nexport function getServeData(games: Game[]): ServeData {\n  const winPercentage = getServeWinPercentage(games);\n  return [\n    {\n      name: \"No Serve\",\n      value: 100 - winPercentage,\n      disabled: true,\n    },\n    {\n      name: \"Serve\",\n      value: winPercentage,\n    },\n  ];\n}\n\n// Takes in a list of Games and returns the win percentage of the team\n// with the inital serve.\nfunction getServeWinPercentage(games: Game[]): number {\n  const wins = games.filter((game) => {\n    return game.score[game.serve] > game.score[game.serve ? 0 : 1];\n  }).length;\n  const total = games.length;\n  return (wins / total) * 100;\n}\n\n// Takes in a list of games and all players, and returns how many points\n// each player scored.\nexport function getPlayerPointsData(\n  games: Game[],\n  players: Players\n): PlayerPointsDataInstance[] {\n  const data: PlayerPointsDataInstance[] = [];\n  // Should be of key: id, value: points.\n  const points = new Map(Array.from(players.keys()).map((key) => [key, 0]));\n  for (let game of games) {\n    const scoreBlue = game.score[0];\n    const scoreRed = game.score[1];\n    points.set(game.blueTeam[0], points.get(game.blueTeam[0]) + scoreBlue);\n    points.set(game.blueTeam[1], points.get(game.blueTeam[1]) + scoreBlue);\n    points.set(game.redTeam[0], points.get(game.redTeam[0]) + scoreRed);\n    points.set(game.redTeam[1], points.get(game.redTeam[1]) + scoreRed);\n  }\n  points.forEach((value, key) => {\n    data.push({ name: players.get(key), points: value });\n  });\n  return data;\n}\n"]},"metadata":{},"sourceType":"module"}