{"ast":null,"code":"var _jsxFileName = \"/Users/raphael/programming/web-projects/roundnet-stats/components/GroupList.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport List from \"@material-ui/core/List\";\nimport Fab from \"@material-ui/core/Fab\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport GroupAddRoundedIcon from \"@material-ui/icons/GroupAddRounded\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Swal from \"sweetalert2\";\nimport { GroupListItem } from \"./common/GroupListItem\";\nimport { errorToast } from \"../util/swals\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: \"100vw\",\n    // maxWidth: 360,\n    backgroundColor: theme.palette.background.paper\n  },\n  // fab: {\n  //   position: \"fixed\",\n  //   bottom: theme.spacing(4),\n  //   backgroundColor: theme.palette.success.main,\n  // },\n  fabButton: {\n    position: \"absolute\",\n    // zIndex: 1,\n    // top: -30,\n    bottom: theme.spacing(4),\n    left: 0,\n    right: 0,\n    margin: \"0 auto\"\n  }\n}));\nexport const GroupList = () => {\n  // Use style\n  const classes = useStyles(); // Use state hook\n\n  const {\n    0: groups,\n    1: setGroups\n  } = useState([]); // Add a group\n\n  const handleAdd = async () => {\n    let newGroup = {\n      groupname: \"\",\n      players: []\n    }; // Template for adding players.\n\n    const PlayerSwal = Swal.mixin({\n      icon: \"question\",\n      showCancelButton: true,\n      confirmButtonText: \"Next &rarr;\",\n      footer: \"Leave box empty to stop adding players.\",\n      input: \"text\",\n      inputPlaceholder: \"New Name\",\n      inputValidator: value => {\n        for (let player of newGroup.players) {\n          if (player === value) {\n            return \"Name is not unique!\";\n          }\n        }\n      },\n      progressSteps: [\"1\", \"2\", \"3\"],\n      currentProgressStep: \"1\"\n    }); // Ask for new group name.\n\n    const {\n      value: newGroupname\n    } = await Swal.fire({\n      title: \"New Group Name\",\n      text: \"Must be a unique group name.\",\n      icon: \"question\",\n      showCancelButton: true,\n      confirmButtonText: \"Next &rarr;\",\n      input: \"text\",\n      inputPlaceholder: \"New group name\",\n      inputValidator: value => {\n        if (!value) {\n          return \"Enter a name.\";\n        }\n\n        for (let group of groups) {\n          if (group.groupname === value) {\n            return \"Name is not unique!\";\n          }\n        }\n      },\n      progressSteps: [\"1\", \"2\", \"3\"],\n      currentProgressStep: \"0\"\n    });\n\n    if (!newGroupname) {\n      return;\n    }\n\n    newGroup.groupname = `${newGroupname}`; // Add Players until \"\" is returned.\n\n    let {\n      value: newPlayer,\n      dismiss: reason\n    } = await PlayerSwal.fire({\n      title: `Add Player #${newGroup.players.length + 1}`,\n      text: `So far you have: ${newGroup.players.join(\", \")}`\n    });\n\n    if (reason) {\n      return;\n    }\n\n    while (newPlayer) {\n      newGroup.players.push(`${newPlayer}`);\n      const {\n        value: temp,\n        dismiss: curReason\n      } = await PlayerSwal.fire({\n        title: `Add Player #${newGroup.players.length + 1}`,\n        text: `So far you have: ${newGroup.players.join(\", \")}`\n      });\n\n      if (curReason) {\n        return;\n      }\n\n      newPlayer = temp;\n    }\n\n    Swal.fire({\n      title: `Group: ${newGroup.groupname}`,\n      text: `Players: ${newGroup.players.join(\", \")}`,\n      icon: \"success\",\n      confirmButtonText: \"Finish\",\n      showCancelButton: true,\n      progressSteps: [\"1\", \"2\", \"3\"],\n      currentProgressStep: \"2\",\n      preConfirm: () => {\n        // If everything went well.\n        if (newGroup.groupname !== \"\" && newGroup.players.length >= 4) {\n          setGroups(groups => [...groups, newGroup]); // Call server here.\n        } else {\n          Swal.fire({\n            title: \"Something went wrong.\",\n            text: \"Remember: You need at least four players.\",\n            icon: \"error\"\n          });\n        }\n      }\n    });\n  }; // Delete a group\n\n\n  const handleDelete = groupname => {\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: `You won't be able to revert deleting ${groupname}!`,\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: \"Yes, delete it!\",\n      focusConfirm: false,\n      focusCancel: true,\n      cancelButtonText: \"No, cancel!\"\n    }).then(result => {\n      if (result.value) {\n        // Save old state\n        const prevGroups = [...groups]; // Update UI.\n\n        setGroups(groups.filter(curGroup => curGroup.groupname !== groupname));\n        console.log(\",Handle delete.\", groupname, groups); // Call backend and revert if error.\n\n        const apiSuccess = true;\n\n        if (!apiSuccess) {\n          errorToast.fire({\n            text: \"The group was already deleted.\"\n          });\n          setGroups(prevGroups);\n        }\n      }\n    });\n  }; // Rename a group\n\n\n  const handleRenameGroup = (oldName, newName) => {\n    // New name can't be the old name.\n    const newGroups = [];\n\n    for (let curGroup of groups) {\n      const curName = curGroup.groupname; // Check if the name is unique.\n\n      if (newName === curName) {\n        errorToast.fire({\n          text: \"Group name is not unique!\"\n        });\n        return;\n      }\n\n      if (curName === oldName) {\n        // Modify old name.\n        newGroups.push({\n          groupname: newName,\n          players: curGroup.players\n        });\n      } else {\n        newGroups.push(curGroup);\n      }\n    }\n\n    setGroups(newGroups); // Call server here.\n  }; // Rename a player.\n\n\n  const handleRenamePlayer = (groupname, oldPlayer, newPlayer) => {\n    // New name can't be the old name.\n    const newGroups = [];\n\n    for (let curGroup of groups) {\n      let newPlayers = curGroup.players;\n\n      if (groupname === curGroup.groupname) {\n        // Check if the name is unique.\n        newPlayers = [];\n\n        for (let player of curGroup.players) {\n          if (player === newPlayer) {\n            errorToast.fire({\n              text: \"Group name is not unique!\"\n            });\n            return;\n          }\n\n          if (player === oldPlayer) {\n            newPlayers.push(newPlayer);\n          } else {\n            newPlayers.push(player);\n          }\n        }\n\n        newGroups.push({\n          groupname: curGroup.groupname,\n          players: newPlayers\n        });\n      }\n\n      setGroups(newGroups); // Call server here.\n    }\n  };\n\n  let content;\n\n  if (groups.length == 0) {\n    content = __jsx(Typography, {\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 7\n      }\n    }, \"Seems like you have no groups yet. Create one by clicking the button below.\");\n  } else {\n    content = __jsx(List, {\n      component: \"nav\",\n      className: classes.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 7\n      }\n    }, groups.map(group => {\n      return __jsx(GroupListItem, {\n        key: group.groupname,\n        group: group,\n        onDelete: handleDelete,\n        onRenameGroup: handleRenameGroup,\n        onRenamePlayer: handleRenamePlayer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 13\n        }\n      });\n    }));\n  }\n\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 5\n    }\n  }, content, __jsx(Tooltip, {\n    title: \"New Group\",\n    arrow: true,\n    placement: \"top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }\n  }, __jsx(Fab, {\n    size: \"large\",\n    className: classes.fabButton,\n    \"aria-label\": \"add\",\n    color: \"secondary\",\n    onClick: handleAdd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 9\n    }\n  }, __jsx(GroupAddRoundedIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 11\n    }\n  }))));\n};","map":{"version":3,"sources":["/Users/raphael/programming/web-projects/roundnet-stats/components/GroupList.tsx"],"names":["React","useState","List","Fab","Tooltip","GroupAddRoundedIcon","Typography","makeStyles","Swal","GroupListItem","errorToast","useStyles","theme","root","width","backgroundColor","palette","background","paper","fabButton","position","bottom","spacing","left","right","margin","GroupList","classes","groups","setGroups","handleAdd","newGroup","groupname","players","PlayerSwal","mixin","icon","showCancelButton","confirmButtonText","footer","input","inputPlaceholder","inputValidator","value","player","progressSteps","currentProgressStep","newGroupname","fire","title","text","group","newPlayer","dismiss","reason","length","join","push","temp","curReason","preConfirm","handleDelete","focusConfirm","focusCancel","cancelButtonText","then","result","prevGroups","filter","curGroup","console","log","apiSuccess","handleRenameGroup","oldName","newName","newGroups","curName","handleRenamePlayer","oldPlayer","newPlayers","content","map"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport List from \"@material-ui/core/List\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Fab from \"@material-ui/core/Fab\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport GroupAddRoundedIcon from \"@material-ui/icons/GroupAddRounded\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Swal from \"sweetalert2\";\nimport { GroupListItem } from \"./common/GroupListItem\";\nimport { errorToast } from \"../util/swals\";\n\nexport interface Group {\n  groupname: string;\n  players: string[];\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100vw\",\n    // maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n  },\n  // fab: {\n  //   position: \"fixed\",\n  //   bottom: theme.spacing(4),\n  //   backgroundColor: theme.palette.success.main,\n  // },\n  fabButton: {\n    position: \"absolute\",\n    // zIndex: 1,\n    // top: -30,\n    bottom: theme.spacing(4),\n    left: 0,\n    right: 0,\n    margin: \"0 auto\",\n  },\n}));\n\nexport const GroupList: React.FC = () => {\n  // Use style\n  const classes = useStyles();\n\n  // Use state hook\n  const [groups, setGroups] = useState([]);\n\n  // Add a group\n  const handleAdd = async () => {\n    let newGroup: Group = {\n      groupname: \"\",\n      players: [],\n    };\n\n    // Template for adding players.\n    const PlayerSwal = Swal.mixin({\n      icon: \"question\",\n      showCancelButton: true,\n      confirmButtonText: \"Next &rarr;\",\n      footer: \"Leave box empty to stop adding players.\",\n      input: \"text\",\n      inputPlaceholder: \"New Name\",\n      inputValidator: (value) => {\n        for (let player of newGroup.players) {\n          if (player === value) {\n            return \"Name is not unique!\";\n          }\n        }\n      },\n      progressSteps: [\"1\", \"2\", \"3\"],\n      currentProgressStep: \"1\",\n    });\n\n    // Ask for new group name.\n    const { value: newGroupname } = await Swal.fire({\n      title: \"New Group Name\",\n      text: \"Must be a unique group name.\",\n      icon: \"question\",\n      showCancelButton: true,\n      confirmButtonText: \"Next &rarr;\",\n      input: \"text\",\n      inputPlaceholder: \"New group name\",\n      inputValidator: (value) => {\n        if (!value) {\n          return \"Enter a name.\";\n        }\n        for (let group of groups) {\n          if (group.groupname === value) {\n            return \"Name is not unique!\";\n          }\n        }\n      },\n      progressSteps: [\"1\", \"2\", \"3\"],\n      currentProgressStep: \"0\",\n    });\n    if (!newGroupname) {\n      return;\n    }\n    newGroup.groupname = `${newGroupname}`;\n\n    // Add Players until \"\" is returned.\n    let { value: newPlayer, dismiss: reason } = await PlayerSwal.fire({\n      title: `Add Player #${newGroup.players.length + 1}`,\n      text: `So far you have: ${newGroup.players.join(\", \")}`,\n    });\n    if (reason) {\n      return;\n    }\n    while (newPlayer) {\n      newGroup.players.push(`${newPlayer}`);\n      const { value: temp, dismiss: curReason } = await PlayerSwal.fire({\n        title: `Add Player #${newGroup.players.length + 1}`,\n        text: `So far you have: ${newGroup.players.join(\", \")}`,\n      });\n      if (curReason) {\n        return;\n      }\n      newPlayer = temp;\n    }\n\n    Swal.fire({\n      title: `Group: ${newGroup.groupname}`,\n      text: `Players: ${newGroup.players.join(\", \")}`,\n      icon: \"success\",\n      confirmButtonText: \"Finish\",\n      showCancelButton: true,\n      progressSteps: [\"1\", \"2\", \"3\"],\n      currentProgressStep: \"2\",\n      preConfirm: () => {\n        // If everything went well.\n        if (newGroup.groupname !== \"\" && newGroup.players.length >= 4) {\n          setGroups((groups) => [...groups, newGroup]);\n          // Call server here.\n        } else {\n          Swal.fire({\n            title: \"Something went wrong.\",\n            text: \"Remember: You need at least four players.\",\n            icon: \"error\",\n          });\n        }\n      },\n    });\n  };\n\n  // Delete a group\n  const handleDelete = (groupname: string) => {\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: `You won't be able to revert deleting ${groupname}!`,\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: \"Yes, delete it!\",\n      focusConfirm: false,\n      focusCancel: true,\n      cancelButtonText: \"No, cancel!\",\n    }).then((result) => {\n      if (result.value) {\n        // Save old state\n        const prevGroups = [...groups];\n        // Update UI.\n        setGroups(\n          groups.filter((curGroup) => curGroup.groupname !== groupname)\n        );\n        console.log(\",Handle delete.\", groupname, groups);\n        // Call backend and revert if error.\n        const apiSuccess = true;\n        if (!apiSuccess) {\n          errorToast.fire({ text: \"The group was already deleted.\" });\n          setGroups(prevGroups);\n        }\n      }\n    });\n  };\n\n  // Rename a group\n  const handleRenameGroup = (oldName: string, newName: string) => {\n    // New name can't be the old name.\n\n    const newGroups: Group[] = [];\n    for (let curGroup of groups) {\n      const curName = curGroup.groupname;\n      // Check if the name is unique.\n      if (newName === curName) {\n        errorToast.fire({ text: \"Group name is not unique!\" });\n        return;\n      }\n      if (curName === oldName) {\n        // Modify old name.\n        newGroups.push({ groupname: newName, players: curGroup.players });\n      } else {\n        newGroups.push(curGroup);\n      }\n    }\n    setGroups(newGroups);\n    // Call server here.\n  };\n\n  // Rename a player.\n  const handleRenamePlayer = (\n    groupname: string,\n    oldPlayer: string,\n    newPlayer: string\n  ) => {\n    // New name can't be the old name.\n    const newGroups: Group[] = [];\n    for (let curGroup of groups) {\n      let newPlayers = curGroup.players;\n      if (groupname === curGroup.groupname) {\n        // Check if the name is unique.\n        newPlayers = [];\n        for (let player of curGroup.players) {\n          if (player === newPlayer) {\n            errorToast.fire({ text: \"Group name is not unique!\" });\n            return;\n          }\n          if (player === oldPlayer) {\n            newPlayers.push(newPlayer);\n          } else {\n            newPlayers.push(player);\n          }\n        }\n        newGroups.push({ groupname: curGroup.groupname, players: newPlayers });\n      }\n      setGroups(newGroups);\n      // Call server here.\n    }\n  };\n\n  let content: React.ReactNode;\n  if (groups.length == 0) {\n    content = (\n      <Typography align=\"center\">\n        Seems like you have no groups yet. Create one by clicking the button\n        below.\n      </Typography>\n    );\n  } else {\n    content = (\n      <List component=\"nav\" className={classes.root}>\n        {groups.map((group) => {\n          return (\n            <GroupListItem\n              key={group.groupname}\n              group={group}\n              onDelete={handleDelete}\n              onRenameGroup={handleRenameGroup}\n              onRenamePlayer={handleRenamePlayer}\n            />\n          );\n        })}\n      </List>\n    );\n  }\n  return (\n    <React.Fragment>\n      {content}\n      <Tooltip title=\"New Group\" arrow placement=\"top\">\n        <Fab\n          size=\"large\"\n          className={classes.fabButton}\n          aria-label=\"add\"\n          color=\"secondary\"\n          onClick={handleAdd}\n        >\n          <GroupAddRoundedIcon />\n        </Fab>\n      </Tooltip>\n      {/* <Grid\n        container\n        spacing={0}\n        justify=\"center\"\n        style={{ minWidth: \"100vw\" }}\n      >\n        <Grid item>\n        </Grid>\n      </Grid> */}\n    </React.Fragment>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}