{"ast":null,"code":"var _jsxFileName = \"/Users/raphael/programming/web-projects/roundnet-stats/components/LoginForm.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport Link from \"next/link\";\nimport Router from \"next/router\";\nimport { Formik, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Link as MuiLink } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\nimport PersonRoundedIcon from \"@material-ui/icons/PersonRounded\";\nimport LockRoundedIcon from \"@material-ui/icons/LockRounded\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport { FormikField } from \"./common/FormikField\";\nimport { ToastContainer, toast } from \"react-toastify\";\nconst useStyles = makeStyles({\n  root: {\n    background: \"#ECECEC\"\n  }\n});\nconst SignupSchema = Yup.object().shape({\n  username: Yup.string().min(3, \"Too short!\").max(30, \"Too long!\").required(\"Required!\"),\n  password: Yup.string().min(4, \"Too short!\").max(30, \"Too long!\").required(\"Required!\")\n});\nexport const LoginForm = ({\n  header,\n  loginRoute,\n  registerRoute\n}) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const initialValues = {\n    username: \"\",\n    password: \"\"\n  };\n\n  const handleSubmit = values => {\n    // Call server HERE\n    if (values.username === \"yes\") {\n      Router.push(`${loginRoute}`);\n    } else {\n      const options = {\n        // Only stays the correct color for a one second.\n        style: {\n          background: theme.palette.error.main\n        }\n      };\n      toast.error(\"Invalid username or password.\", options);\n    }\n  };\n\n  return __jsx(Box, {\n    padding: 4,\n    maxWidth: \"sm\",\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, __jsx(Typography, {\n    component: \"h1\",\n    variant: \"h5\",\n    style: {\n      textAlign: \"left\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, header), __jsx(Formik, {\n    initialValues: initialValues,\n    onSubmit: handleSubmit,\n    validationSchema: SignupSchema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, ({\n    dirty,\n    isValid,\n    handleReset\n  }) => {\n    return __jsx(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }, \" \", __jsx(FormikField, {\n      name: \"username\",\n      label: \"Username\",\n      icon: __jsx(PersonRoundedIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 23\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 15\n      }\n    }), __jsx(FormikField, {\n      name: \"password\",\n      label: \"Password\",\n      type: \"password\",\n      icon: __jsx(LockRoundedIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 23\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 15\n      }\n    }), __jsx(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      disabled: !dirty || !isValid,\n      type: \"submit\",\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 15\n      }\n    }, \"Submit\"), __jsx(Link, {\n      href: `${registerRoute}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 15\n      }\n    }, __jsx(Typography, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }\n    }, __jsx(MuiLink, {\n      href: \"#\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 19\n      }\n    }, \"Register.\"))), __jsx(ToastContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 15\n      }\n    }));\n  }));\n};","map":{"version":3,"sources":["/Users/raphael/programming/web-projects/roundnet-stats/components/LoginForm.tsx"],"names":["React","Link","Router","Formik","Form","Yup","Typography","MuiLink","Button","Box","PersonRoundedIcon","LockRoundedIcon","makeStyles","useTheme","FormikField","ToastContainer","toast","useStyles","root","background","SignupSchema","object","shape","username","string","min","max","required","password","LoginForm","header","loginRoute","registerRoute","classes","theme","initialValues","handleSubmit","values","push","options","style","palette","error","main","textAlign","dirty","isValid","handleReset"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Link from \"next/link\";\nimport Router from \"next/router\";\nimport { Formik, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Link as MuiLink } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\nimport PersonRoundedIcon from \"@material-ui/icons/PersonRounded\";\nimport LockRoundedIcon from \"@material-ui/icons/LockRounded\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport { FormikField } from \"./common/FormikField\";\nimport { ToastContainer, toast } from \"react-toastify\";\n\nconst useStyles = makeStyles({\n  root: {\n    background: \"#ECECEC\",\n  },\n});\n\ninterface FormValues {\n  username: string;\n  password: string;\n}\ninterface LoginFormProps {\n  header: string;\n  loginRoute: string;\n  registerRoute: string;\n}\n\nconst SignupSchema = Yup.object().shape({\n  username: Yup.string()\n    .min(3, \"Too short!\")\n    .max(30, \"Too long!\")\n    .required(\"Required!\"),\n  password: Yup.string()\n    .min(4, \"Too short!\")\n    .max(30, \"Too long!\")\n    .required(\"Required!\"),\n});\n\nexport const LoginForm: React.FC<LoginFormProps> = ({\n  header,\n  loginRoute,\n  registerRoute,\n}) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const initialValues: FormValues = {\n    username: \"\",\n    password: \"\",\n  };\n\n  const handleSubmit = (values: FormValues): void => {\n    // Call server HERE\n    if (values.username === \"yes\") {\n      Router.push(`${loginRoute}`);\n    } else {\n      const options = {\n        // Only stays the correct color for a one second.\n        style: { background: theme.palette.error.main },\n      };\n      toast.error(\"Invalid username or password.\", options);\n    }\n  };\n\n  return (\n    <Box padding={4} maxWidth=\"sm\" className={classes.root}>\n      <Typography component=\"h1\" variant=\"h5\" style={{ textAlign: \"left\" }}>\n        {header}\n      </Typography>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        validationSchema={SignupSchema}\n      >\n        {({ dirty, isValid, handleReset }) => {\n          return (\n            <Form>\n              {\" \"}\n              <FormikField\n                name=\"username\"\n                label=\"Username\"\n                icon={<PersonRoundedIcon />}\n              />\n              <FormikField\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                icon={<LockRoundedIcon />}\n              />\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                disabled={!dirty || !isValid}\n                type=\"submit\"\n                fullWidth\n              >\n                Submit\n              </Button>\n              <Link href={`${registerRoute}`}>\n                <Typography>\n                  <MuiLink href=\"#\">Register.</MuiLink>\n                </Typography>\n              </Link>\n              <ToastContainer />\n            </Form>\n          );\n        }}\n      </Formik>\n    </Box>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}