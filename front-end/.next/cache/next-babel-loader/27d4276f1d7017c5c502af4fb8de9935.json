{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/raphael/programming/web-projects/roundnet-stats/components/GroupList.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React, { useState } from \"react\";\nimport List from \"@material-ui/core/List\";\nimport Fab from \"@material-ui/core/Fab\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport GroupAddRoundedIcon from \"@material-ui/icons/GroupAddRounded\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Swal from \"sweetalert2\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { GroupListItem } from \"./common/GroupListItem\";\nimport { errorToast, groupPlayerSelection, groupConfirmation } from \"../util/swals\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    root: {\n      width: \"100vw\"\n    },\n    fabButton: {\n      position: \"absolute\",\n      bottom: theme.spacing(5),\n      left: 0,\n      right: 0,\n      margin: \"0 auto\"\n    }\n  };\n});\nexport var GroupList = function GroupList() {\n  _s();\n\n  // Use style\n  var classes = useStyles(); // Use state hook\n\n  var _useState = useState([]),\n      groups = _useState[0],\n      setGroups = _useState[1]; // Add a group\n\n\n  var handleAdd = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var newGroup, _yield$Swal$fire, newGroupname;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              newGroup = {\n                groupId: uuidv4(),\n                groupname: \"\",\n                players: new Map()\n              }; // Ask for new group name.\n\n              _context.next = 3;\n              return Swal.fire({\n                title: \"New Group Name\",\n                text: \"Must be a unique group name.\",\n                icon: \"question\",\n                showCancelButton: true,\n                confirmButtonText: \"Next &rarr;\",\n                input: \"text\",\n                inputPlaceholder: \"New group name\",\n                inputValidator: function inputValidator(value) {\n                  if (!value) {\n                    return \"Enter a name.\";\n                  }\n\n                  var _iterator = _createForOfIteratorHelper(groups),\n                      _step;\n\n                  try {\n                    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                      var group = _step.value;\n\n                      if (group.groupname === value) {\n                        return \"Name is not unique!\";\n                      }\n                    }\n                  } catch (err) {\n                    _iterator.e(err);\n                  } finally {\n                    _iterator.f();\n                  }\n                },\n                progressSteps: [\"1\", \"2\", \"3\"],\n                currentProgressStep: \"0\"\n              });\n\n            case 3:\n              _yield$Swal$fire = _context.sent;\n              newGroupname = _yield$Swal$fire.value;\n\n              if (newGroupname) {\n                _context.next = 7;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 7:\n              newGroup.groupname = \"\".concat(newGroupname); // Add Players until \"\" is returned.\n\n              groupPlayerSelection(newGroup.groupname).then(function (createdPlayers) {\n                newGroup.players = createdPlayers;\n                return groupConfirmation(newGroup.groupname, newGroup.players);\n              }).then(function () {\n                setGroups(function (groups) {\n                  return [].concat(_toConsumableArray(groups), [newGroup]);\n                }); // Call server\n              })[\"catch\"](function () {\n                return;\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleAdd() {\n      return _ref.apply(this, arguments);\n    };\n  }(); // Delete a group\n\n\n  var handleDelete = function handleDelete(groupname) {\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: \"You won't be able to revert deleting \".concat(groupname, \"!\"),\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: \"Yes, delete it!\",\n      focusConfirm: false,\n      focusCancel: true,\n      cancelButtonText: \"No, cancel!\"\n    }).then(function (result) {\n      if (result.value) {\n        // Save old state\n        var prevGroups = _toConsumableArray(groups); // Update UI.\n\n\n        setGroups(groups.filter(function (curGroup) {\n          return curGroup.groupname !== groupname;\n        }));\n        console.log(\",Handle delete.\", groupname, groups); // Call backend and revert if error.\n\n        var apiSuccess = true;\n\n        if (!apiSuccess) {\n          errorToast.fire({\n            text: \"The group was already deleted.\"\n          });\n          setGroups(prevGroups);\n        }\n      }\n    });\n  }; // Rename a group\n\n\n  var handleRenameGroup = function handleRenameGroup(oldName, newName) {\n    // New name can't be the old name.\n    var newGroups = [];\n\n    var _iterator2 = _createForOfIteratorHelper(groups),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var curGroup = _step2.value;\n        var curName = curGroup.groupname; // Check if the name is unique.\n\n        if (newName === curName) {\n          errorToast.fire({\n            text: \"Group name is not unique!\"\n          });\n          return;\n        }\n\n        if (curName === oldName) {\n          // Modify old name.\n          newGroups.push(_objectSpread(_objectSpread({}, curGroup), {}, {\n            groupname: newName\n          }));\n        } else {\n          newGroups.push(curGroup);\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    setGroups(newGroups); // Call server here.\n  }; // Rename a player.\n\n\n  var handleRenamePlayer = function handleRenamePlayer(oldPlayerId, newName) {\n    // New name can't be the old name.\n    var newGroups = [];\n\n    var _iterator3 = _createForOfIteratorHelper(groups),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var curGroup = _step3.value;\n\n        var newPlayers = _objectSpread({}, curGroup.players);\n\n        if (newPlayers.has(oldPlayerId)) {\n          // Check if the name is unique.\n          var isDuplicate = false;\n          Array.from(newPlayers, function (_ref2) {\n            var _ref3 = _slicedToArray(_ref2, 2),\n                key = _ref3[0],\n                value = _ref3[1];\n\n            if (key !== oldPlayerId && newName === value) {\n              errorToast.fire({\n                text: \"Group name is not unique!\"\n              });\n              isDuplicate = true; // I don't think you can return from here.\n            }\n          });\n\n          if (isDuplicate) {\n            return;\n          }\n\n          newPlayers.set(oldPlayerId, newName);\n        }\n\n        newGroups.push(_objectSpread(_objectSpread({}, curGroup), {}, {\n          players: newPlayers\n        }));\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n\n    setGroups(newGroups); // Call server here.\n  };\n\n  var content;\n\n  if (groups.length == 0) {\n    content = __jsx(Typography, {\n      align: \"center\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 7\n      }\n    }, \"Seems like you have no groups yet. Create one by clicking the button below.\");\n  } else {\n    content = __jsx(List, {\n      component: \"nav\",\n      className: classes.root,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 7\n      }\n    }, groups.map(function (group) {\n      return __jsx(GroupListItem, {\n        key: group.groupname,\n        group: group,\n        onDelete: handleDelete,\n        onRenameGroup: handleRenameGroup,\n        onRenamePlayer: handleRenamePlayer,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 13\n        }\n      });\n    }));\n  }\n\n  return __jsx(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 5\n    }\n  }, content, __jsx(Tooltip, {\n    title: \"New Group\",\n    arrow: true,\n    placement: \"top\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }\n  }, __jsx(Fab, {\n    size: \"large\",\n    className: classes.fabButton,\n    \"aria-label\": \"add\",\n    color: \"secondary\",\n    onClick: handleAdd,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }\n  }, __jsx(GroupAddRoundedIcon, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 11\n    }\n  }))));\n};\n\n_s(GroupList, \"p1lH/QNdryKV2CDgQTAuQTS67n0=\", false, function () {\n  return [useStyles];\n});\n\n_c = GroupList;\n\nvar _c;\n\n$RefreshReg$(_c, \"GroupList\");","map":{"version":3,"sources":["/Users/raphael/programming/web-projects/roundnet-stats/components/GroupList.tsx"],"names":["React","useState","List","Fab","Tooltip","GroupAddRoundedIcon","Typography","makeStyles","Swal","v4","uuidv4","GroupListItem","errorToast","groupPlayerSelection","groupConfirmation","useStyles","theme","root","width","fabButton","position","bottom","spacing","left","right","margin","GroupList","classes","groups","setGroups","handleAdd","newGroup","groupId","groupname","players","Map","fire","title","text","icon","showCancelButton","confirmButtonText","input","inputPlaceholder","inputValidator","value","group","progressSteps","currentProgressStep","newGroupname","then","createdPlayers","handleDelete","focusConfirm","focusCancel","cancelButtonText","result","prevGroups","filter","curGroup","console","log","apiSuccess","handleRenameGroup","oldName","newName","newGroups","curName","push","handleRenamePlayer","oldPlayerId","newPlayers","has","isDuplicate","Array","from","key","set","content","length","map"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,mBAAP,MAAgC,oCAAhC;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SACEC,UADF,EAEEC,oBAFF,EAGEC,iBAHF,QAIO,eAJP;AAaA,IAAMC,SAAS,GAAGR,UAAU,CAAC,UAACS,KAAD;AAAA,SAAY;AACvCC,IAAAA,IAAI,EAAE;AACJC,MAAAA,KAAK,EAAE;AADH,KADiC;AAIvCC,IAAAA,SAAS,EAAE;AACTC,MAAAA,QAAQ,EAAE,UADD;AAETC,MAAAA,MAAM,EAAEL,KAAK,CAACM,OAAN,CAAc,CAAd,CAFC;AAGTC,MAAAA,IAAI,EAAE,CAHG;AAITC,MAAAA,KAAK,EAAE,CAJE;AAKTC,MAAAA,MAAM,EAAE;AALC;AAJ4B,GAAZ;AAAA,CAAD,CAA5B;AAaA,OAAO,IAAMC,SAAmB,GAAG,SAAtBA,SAAsB,GAAM;AAAA;;AACvC;AACA,MAAMC,OAAO,GAAGZ,SAAS,EAAzB,CAFuC,CAIvC;;AAJuC,kBAKXd,QAAQ,CAAU,EAAV,CALG;AAAA,MAKhC2B,MALgC;AAAA,MAKxBC,SALwB,iBAOvC;;;AACA,MAAMC,SAAS;AAAA,wEAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;AACZC,cAAAA,QADY,GACM;AACpBC,gBAAAA,OAAO,EAAEtB,MAAM,EADK;AAEpBuB,gBAAAA,SAAS,EAAE,EAFS;AAGpBC,gBAAAA,OAAO,EAAE,IAAIC,GAAJ;AAHW,eADN,EAOhB;;AAPgB;AAAA,qBAQsB3B,IAAI,CAAC4B,IAAL,CAAU;AAC9CC,gBAAAA,KAAK,EAAE,gBADuC;AAE9CC,gBAAAA,IAAI,EAAE,8BAFwC;AAG9CC,gBAAAA,IAAI,EAAE,UAHwC;AAI9CC,gBAAAA,gBAAgB,EAAE,IAJ4B;AAK9CC,gBAAAA,iBAAiB,EAAE,aAL2B;AAM9CC,gBAAAA,KAAK,EAAE,MANuC;AAO9CC,gBAAAA,gBAAgB,EAAE,gBAP4B;AAQ9CC,gBAAAA,cAAc,EAAE,wBAACC,KAAD,EAAW;AACzB,sBAAI,CAACA,KAAL,EAAY;AACV,2BAAO,eAAP;AACD;;AAHwB,6DAIPjB,MAJO;AAAA;;AAAA;AAIzB,wEAA0B;AAAA,0BAAjBkB,KAAiB;;AACxB,0BAAIA,KAAK,CAACb,SAAN,KAAoBY,KAAxB,EAA+B;AAC7B,+BAAO,qBAAP;AACD;AACF;AARwB;AAAA;AAAA;AAAA;AAAA;AAS1B,iBAjB6C;AAkB9CE,gBAAAA,aAAa,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAlB+B;AAmB9CC,gBAAAA,mBAAmB,EAAE;AAnByB,eAAV,CARtB;;AAAA;AAAA;AAQDC,cAAAA,YARC,oBAQRJ,KARQ;;AAAA,kBA6BXI,YA7BW;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAgChBlB,cAAAA,QAAQ,CAACE,SAAT,aAAwBgB,YAAxB,EAhCgB,CAkChB;;AACApC,cAAAA,oBAAoB,CAACkB,QAAQ,CAACE,SAAV,CAApB,CACGiB,IADH,CACQ,UAACC,cAAD,EAAoB;AACxBpB,gBAAAA,QAAQ,CAACG,OAAT,GAAmBiB,cAAnB;AACA,uBAAOrC,iBAAiB,CAACiB,QAAQ,CAACE,SAAV,EAAqBF,QAAQ,CAACG,OAA9B,CAAxB;AACD,eAJH,EAKGgB,IALH,CAKQ,YAAM;AACVrB,gBAAAA,SAAS,CAAC,UAACD,MAAD;AAAA,sDAAgBA,MAAhB,IAAwBG,QAAxB;AAAA,iBAAD,CAAT,CADU,CAEV;AACD,eARH,WASS,YAAM;AACX;AACD,eAXH;;AAnCgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAATD,SAAS;AAAA;AAAA;AAAA,KAAf,CARuC,CAyDvC;;;AACA,MAAMsB,YAAY,GAAG,SAAfA,YAAe,CAACnB,SAAD,EAAuB;AAC1CzB,IAAAA,IAAI,CAAC4B,IAAL,CAAU;AACRC,MAAAA,KAAK,EAAE,eADC;AAERC,MAAAA,IAAI,iDAA0CL,SAA1C,MAFI;AAGRM,MAAAA,IAAI,EAAE,SAHE;AAIRC,MAAAA,gBAAgB,EAAE,IAJV;AAKRC,MAAAA,iBAAiB,EAAE,iBALX;AAMRY,MAAAA,YAAY,EAAE,KANN;AAORC,MAAAA,WAAW,EAAE,IAPL;AAQRC,MAAAA,gBAAgB,EAAE;AARV,KAAV,EASGL,IATH,CASQ,UAACM,MAAD,EAAY;AAClB,UAAIA,MAAM,CAACX,KAAX,EAAkB;AAChB;AACA,YAAMY,UAAU,sBAAO7B,MAAP,CAAhB,CAFgB,CAGhB;;;AACAC,QAAAA,SAAS,CACPD,MAAM,CAAC8B,MAAP,CAAc,UAACC,QAAD;AAAA,iBAAcA,QAAQ,CAAC1B,SAAT,KAAuBA,SAArC;AAAA,SAAd,CADO,CAAT;AAGA2B,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+B5B,SAA/B,EAA0CL,MAA1C,EAPgB,CAQhB;;AACA,YAAMkC,UAAU,GAAG,IAAnB;;AACA,YAAI,CAACA,UAAL,EAAiB;AACflD,UAAAA,UAAU,CAACwB,IAAX,CAAgB;AAAEE,YAAAA,IAAI,EAAE;AAAR,WAAhB;AACAT,UAAAA,SAAS,CAAC4B,UAAD,CAAT;AACD;AACF;AACF,KAzBD;AA0BD,GA3BD,CA1DuC,CAuFvC;;;AACA,MAAMM,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,OAAD,EAAkBC,OAAlB,EAAsC;AAC9D;AAEA,QAAMC,SAAkB,GAAG,EAA3B;;AAH8D,gDAIzCtC,MAJyC;AAAA;;AAAA;AAI9D,6DAA6B;AAAA,YAApB+B,QAAoB;AAC3B,YAAMQ,OAAO,GAAGR,QAAQ,CAAC1B,SAAzB,CAD2B,CAE3B;;AACA,YAAIgC,OAAO,KAAKE,OAAhB,EAAyB;AACvBvD,UAAAA,UAAU,CAACwB,IAAX,CAAgB;AAAEE,YAAAA,IAAI,EAAE;AAAR,WAAhB;AACA;AACD;;AACD,YAAI6B,OAAO,KAAKH,OAAhB,EAAyB;AACvB;AACAE,UAAAA,SAAS,CAACE,IAAV,iCAAoBT,QAApB;AAA8B1B,YAAAA,SAAS,EAAEgC;AAAzC;AACD,SAHD,MAGO;AACLC,UAAAA,SAAS,CAACE,IAAV,CAAeT,QAAf;AACD;AACF;AAjB6D;AAAA;AAAA;AAAA;AAAA;;AAkB9D9B,IAAAA,SAAS,CAACqC,SAAD,CAAT,CAlB8D,CAmB9D;AACD,GApBD,CAxFuC,CA8GvC;;;AACA,MAAMG,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,WAAD,EAAsBL,OAAtB,EAA0C;AACnE;AACA,QAAMC,SAAkB,GAAG,EAA3B;;AAFmE,gDAG9CtC,MAH8C;AAAA;;AAAA;AAGnE,6DAA6B;AAAA,YAApB+B,QAAoB;;AAC3B,YAAIY,UAAU,qBAAQZ,QAAQ,CAACzB,OAAjB,CAAd;;AACA,YAAIqC,UAAU,CAACC,GAAX,CAAeF,WAAf,CAAJ,EAAiC;AAC/B;AACA,cAAIG,WAAW,GAAG,KAAlB;AACAC,UAAAA,KAAK,CAACC,IAAN,CAAWJ,UAAX,EAAuB,iBAAkB;AAAA;AAAA,gBAAhBK,GAAgB;AAAA,gBAAX/B,KAAW;;AACvC,gBAAI+B,GAAG,KAAKN,WAAR,IAAuBL,OAAO,KAAKpB,KAAvC,EAA8C;AAC5CjC,cAAAA,UAAU,CAACwB,IAAX,CAAgB;AAAEE,gBAAAA,IAAI,EAAE;AAAR,eAAhB;AACAmC,cAAAA,WAAW,GAAG,IAAd,CAF4C,CAExB;AACrB;AACF,WALD;;AAMA,cAAIA,WAAJ,EAAiB;AACf;AACD;;AACDF,UAAAA,UAAU,CAACM,GAAX,CAAeP,WAAf,EAA4BL,OAA5B;AACD;;AACDC,QAAAA,SAAS,CAACE,IAAV,iCAAoBT,QAApB;AAA8BzB,UAAAA,OAAO,EAAEqC;AAAvC;AACD;AApBkE;AAAA;AAAA;AAAA;AAAA;;AAqBnE1C,IAAAA,SAAS,CAACqC,SAAD,CAAT,CArBmE,CAsBnE;AACD,GAvBD;;AAyBA,MAAIY,OAAJ;;AACA,MAAIlD,MAAM,CAACmD,MAAP,IAAiB,CAArB,EAAwB;AACtBD,IAAAA,OAAO,GACL,MAAC,UAAD;AAAY,MAAA,KAAK,EAAC,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qFADF;AAMD,GAPD,MAOO;AACLA,IAAAA,OAAO,GACL,MAAC,IAAD;AAAM,MAAA,SAAS,EAAC,KAAhB;AAAsB,MAAA,SAAS,EAAEnD,OAAO,CAACV,IAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGW,MAAM,CAACoD,GAAP,CAAW,UAAClC,KAAD,EAAW;AACrB,aACE,MAAC,aAAD;AACE,QAAA,GAAG,EAAEA,KAAK,CAACb,SADb;AAEE,QAAA,KAAK,EAAEa,KAFT;AAGE,QAAA,QAAQ,EAAEM,YAHZ;AAIE,QAAA,aAAa,EAAEW,iBAJjB;AAKE,QAAA,cAAc,EAAEM,kBALlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AASD,KAVA,CADH,CADF;AAeD;;AACD,SACE,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGS,OADH,EAEE,MAAC,OAAD;AAAS,IAAA,KAAK,EAAC,WAAf;AAA2B,IAAA,KAAK,MAAhC;AAAiC,IAAA,SAAS,EAAC,KAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,SAAS,EAAEnD,OAAO,CAACR,SAFrB;AAGE,kBAAW,KAHb;AAIE,IAAA,KAAK,EAAC,WAJR;AAKE,IAAA,OAAO,EAAEW,SALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE,MAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF,CAFF,CADF;AAgBD,CAjLM;;GAAMJ,S;UAEKX,S;;;KAFLW,S","sourcesContent":["import React, { useState } from \"react\";\nimport List from \"@material-ui/core/List\";\nimport Fab from \"@material-ui/core/Fab\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport GroupAddRoundedIcon from \"@material-ui/icons/GroupAddRounded\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Swal from \"sweetalert2\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { GroupListItem } from \"./common/GroupListItem\";\nimport {\n  errorToast,\n  groupPlayerSelection,\n  groupConfirmation,\n} from \"../util/swals\";\nimport { Players } from \"../util/types\";\n\nexport interface Group {\n  groupname: string;\n  groupId: string;\n  players: Players;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100vw\",\n  },\n  fabButton: {\n    position: \"absolute\",\n    bottom: theme.spacing(5),\n    left: 0,\n    right: 0,\n    margin: \"0 auto\",\n  },\n}));\n\nexport const GroupList: React.FC = () => {\n  // Use style\n  const classes = useStyles();\n\n  // Use state hook\n  const [groups, setGroups] = useState<Group[]>([]);\n\n  // Add a group\n  const handleAdd = async () => {\n    let newGroup: Group = {\n      groupId: uuidv4(),\n      groupname: \"\",\n      players: new Map(),\n    };\n\n    // Ask for new group name.\n    const { value: newGroupname } = await Swal.fire({\n      title: \"New Group Name\",\n      text: \"Must be a unique group name.\",\n      icon: \"question\",\n      showCancelButton: true,\n      confirmButtonText: \"Next &rarr;\",\n      input: \"text\",\n      inputPlaceholder: \"New group name\",\n      inputValidator: (value) => {\n        if (!value) {\n          return \"Enter a name.\";\n        }\n        for (let group of groups) {\n          if (group.groupname === value) {\n            return \"Name is not unique!\";\n          }\n        }\n      },\n      progressSteps: [\"1\", \"2\", \"3\"],\n      currentProgressStep: \"0\",\n    });\n    if (!newGroupname) {\n      return;\n    }\n    newGroup.groupname = `${newGroupname}`;\n\n    // Add Players until \"\" is returned.\n    groupPlayerSelection(newGroup.groupname)\n      .then((createdPlayers) => {\n        newGroup.players = createdPlayers;\n        return groupConfirmation(newGroup.groupname, newGroup.players);\n      })\n      .then(() => {\n        setGroups((groups) => [...groups, newGroup]);\n        // Call server\n      })\n      .catch(() => {\n        return;\n      });\n  };\n\n  // Delete a group\n  const handleDelete = (groupname: string) => {\n    Swal.fire({\n      title: \"Are you sure?\",\n      text: `You won't be able to revert deleting ${groupname}!`,\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonText: \"Yes, delete it!\",\n      focusConfirm: false,\n      focusCancel: true,\n      cancelButtonText: \"No, cancel!\",\n    }).then((result) => {\n      if (result.value) {\n        // Save old state\n        const prevGroups = [...groups];\n        // Update UI.\n        setGroups(\n          groups.filter((curGroup) => curGroup.groupname !== groupname)\n        );\n        console.log(\",Handle delete.\", groupname, groups);\n        // Call backend and revert if error.\n        const apiSuccess = true;\n        if (!apiSuccess) {\n          errorToast.fire({ text: \"The group was already deleted.\" });\n          setGroups(prevGroups);\n        }\n      }\n    });\n  };\n\n  // Rename a group\n  const handleRenameGroup = (oldName: string, newName: string) => {\n    // New name can't be the old name.\n\n    const newGroups: Group[] = [];\n    for (let curGroup of groups) {\n      const curName = curGroup.groupname;\n      // Check if the name is unique.\n      if (newName === curName) {\n        errorToast.fire({ text: \"Group name is not unique!\" });\n        return;\n      }\n      if (curName === oldName) {\n        // Modify old name.\n        newGroups.push({ ...curGroup, groupname: newName });\n      } else {\n        newGroups.push(curGroup);\n      }\n    }\n    setGroups(newGroups);\n    // Call server here.\n  };\n\n  // Rename a player.\n  const handleRenamePlayer = (oldPlayerId: string, newName: string) => {\n    // New name can't be the old name.\n    const newGroups: Group[] = [];\n    for (let curGroup of groups) {\n      let newPlayers = { ...curGroup.players };\n      if (newPlayers.has(oldPlayerId)) {\n        // Check if the name is unique.\n        let isDuplicate = false;\n        Array.from(newPlayers, ([key, value]) => {\n          if (key !== oldPlayerId && newName === value) {\n            errorToast.fire({ text: \"Group name is not unique!\" });\n            isDuplicate = true; // I don't think you can return from here.\n          }\n        });\n        if (isDuplicate) {\n          return;\n        }\n        newPlayers.set(oldPlayerId, newName);\n      }\n      newGroups.push({ ...curGroup, players: newPlayers });\n    }\n    setGroups(newGroups);\n    // Call server here.\n  };\n\n  let content: React.ReactNode;\n  if (groups.length == 0) {\n    content = (\n      <Typography align=\"center\">\n        Seems like you have no groups yet. Create one by clicking the button\n        below.\n      </Typography>\n    );\n  } else {\n    content = (\n      <List component=\"nav\" className={classes.root}>\n        {groups.map((group) => {\n          return (\n            <GroupListItem\n              key={group.groupname}\n              group={group}\n              onDelete={handleDelete}\n              onRenameGroup={handleRenameGroup}\n              onRenamePlayer={handleRenamePlayer}\n            />\n          );\n        })}\n      </List>\n    );\n  }\n  return (\n    <React.Fragment>\n      {content}\n      <Tooltip title=\"New Group\" arrow placement=\"top\">\n        <Fab\n          size=\"large\"\n          className={classes.fabButton}\n          aria-label=\"add\"\n          color=\"secondary\"\n          onClick={handleAdd}\n        >\n          <GroupAddRoundedIcon />\n        </Fab>\n      </Tooltip>\n    </React.Fragment>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}