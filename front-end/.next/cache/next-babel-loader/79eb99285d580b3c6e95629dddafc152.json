{"ast":null,"code":"var _jsxFileName = \"/Users/raphael/programming/web-projects/roundnet-stats/src/components/addComponents/AddGroupPlayers.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport Chip from \"@material-ui/core/Chip\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport FaceRoundedIcon from \"@material-ui/icons/FaceRounded\";\nimport AddRoundedIcon from \"@material-ui/icons/AddRounded\";\nexport const AddGroupPlayers = ({\n  players,\n  onAdd,\n  onDelete\n}) => {\n  const {\n    0: input,\n    1: setInput\n  } = useState(\"\");\n  const {\n    0: chips,\n    1: setChips\n  } = useState([]);\n\n  const handleClick = () => {\n    onAdd(input);\n    const newChips = [...chips, input];\n    setInput(\"\");\n    setChips(newChips);\n  };\n\n  const handleDelete = key => {\n    const playerName = players.get(key);\n    onDelete(key); // Call this to rerender. Not ideal.\n\n    setInput(\"\");\n    setChips(chips.filter(chip => {\n      return playerName !== chip;\n    }));\n  };\n\n  return __jsx(Grid, {\n    container: true,\n    direction: \"row\",\n    spacing: 2,\n    justify: \"center\",\n    alignItems: \"baseline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, __jsx(Typography, {\n    variant: \"h5\",\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, \"Add Players\")), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    container: true,\n    spacing: 2,\n    justify: \"space-around\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, Array.from(players, ([key, val]) => {\n    return __jsx(Grid, {\n      item: true,\n      key: key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }\n    }, __jsx(Chip, {\n      key: key,\n      label: val,\n      icon: __jsx(FaceRoundedIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 23\n        }\n      }),\n      onDelete: () => handleDelete(key),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 15\n      }\n    }));\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    container: true,\n    spacing: 2,\n    justify: \"space-around\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, __jsx(TextField, {\n    variant: \"outlined\",\n    margin: \"normal\",\n    required: true,\n    type: \"text\",\n    autoComplete: \"off\",\n    label: \"New Player\",\n    color: \"primary\",\n    helperText: \"Name has to be unique.\",\n    autoFocus: true,\n    value: input,\n    error: chips.indexOf(input) !== -1,\n    onChange: event => {\n      setInput(event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    endIcon: __jsx(AddRoundedIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 22\n      }\n    }),\n    disabled: chips.indexOf(input) !== -1 || input.length === 0,\n    onClick: () => handleClick(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, \"Add\"))));\n};","map":{"version":3,"sources":["/Users/raphael/programming/web-projects/roundnet-stats/src/components/addComponents/AddGroupPlayers.tsx"],"names":["React","useState","Chip","Grid","Typography","TextField","Button","FaceRoundedIcon","AddRoundedIcon","AddGroupPlayers","players","onAdd","onDelete","input","setInput","chips","setChips","handleClick","newChips","handleDelete","key","playerName","get","filter","chip","textAlign","Array","from","val","indexOf","event","target","value","length"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Chip from \"@material-ui/core/Chip\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport FaceRoundedIcon from \"@material-ui/icons/FaceRounded\";\nimport AddRoundedIcon from \"@material-ui/icons/AddRounded\";\nimport { Players, Team } from \"../../util/types\";\n\ninterface AddGroupPlayersProps {\n  players: Players;\n  onAdd: (name: string) => void;\n  onDelete: (id: string) => void;\n}\n\nexport const AddGroupPlayers: React.FC<AddGroupPlayersProps> = ({\n  players,\n  onAdd,\n  onDelete,\n}) => {\n  const [input, setInput] = useState(\"\");\n  const [chips, setChips] = useState<string[]>([]);\n\n  const handleClick = () => {\n    onAdd(input);\n    const newChips = [...chips, input];\n    setInput(\"\");\n    setChips(newChips);\n  };\n\n  const handleDelete = (key: string) => {\n    const playerName = players.get(key);\n    onDelete(key);\n    // Call this to rerender. Not ideal.\n    setInput(\"\");\n    setChips(\n      chips.filter((chip) => {\n        return playerName !== chip;\n      })\n    );\n  };\n\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      spacing={2}\n      justify=\"center\"\n      alignItems=\"baseline\"\n    >\n      <Grid item xs={12}>\n        <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\n          Add Players\n        </Typography>\n      </Grid>\n      <Grid\n        item\n        xs={12}\n        container\n        spacing={2}\n        justify=\"space-around\"\n        alignItems=\"center\"\n      >\n        {Array.from(players, ([key, val]) => {\n          return (\n            <Grid item key={key}>\n              <Chip\n                key={key}\n                label={val}\n                icon={<FaceRoundedIcon />}\n                onDelete={() => handleDelete(key)}\n              />\n            </Grid>\n          );\n        })}\n      </Grid>\n      <Grid\n        item\n        xs={12}\n        container\n        spacing={2}\n        justify=\"space-around\"\n        alignItems=\"center\"\n      >\n        <Grid item xs={6}>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            type=\"text\"\n            autoComplete=\"off\"\n            label=\"New Player\"\n            color=\"primary\"\n            helperText=\"Name has to be unique.\"\n            autoFocus\n            value={input}\n            error={chips.indexOf(input) !== -1}\n            onChange={(event) => {\n              setInput(event.target.value);\n            }}\n          />\n        </Grid>\n        <Grid item xs={6}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            endIcon={<AddRoundedIcon />}\n            disabled={chips.indexOf(input) !== -1 || input.length === 0}\n            onClick={() => handleClick()}\n          >\n            Add\n          </Button>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}