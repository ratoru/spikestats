{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/raphael/programming/web-projects/roundnet-stats/pages/stats/[groupname].tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport Swal from \"sweetalert2\";\nimport withReactContent from \"sweetalert2-react-content\";\nimport { MainBar } from \"../../components/MainBar\";\nimport { NavStats } from \"../../components/NavStats\";\nimport { GameTable } from \"../../components/GameTable\";\nimport { ServeTeam } from \"../../util/types\";\nimport { AddChips } from \"../../components/AddChips\";\nimport Typography from \"@material-ui/core/Typography\";\nexport default function Stats() {\n  _s();\n\n  var _this = this;\n\n  var router = useRouter();\n  var groupname = router.query.groupname; // For testing\n\n  var examplePlayers = new Map([[0, \"Raphael\"], [1, \"Alex\"], [2, \"Valentin\"], [3, \"Sonam\"], [4, \"Timon\"]]);\n  var exampleGames = [{\n    id: 0,\n    blueTeam: [4, 3],\n    redTeam: [1, 2],\n    score: [21, 17],\n    serve: ServeTeam.Blue,\n    date: new Date()\n  }, {\n    id: 1,\n    blueTeam: [0, 1],\n    redTeam: [3, 2],\n    score: [10, 21],\n    serve: ServeTeam.Red,\n    date: new Date()\n  }];\n\n  var _useState = useState(exampleGames),\n      games = _useState[0],\n      setGames = _useState[1];\n\n  var handleDelete = function handleDelete(id) {\n    console.log(\"Delete this game from the server.\", id);\n    setGames(games.filter(function (game) {\n      return game[\"id\"] !== id;\n    }));\n  };\n\n  var handleAdd = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var emptyTeamBlue, emptyTeamRed, selectedTeams, handleSelectPlayer, handleRemovePlayer, AddGameSwal, _yield$AddGameSwal$fi, finalSelection, dummyGame;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              emptyTeamBlue = [-1, -1];\n              emptyTeamRed = [-1, -1];\n              selectedTeams = {\n                blueTeam: emptyTeamBlue,\n                redTeam: emptyTeamRed\n              };\n\n              handleSelectPlayer = function handleSelectPlayer(id, isBlue) {\n                if (isBlue) {\n                  if (selectedTeams.blueTeam[0] === -1) {\n                    selectedTeams.blueTeam[0] = id;\n                  } else {\n                    selectedTeams.blueTeam[1] = id;\n                  }\n                } else {\n                  if (selectedTeams.redTeam[0] === -1) {\n                    selectedTeams.redTeam[0] = id;\n                  } else {\n                    selectedTeams.redTeam[1] = id;\n                  }\n                }\n              };\n\n              handleRemovePlayer = function handleRemovePlayer(id, isBlue) {\n                if (isBlue) {\n                  if (selectedTeams.blueTeam[0] === id) {\n                    selectedTeams.blueTeam[0] = -1;\n                  } else {\n                    selectedTeams.blueTeam[1] = -1;\n                  }\n                } else {\n                  if (selectedTeams.redTeam[0] === id) {\n                    selectedTeams.redTeam[0] = -1;\n                  } else {\n                    selectedTeams.redTeam[1] = -1;\n                  }\n                }\n              };\n\n              AddGameSwal = withReactContent(Swal); // I could also use preConfirm to check.\n\n              _context.next = 8;\n              return AddGameSwal.fire({\n                title: \"Choose Teams\",\n                html: __jsx(AddChips, {\n                  players: examplePlayers,\n                  teams: selectedTeams,\n                  onSelect: handleSelectPlayer,\n                  onDelete: handleRemovePlayer,\n                  __self: _this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 88,\n                    columnNumber: 9\n                  }\n                }),\n                showCancelButton: true,\n                progressSteps: [\"1\", \"2\", \"3\"],\n                currentProgressStep: \"0\",\n                preConfirm: function preConfirm() {\n                  if (selectedTeams.blueTeam[0] === -1 || selectedTeams.blueTeam[1] === -1 || selectedTeams.redTeam[0] === -1 || selectedTeams.redTeam[1] === -1) {\n                    AddGameSwal.showValidationMessage(\"You must select 4 players.\");\n                    return false;\n                  }\n\n                  return selectedTeams;\n                }\n              });\n\n            case 8:\n              _yield$AddGameSwal$fi = _context.sent;\n              finalSelection = _yield$AddGameSwal$fi.value;\n\n              if (finalSelection) {\n                _context.next = 12;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 12:\n              dummyGame = {\n                id: 5,\n                blueTeam: [1, 2],\n                redTeam: [3, 0],\n                score: [21, 10],\n                serve: ServeTeam.Blue,\n                date: new Date()\n              };\n              setGames(function (games) {\n                return [].concat(_toConsumableArray(games), [dummyGame]);\n              });\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleAdd() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var tab1 = __jsx(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 16\n    }\n  }, groupname);\n\n  var tab2 = __jsx(GameTable, {\n    onDelete: handleDelete,\n    games: games,\n    players: examplePlayers,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }\n  });\n\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 5\n    }\n  }, __jsx(MainBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }), __jsx(NavStats, {\n    tab1Content: tab1,\n    tab2Content: tab2,\n    onAdd: handleAdd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }));\n}\n\n_s(Stats, \"6diCFyUYGr4kNlhb1YHxAqzAqdg=\", false, function () {\n  return [useRouter];\n});\n\n_c = Stats;\n\nvar _c;\n\n$RefreshReg$(_c, \"Stats\");","map":{"version":3,"sources":["/Users/raphael/programming/web-projects/roundnet-stats/pages/stats/[groupname].tsx"],"names":["React","useState","useRouter","Swal","withReactContent","MainBar","NavStats","GameTable","ServeTeam","AddChips","Typography","Stats","router","groupname","query","examplePlayers","Map","exampleGames","id","blueTeam","redTeam","score","serve","Blue","date","Date","Red","games","setGames","handleDelete","console","log","filter","game","handleAdd","emptyTeamBlue","emptyTeamRed","selectedTeams","handleSelectPlayer","isBlue","handleRemovePlayer","AddGameSwal","fire","title","html","showCancelButton","progressSteps","currentProgressStep","preConfirm","showValidationMessage","finalSelection","value","dummyGame","tab1","tab2"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport Swal from \"sweetalert2\";\nimport withReactContent from \"sweetalert2-react-content\";\nimport { MainBar } from \"../../components/MainBar\";\nimport { NavStats } from \"../../components/NavStats\";\nimport { GameTable } from \"../../components/GameTable\";\nimport { Game, Players, ServeTeam, Team } from \"../../util/types\";\nimport { AddChips } from \"../../components/AddChips\";\nimport Typography from \"@material-ui/core/Typography\";\n\nexport default function Stats() {\n  const router = useRouter();\n  const { groupname } = router.query;\n\n  // For testing\n  const examplePlayers: Players = new Map([\n    [0, \"Raphael\"],\n    [1, \"Alex\"],\n    [2, \"Valentin\"],\n    [3, \"Sonam\"],\n    [4, \"Timon\"],\n  ]);\n\n  const exampleGames: Game[] = [\n    {\n      id: 0,\n      blueTeam: [4, 3],\n      redTeam: [1, 2],\n      score: [21, 17],\n      serve: ServeTeam.Blue,\n      date: new Date(),\n    },\n    {\n      id: 1,\n      blueTeam: [0, 1],\n      redTeam: [3, 2],\n      score: [10, 21],\n      serve: ServeTeam.Red,\n      date: new Date(),\n    },\n  ];\n  const [games, setGames] = useState(exampleGames);\n  const handleDelete = (id: number) => {\n    console.log(\"Delete this game from the server.\", id);\n    setGames(games.filter((game) => game[\"id\"] !== id));\n  };\n\n  const handleAdd = async () => {\n    const emptyTeamBlue: Team = [-1, -1];\n    const emptyTeamRed: Team = [-1, -1];\n    const selectedTeams = { blueTeam: emptyTeamBlue, redTeam: emptyTeamRed };\n    const handleSelectPlayer = (id: number, isBlue: boolean) => {\n      if (isBlue) {\n        if (selectedTeams.blueTeam[0] === -1) {\n          selectedTeams.blueTeam[0] = id;\n        } else {\n          selectedTeams.blueTeam[1] = id;\n        }\n      } else {\n        if (selectedTeams.redTeam[0] === -1) {\n          selectedTeams.redTeam[0] = id;\n        } else {\n          selectedTeams.redTeam[1] = id;\n        }\n      }\n    };\n    const handleRemovePlayer = (id: number, isBlue: boolean) => {\n      if (isBlue) {\n        if (selectedTeams.blueTeam[0] === id) {\n          selectedTeams.blueTeam[0] = -1;\n        } else {\n          selectedTeams.blueTeam[1] = -1;\n        }\n      } else {\n        if (selectedTeams.redTeam[0] === id) {\n          selectedTeams.redTeam[0] = -1;\n        } else {\n          selectedTeams.redTeam[1] = -1;\n        }\n      }\n    };\n    const AddGameSwal = withReactContent(Swal);\n    // I could also use preConfirm to check.\n    const { value: finalSelection } = await AddGameSwal.fire({\n      title: \"Choose Teams\",\n      html: (\n        <AddChips\n          players={examplePlayers}\n          teams={selectedTeams}\n          onSelect={handleSelectPlayer}\n          onDelete={handleRemovePlayer}\n        />\n      ),\n      showCancelButton: true,\n      progressSteps: [\"1\", \"2\", \"3\"],\n      currentProgressStep: \"0\",\n      preConfirm: () => {\n        if (\n          selectedTeams.blueTeam[0] === -1 ||\n          selectedTeams.blueTeam[1] === -1 ||\n          selectedTeams.redTeam[0] === -1 ||\n          selectedTeams.redTeam[1] === -1\n        ) {\n          AddGameSwal.showValidationMessage(\"You must select 4 players.\");\n          return false;\n        }\n        return selectedTeams;\n      },\n    });\n    if (!finalSelection) {\n      return;\n    }\n    const dummyGame: Game = {\n      id: 5,\n      blueTeam: [1, 2],\n      redTeam: [3, 0],\n      score: [21, 10],\n      serve: ServeTeam.Blue,\n      date: new Date(),\n    };\n    setGames((games) => [...games, dummyGame]);\n  };\n\n  const tab1 = <Typography>{groupname}</Typography>;\n  const tab2 = (\n    <GameTable onDelete={handleDelete} games={games} players={examplePlayers} />\n  );\n\n  return (\n    <React.Fragment>\n      <MainBar />\n      <NavStats tab1Content={tab1} tab2Content={tab2} onAdd={handleAdd} />\n    </React.Fragment>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}