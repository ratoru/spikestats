{"ast":null,"code":"var _jsxFileName = \"/Users/raphael/programming/web-projects/roundnet-stats/components/RegisterForm.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport Link from \"next/link\";\nimport Router from \"next/router\";\nimport { Formik, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Link as MuiLink } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\nimport PersonRoundedIcon from \"@material-ui/icons/PersonRounded\";\nimport LockRoundedIcon from \"@material-ui/icons/LockRounded\";\nimport VerifiedUserIcon from \"@material-ui/icons/VerifiedUser\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport { FormikField } from \"./common/FormikField\";\nimport { errorToast } from \"../util/swals\";\nconst useStyles = makeStyles({\n  root: {\n    background: \"#ECECEC\"\n  }\n});\nconst SignupSchema = Yup.object().shape({\n  username: Yup.string().min(3, \"Too short!\").max(30, \"Too long!\").required(\"Required!\"),\n  password: Yup.string().min(4, \"Too short!\").max(30, \"Too long!\").required(\"Required!\"),\n  confirmedPassword: Yup.string().test(\"equal\", \"Passwords do not match!\", function (v) {\n    // Don't use arrow functions\n    const ref = Yup.ref(\"password\");\n    return v !== this.resolve(ref);\n  })\n});\nexport const RegisterForm = () => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const initialValues = {\n    username: \"\",\n    password: \"\",\n    confirmedPassword: \"\"\n  };\n\n  const handleSubmit = values => {\n    // Call server HERE\n    const serversSuccess = true;\n\n    if (serversSuccess) {\n      Router.push(\"/groups\");\n    } else {\n      errorToast.fire();\n    }\n  };\n\n  return __jsx(Box, {\n    padding: 4,\n    maxWidth: \"sm\",\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, __jsx(Typography, {\n    component: \"h1\",\n    variant: \"h5\",\n    style: {\n      textAlign: \"left\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, \"Register\"), __jsx(Formik, {\n    initialValues: initialValues,\n    onSubmit: handleSubmit,\n    validationSchema: SignupSchema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, ({\n    dirty,\n    isValid\n  }) => {\n    return __jsx(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }, __jsx(FormikField, {\n      name: \"username\",\n      label: \"Username\",\n      icon: __jsx(PersonRoundedIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 23\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 15\n      }\n    }), __jsx(FormikField, {\n      name: \"password\",\n      label: \"Password\",\n      type: \"password\",\n      icon: __jsx(LockRoundedIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 23\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 15\n      }\n    }), __jsx(FormikField, {\n      name: \"confirmedPassword\",\n      label: \"Confirm Password\",\n      icon: __jsx(VerifiedUserIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 23\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 15\n      }\n    }), __jsx(Box, {\n      my: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 15\n      }\n    }, __jsx(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      disabled: !dirty || !isValid,\n      type: \"submit\",\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }\n    }, \"Register\")), __jsx(Link, {\n      href: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 15\n      }\n    }, __jsx(Typography, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }\n    }, __jsx(MuiLink, {\n      href: \"#\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 19\n      }\n    }, \"Login.\"))));\n  }));\n};","map":{"version":3,"sources":["/Users/raphael/programming/web-projects/roundnet-stats/components/RegisterForm.tsx"],"names":["React","Link","Router","Formik","Form","Yup","Typography","MuiLink","Button","Box","PersonRoundedIcon","LockRoundedIcon","VerifiedUserIcon","makeStyles","useTheme","FormikField","errorToast","useStyles","root","background","SignupSchema","object","shape","username","string","min","max","required","password","confirmedPassword","test","v","ref","resolve","RegisterForm","classes","theme","initialValues","handleSubmit","values","serversSuccess","push","fire","textAlign","dirty","isValid"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Link from \"next/link\";\nimport Router from \"next/router\";\nimport { Formik, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Link as MuiLink } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\nimport PersonRoundedIcon from \"@material-ui/icons/PersonRounded\";\nimport LockRoundedIcon from \"@material-ui/icons/LockRounded\";\nimport VerifiedUserIcon from \"@material-ui/icons/VerifiedUser\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport { FormikField } from \"./common/FormikField\";\nimport { errorToast } from \"../util/swals\";\n\nconst useStyles = makeStyles({\n  root: {\n    background: \"#ECECEC\",\n  },\n});\n\ninterface FormValues {\n  username: string;\n  password: string;\n  confirmedPassword: string;\n}\n\nconst SignupSchema = Yup.object().shape({\n  username: Yup.string()\n    .min(3, \"Too short!\")\n    .max(30, \"Too long!\")\n    .required(\"Required!\"),\n  password: Yup.string()\n    .min(4, \"Too short!\")\n    .max(30, \"Too long!\")\n    .required(\"Required!\"),\n  confirmedPassword: Yup.string().test(\n    \"equal\",\n    \"Passwords do not match!\",\n    function (v) {\n      // Don't use arrow functions\n      const ref = Yup.ref(\"password\");\n      return v !== this.resolve(ref);\n    }\n  ),\n});\n\nexport const RegisterForm: React.FC = () => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const initialValues: FormValues = {\n    username: \"\",\n    password: \"\",\n    confirmedPassword: \"\",\n  };\n\n  const handleSubmit = (values: FormValues): void => {\n    // Call server HERE\n    const serversSuccess = true;\n    if (serversSuccess) {\n      Router.push(\"/groups\");\n    } else {\n      errorToast.fire();\n    }\n  };\n\n  return (\n    <Box padding={4} maxWidth=\"sm\" className={classes.root}>\n      <Typography component=\"h1\" variant=\"h5\" style={{ textAlign: \"left\" }}>\n        Register\n      </Typography>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        validationSchema={SignupSchema}\n      >\n        {({ dirty, isValid }) => {\n          return (\n            <Form>\n              <FormikField\n                name=\"username\"\n                label=\"Username\"\n                icon={<PersonRoundedIcon />}\n              />\n              <FormikField\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                icon={<LockRoundedIcon />}\n              />\n              <FormikField\n                name=\"confirmedPassword\"\n                label=\"Confirm Password\"\n                icon={<VerifiedUserIcon />}\n              />\n              <Box my={2}>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  disabled={!dirty || !isValid}\n                  type=\"submit\"\n                  fullWidth\n                >\n                  Register\n                </Button>\n              </Box>\n              <Link href={\"/\"}>\n                <Typography>\n                  <MuiLink href=\"#\">Login.</MuiLink>\n                </Typography>\n              </Link>\n            </Form>\n          );\n        }}\n      </Formik>\n    </Box>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}