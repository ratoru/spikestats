{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16","program":"/Users/raphael/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","flate2","--edition=2018","/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-Cembed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"miniz_oxide\"","--cfg","feature=\"rust_backend\"","-C","metadata=4ed86fecc324be21","-C","extra-filename=-4ed86fecc324be21","--out-dir","/Users/raphael/programming/web-projects/roundnet-stats/back-end-stats/target/rls/debug/deps","-L","dependency=/Users/raphael/programming/web-projects/roundnet-stats/back-end-stats/target/rls/debug/deps","--extern","cfg_if=/Users/raphael/programming/web-projects/roundnet-stats/back-end-stats/target/rls/debug/deps/libcfg_if-d343bdad20b1cfd0.rmeta","--extern","crc32fast=/Users/raphael/programming/web-projects/roundnet-stats/back-end-stats/target/rls/debug/deps/libcrc32fast-fa5a62b3ba73452d.rmeta","--extern","libc=/Users/raphael/programming/web-projects/roundnet-stats/back-end-stats/target/rls/debug/deps/liblibc-a676bc9ffa8ffde0.rmeta","--extern","miniz_oxide=/Users/raphael/programming/web-projects/roundnet-stats/back-end-stats/target/rls/debug/deps/libminiz_oxide-32792f27ee22052d.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/raphael/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/raphael/programming/web-projects/roundnet-stats/back-end-stats/target/rls/debug/deps/libflate2-4ed86fecc324be21.rmeta"},"prelude":{"crate_id":{"name":"flate2","disambiguator":[683250374743186477,86872415864048502]},"crate_root":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src","external_crates":[{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[9505258173972014140,1687564053001788342]}},{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[11611887195329836898,18391061204127126749]}},{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[8031993392717489033,4124505603786489705]}},{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[15271802224688203332,8792150453795694033]}},{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[7165577602573969849,9858108452520037846]}},{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[14698847031314625437,491468730102695142]}},{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[13330479813603739683,6803795581109914288]}},{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[18059772732427324572,13387991576644447952]}},{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[10236583916794409636,10240650400930061727]}},{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[11381542376919589428,1099759283771964623]}},{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[362513579181741490,3555756610499304386]}},{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[1726896196391708128,17121846613634101866]}},{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15657039231647705578,5960932578145670068]}},{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[7592225372802278695,9789656229435184476]}},{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","num":15,"id":{"name":"crc32fast","disambiguator":[18036394029497512748,6243653671304783659]}},{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/ffi/mod.rs","num":16,"id":{"name":"cfg_if","disambiguator":[2882691960039253388,905378029989288621]}},{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/ffi/rust.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[4691091720739214545,17242568732050781448]}},{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/ffi/rust.rs","num":18,"id":{"name":"adler","disambiguator":[3951958716963684372,3815331174322533622]}}],"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":0,"byte_end":8512,"line_start":1,"line_end":234,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":778},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":4596,"byte_end":4599,"line_start":110,"line_end":110,"column_start":22,"column_end":25},"alias_span":null,"name":"Crc","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":783},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":4601,"byte_end":4610,"line_start":110,"line_end":110,"column_start":27,"column_end":36},"alias_span":null,"name":"CrcReader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":790},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":4612,"byte_end":4621,"line_start":110,"line_end":110,"column_start":38,"column_end":47},"alias_span":null,"name":"CrcWriter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":971},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":4643,"byte_end":4652,"line_start":111,"line_end":111,"column_start":20,"column_end":29},"alias_span":null,"name":"GzBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":955},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":4673,"byte_end":4681,"line_start":112,"line_end":112,"column_start":20,"column_end":28},"alias_span":null,"name":"GzHeader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":979},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":4704,"byte_end":4712,"line_start":113,"line_end":113,"column_start":22,"column_end":30},"alias_span":null,"name":"Compress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1050},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":4714,"byte_end":4727,"line_start":113,"line_end":113,"column_start":32,"column_end":45},"alias_span":null,"name":"CompressError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":983},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":4729,"byte_end":4739,"line_start":113,"line_end":113,"column_start":47,"column_end":57},"alias_span":null,"name":"Decompress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1045},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":4741,"byte_end":4756,"line_start":113,"line_end":113,"column_start":59,"column_end":74},"alias_span":null,"name":"DecompressError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1055},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":4758,"byte_end":4764,"line_start":113,"line_end":113,"column_start":76,"column_end":82},"alias_span":null,"name":"Status","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":987},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":4788,"byte_end":4801,"line_start":114,"line_end":114,"column_start":22,"column_end":35},"alias_span":null,"name":"FlushCompress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1016},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":4803,"byte_end":4818,"line_start":114,"line_end":114,"column_start":37,"column_end":52},"alias_span":null,"name":"FlushDecompress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":817},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":5120,"byte_end":5134,"line_start":130,"line_end":130,"column_start":35,"column_end":49},"alias_span":null,"name":"DeflateDecoder","value":"","parent":{"krate":0,"index":744}},{"kind":"Use","ref_id":{"krate":0,"index":811},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":5170,"byte_end":5184,"line_start":131,"line_end":131,"column_start":35,"column_end":49},"alias_span":null,"name":"DeflateEncoder","value":"","parent":{"krate":0,"index":744}},{"kind":"Use","ref_id":{"krate":0,"index":925},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":5215,"byte_end":5224,"line_start":132,"line_end":132,"column_start":30,"column_end":39},"alias_span":null,"name":"GzDecoder","value":"","parent":{"krate":0,"index":744}},{"kind":"Use","ref_id":{"krate":0,"index":919},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":5255,"byte_end":5264,"line_start":133,"line_end":133,"column_start":30,"column_end":39},"alias_span":null,"name":"GzEncoder","value":"","parent":{"krate":0,"index":744}},{"kind":"Use","ref_id":{"krate":0,"index":931},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":5295,"byte_end":5309,"line_start":134,"line_end":134,"column_start":30,"column_end":44},"alias_span":null,"name":"MultiGzDecoder","value":"","parent":{"krate":0,"index":744}},{"kind":"Use","ref_id":{"krate":0,"index":1103},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":5342,"byte_end":5353,"line_start":135,"line_end":135,"column_start":32,"column_end":43},"alias_span":null,"name":"ZlibDecoder","value":"","parent":{"krate":0,"index":744}},{"kind":"Use","ref_id":{"krate":0,"index":1097},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":5386,"byte_end":5397,"line_start":136,"line_end":136,"column_start":32,"column_end":43},"alias_span":null,"name":"ZlibEncoder","value":"","parent":{"krate":0,"index":744}},{"kind":"Use","ref_id":{"krate":0,"index":829},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":5622,"byte_end":5636,"line_start":144,"line_end":144,"column_start":36,"column_end":50},"alias_span":null,"name":"DeflateDecoder","value":"","parent":{"krate":0,"index":752}},{"kind":"Use","ref_id":{"krate":0,"index":823},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":5673,"byte_end":5687,"line_start":145,"line_end":145,"column_start":36,"column_end":50},"alias_span":null,"name":"DeflateEncoder","value":"","parent":{"krate":0,"index":752}},{"kind":"Use","ref_id":{"krate":0,"index":946},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":5719,"byte_end":5728,"line_start":146,"line_end":146,"column_start":31,"column_end":40},"alias_span":null,"name":"GzDecoder","value":"","parent":{"krate":0,"index":752}},{"kind":"Use","ref_id":{"krate":0,"index":937},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":5760,"byte_end":5769,"line_start":147,"line_end":147,"column_start":31,"column_end":40},"alias_span":null,"name":"GzEncoder","value":"","parent":{"krate":0,"index":752}},{"kind":"Use","ref_id":{"krate":0,"index":1115},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":5803,"byte_end":5814,"line_start":148,"line_end":148,"column_start":33,"column_end":44},"alias_span":null,"name":"ZlibDecoder","value":"","parent":{"krate":0,"index":752}},{"kind":"Use","ref_id":{"krate":0,"index":1109},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":5848,"byte_end":5859,"line_start":149,"line_end":149,"column_start":33,"column_end":44},"alias_span":null,"name":"ZlibEncoder","value":"","parent":{"krate":0,"index":752}},{"kind":"Use","ref_id":{"krate":0,"index":804},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":6094,"byte_end":6108,"line_start":157,"line_end":157,"column_start":38,"column_end":52},"alias_span":null,"name":"DeflateDecoder","value":"","parent":{"krate":0,"index":759}},{"kind":"Use","ref_id":{"krate":0,"index":797},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":6147,"byte_end":6161,"line_start":158,"line_end":158,"column_start":38,"column_end":52},"alias_span":null,"name":"DeflateEncoder","value":"","parent":{"krate":0,"index":759}},{"kind":"Use","ref_id":{"krate":0,"index":885},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":6195,"byte_end":6204,"line_start":159,"line_end":159,"column_start":33,"column_end":42},"alias_span":null,"name":"GzDecoder","value":"","parent":{"krate":0,"index":759}},{"kind":"Use","ref_id":{"krate":0,"index":876},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":6238,"byte_end":6247,"line_start":160,"line_end":160,"column_start":33,"column_end":42},"alias_span":null,"name":"GzEncoder","value":"","parent":{"krate":0,"index":759}},{"kind":"Use","ref_id":{"krate":0,"index":912},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":6281,"byte_end":6295,"line_start":161,"line_end":161,"column_start":33,"column_end":47},"alias_span":null,"name":"MultiGzDecoder","value":"","parent":{"krate":0,"index":759}},{"kind":"Use","ref_id":{"krate":0,"index":1090},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":6331,"byte_end":6342,"line_start":162,"line_end":162,"column_start":35,"column_end":46},"alias_span":null,"name":"ZlibDecoder","value":"","parent":{"krate":0,"index":759}},{"kind":"Use","ref_id":{"krate":0,"index":1083},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":6378,"byte_end":6389,"line_start":163,"line_end":163,"column_start":35,"column_end":46},"alias_span":null,"name":"ZlibEncoder","value":"","parent":{"krate":0,"index":759}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":0,"byte_end":8512,"line_start":1,"line_end":234,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":49},{"krate":0,"index":91},{"krate":0,"index":225},{"krate":0,"index":244},{"krate":0,"index":504},{"krate":0,"index":545},{"krate":0,"index":611},{"krate":0,"index":744},{"krate":0,"index":752},{"krate":0,"index":759},{"krate":0,"index":767},{"krate":0,"index":1121},{"krate":0,"index":1135},{"krate":0,"index":1133},{"krate":0,"index":1129},{"krate":0,"index":1130},{"krate":0,"index":1126},{"krate":0,"index":1127},{"krate":0,"index":1124},{"krate":0,"index":770},{"krate":0,"index":776}],"decl_id":null,"docs":" A DEFLATE-based stream compression/decompression library","sig":null,"attributes":[{"value":"! A DEFLATE-based stream compression/decompression library","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":0,"byte_end":60,"line_start":1,"line_end":1,"column_start":1,"column_end":61}},{"value":"!","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":61,"byte_end":64,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! This library provides support for compression and decompression of","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":65,"byte_end":135,"line_start":3,"line_end":3,"column_start":1,"column_end":71}},{"value":"! DEFLATE-based streams:","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":136,"byte_end":162,"line_start":4,"line_end":4,"column_start":1,"column_end":27}},{"value":"!","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":163,"byte_end":166,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! * the DEFLATE format itself","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":167,"byte_end":198,"line_start":6,"line_end":6,"column_start":1,"column_end":32}},{"value":"! * the zlib format","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":199,"byte_end":220,"line_start":7,"line_end":7,"column_start":1,"column_end":22}},{"value":"! * gzip","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":221,"byte_end":231,"line_start":8,"line_end":8,"column_start":1,"column_end":11}},{"value":"!","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":232,"byte_end":235,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! These three formats are all closely related and largely only differ in their","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":236,"byte_end":316,"line_start":10,"line_end":10,"column_start":1,"column_end":81}},{"value":"! headers/footers. This crate has three types in each submodule for dealing","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":317,"byte_end":394,"line_start":11,"line_end":11,"column_start":1,"column_end":78}},{"value":"! with these three formats.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":395,"byte_end":424,"line_start":12,"line_end":12,"column_start":1,"column_end":30}},{"value":"!","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":425,"byte_end":428,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"! # Implementation","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":429,"byte_end":449,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"!","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":450,"byte_end":453,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! In addition to supporting three formats, this crate supports three different","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":454,"byte_end":534,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"! backends, controlled through this crate's features:","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":535,"byte_end":590,"line_start":17,"line_end":17,"column_start":1,"column_end":56}},{"value":"!","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":591,"byte_end":594,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"! * `default`, or `rust_backend` - this implementation uses the `miniz_oxide`","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":595,"byte_end":674,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"!   crate which is a port of `miniz.c` (below) to Rust. This feature does not","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":675,"byte_end":754,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"!   require a C compiler and only requires Rust code.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":755,"byte_end":810,"line_start":21,"line_end":21,"column_start":1,"column_end":56}},{"value":"!","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":811,"byte_end":814,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"! * `miniz-sys` - when enabled this feature will enable this crate to instead","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":815,"byte_end":894,"line_start":23,"line_end":23,"column_start":1,"column_end":80}},{"value":"!   use `miniz.c`, distributed with `miniz-sys`, to implement","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":895,"byte_end":958,"line_start":24,"line_end":24,"column_start":1,"column_end":64}},{"value":"!   compression/decompression.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":959,"byte_end":991,"line_start":25,"line_end":25,"column_start":1,"column_end":33}},{"value":"!","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":992,"byte_end":995,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"! * `zlib` - finally, this feature will enable linking against the `libz`","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":996,"byte_end":1071,"line_start":27,"line_end":27,"column_start":1,"column_end":76}},{"value":"!   library, typically found on most Linux systems by default. If the library","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":1072,"byte_end":1151,"line_start":28,"line_end":28,"column_start":1,"column_end":80}},{"value":"!   isn't found to already be on the system it will be compiled from source","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":1152,"byte_end":1229,"line_start":29,"line_end":29,"column_start":1,"column_end":78}},{"value":"!   (this is a C library).","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":1230,"byte_end":1258,"line_start":30,"line_end":30,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":1259,"byte_end":1262,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"! There's various tradeoffs associated with each implementation, but in","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":1263,"byte_end":1336,"line_start":32,"line_end":32,"column_start":1,"column_end":74}},{"value":"! general you probably won't have to tweak the defaults. The default choice is","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":1337,"byte_end":1417,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"! selected to avoid the need for a C compiler at build time. The `miniz-sys`","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":1418,"byte_end":1496,"line_start":34,"line_end":34,"column_start":1,"column_end":79}},{"value":"! feature is largely a historical artifact at this point and is unlikely to be","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":1497,"byte_end":1577,"line_start":35,"line_end":35,"column_start":1,"column_end":81}},{"value":"! needed, and `zlib` is often useful if you're already using `zlib` for other","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":1578,"byte_end":1657,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"! C dependencies. The compression ratios and performance of each of these","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":1658,"byte_end":1733,"line_start":37,"line_end":37,"column_start":1,"column_end":76}},{"value":"! feature should be roughly comparable, but you'll likely want to run your own","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":1734,"byte_end":1814,"line_start":38,"line_end":38,"column_start":1,"column_end":81}},{"value":"! tests if you're curious about the performance.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":1815,"byte_end":1865,"line_start":39,"line_end":39,"column_start":1,"column_end":51}},{"value":"!","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":1866,"byte_end":1869,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"! # Organization","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":1870,"byte_end":1888,"line_start":41,"line_end":41,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":1889,"byte_end":1892,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"! This crate consists mainly of three modules, [`read`], [`write`], and","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":1893,"byte_end":1966,"line_start":43,"line_end":43,"column_start":1,"column_end":74}},{"value":"! [`bufread`]. Each module contains a number of types used to encode and","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":1967,"byte_end":2041,"line_start":44,"line_end":44,"column_start":1,"column_end":75}},{"value":"! decode various streams of data.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":2042,"byte_end":2077,"line_start":45,"line_end":45,"column_start":1,"column_end":36}},{"value":"!","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":2078,"byte_end":2081,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"! All types in the [`write`] module work on instances of [`Write`][write],","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":2082,"byte_end":2158,"line_start":47,"line_end":47,"column_start":1,"column_end":77}},{"value":"! whereas all types in the [`read`] module work on instances of","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":2159,"byte_end":2224,"line_start":48,"line_end":48,"column_start":1,"column_end":66}},{"value":"! [`Read`][read] and [`bufread`] works with [`BufRead`][bufread]. If you","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":2225,"byte_end":2299,"line_start":49,"line_end":49,"column_start":1,"column_end":75}},{"value":"! are decoding directly from a `&[u8]`, use the [`bufread`] types.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":2300,"byte_end":2368,"line_start":50,"line_end":50,"column_start":1,"column_end":69}},{"value":"!","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":2369,"byte_end":2372,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"! ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":2373,"byte_end":2380,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"! use flate2::write::GzEncoder;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":2381,"byte_end":2414,"line_start":53,"line_end":53,"column_start":1,"column_end":34}},{"value":"! use flate2::Compression;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":2415,"byte_end":2443,"line_start":54,"line_end":54,"column_start":1,"column_end":29}},{"value":"! use std::io;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":2444,"byte_end":2460,"line_start":55,"line_end":55,"column_start":1,"column_end":17}},{"value":"! use std::io::prelude::*;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":2461,"byte_end":2489,"line_start":56,"line_end":56,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":2490,"byte_end":2493,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"! # fn main() { let _ = run(); }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":2494,"byte_end":2528,"line_start":58,"line_end":58,"column_start":1,"column_end":35}},{"value":"! # fn run() -> io::Result<()> {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":2529,"byte_end":2563,"line_start":59,"line_end":59,"column_start":1,"column_end":35}},{"value":"! let mut encoder = GzEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":2564,"byte_end":2637,"line_start":60,"line_end":60,"column_start":1,"column_end":74}},{"value":"! encoder.write_all(b\"Example\")?;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":2638,"byte_end":2673,"line_start":61,"line_end":61,"column_start":1,"column_end":36}},{"value":"! # Ok(())","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":2674,"byte_end":2686,"line_start":62,"line_end":62,"column_start":1,"column_end":13}},{"value":"! # }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":2687,"byte_end":2694,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"! ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":2695,"byte_end":2702,"line_start":64,"line_end":64,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":2703,"byte_end":2706,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"!","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":2707,"byte_end":2710,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"! Other various types are provided at the top-level of the crate for","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":2711,"byte_end":2781,"line_start":67,"line_end":67,"column_start":1,"column_end":71}},{"value":"! management and dealing with encoders/decoders. Also note that types which","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":2782,"byte_end":2859,"line_start":68,"line_end":68,"column_start":1,"column_end":78}},{"value":"! operate over a specific trait often implement the mirroring trait as well.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":2860,"byte_end":2938,"line_start":69,"line_end":69,"column_start":1,"column_end":79}},{"value":"! For example a `flate2::read::DeflateDecoder<T>` *also* implements the","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":2939,"byte_end":3012,"line_start":70,"line_end":70,"column_start":1,"column_end":74}},{"value":"! `Write` trait if `T: Write`. That is, the \"dual trait\" is forwarded directly","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":3013,"byte_end":3093,"line_start":71,"line_end":71,"column_start":1,"column_end":81}},{"value":"! to the underlying object if available.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":3094,"byte_end":3136,"line_start":72,"line_end":72,"column_start":1,"column_end":43}},{"value":"!","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":3137,"byte_end":3140,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"! [`read`]: read/index.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":3141,"byte_end":3170,"line_start":74,"line_end":74,"column_start":1,"column_end":30}},{"value":"! [`bufread`]: bufread/index.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":3171,"byte_end":3206,"line_start":75,"line_end":75,"column_start":1,"column_end":36}},{"value":"! [`write`]: write/index.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":3207,"byte_end":3238,"line_start":76,"line_end":76,"column_start":1,"column_end":32}},{"value":"! [read]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":3239,"byte_end":3299,"line_start":77,"line_end":77,"column_start":1,"column_end":61}},{"value":"! [write]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":3300,"byte_end":3362,"line_start":78,"line_end":78,"column_start":1,"column_end":63}},{"value":"! [bufread]: https://doc.rust-lang.org/std/io/trait.BufRead.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":3363,"byte_end":3429,"line_start":79,"line_end":79,"column_start":1,"column_end":67}},{"value":"!","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":3430,"byte_end":3433,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"! # Async I/O","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":3434,"byte_end":3449,"line_start":81,"line_end":81,"column_start":1,"column_end":16}},{"value":"!","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":3450,"byte_end":3453,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"! This crate optionally can support async I/O streams with the [Tokio stack] via","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":3454,"byte_end":3536,"line_start":83,"line_end":83,"column_start":1,"column_end":83}},{"value":"! the `tokio` feature of this crate:","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":3537,"byte_end":3575,"line_start":84,"line_end":84,"column_start":1,"column_end":39}},{"value":"!","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":3576,"byte_end":3579,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"! [Tokio stack]: https://tokio.rs/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":3580,"byte_end":3616,"line_start":86,"line_end":86,"column_start":1,"column_end":37}},{"value":"!","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":3617,"byte_end":3620,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"! ```toml","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":3621,"byte_end":3632,"line_start":88,"line_end":88,"column_start":1,"column_end":12}},{"value":"! flate2 = { version = \"0.2\", features = [\"tokio\"] }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":3633,"byte_end":3687,"line_start":89,"line_end":89,"column_start":1,"column_end":55}},{"value":"! ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":3688,"byte_end":3695,"line_start":90,"line_end":90,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":3696,"byte_end":3699,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"! All methods are internally capable of working with streams that may return","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":3700,"byte_end":3778,"line_start":92,"line_end":92,"column_start":1,"column_end":79}},{"value":"! [`ErrorKind::WouldBlock`] when they're not ready to perform the particular","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":3779,"byte_end":3857,"line_start":93,"line_end":93,"column_start":1,"column_end":79}},{"value":"! operation.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":3858,"byte_end":3872,"line_start":94,"line_end":94,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":3873,"byte_end":3876,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"! [`ErrorKind::WouldBlock`]: https://doc.rust-lang.org/std/io/enum.ErrorKind.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":3877,"byte_end":3960,"line_start":96,"line_end":96,"column_start":1,"column_end":84}},{"value":"!","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":3961,"byte_end":3964,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"! Note that care needs to be taken when using these objects, however. The","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":3965,"byte_end":4040,"line_start":98,"line_end":98,"column_start":1,"column_end":76}},{"value":"! Tokio runtime, in particular, requires that data is fully flushed before","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":4041,"byte_end":4117,"line_start":99,"line_end":99,"column_start":1,"column_end":77}},{"value":"! dropping streams. For compatibility with blocking streams all streams are","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":4118,"byte_end":4195,"line_start":100,"line_end":100,"column_start":1,"column_end":78}},{"value":"! flushed/written when they are dropped, and this is not always a suitable","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":4196,"byte_end":4272,"line_start":101,"line_end":101,"column_start":1,"column_end":77}},{"value":"! time to perform I/O. If I/O streams are flushed before drop, however, then","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":4273,"byte_end":4351,"line_start":102,"line_end":102,"column_start":1,"column_end":79}},{"value":"! these operations will be a noop.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":4352,"byte_end":4388,"line_start":103,"line_end":103,"column_start":1,"column_end":37}},{"value":"deny(missing_docs)","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":4443,"byte_end":4465,"line_start":105,"line_end":105,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":4466,"byte_end":4505,"line_start":106,"line_end":106,"column_start":1,"column_end":40}},{"value":"allow(trivial_numeric_casts)","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":4506,"byte_end":4538,"line_start":107,"line_end":107,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":778},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":11531,"byte_end":11534,"line_start":12,"line_end":12,"column_start":12,"column_end":15},"name":"Crc","qualname":"::crc::Crc","value":"Crc {  }","parent":null,"children":[{"krate":0,"index":779},{"krate":0,"index":780}],"decl_id":null,"docs":" The CRC calculated by a [`CrcReader`].","sig":null,"attributes":[{"value":"/ The CRC calculated by a [`CrcReader`].","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":11415,"byte_end":11457,"line_start":8,"line_end":8,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":11458,"byte_end":11461,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [`CrcReader`]: struct.CrcReader.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":11462,"byte_end":11502,"line_start":10,"line_end":10,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":783},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":11726,"byte_end":11735,"line_start":21,"line_end":21,"column_start":12,"column_end":21},"name":"CrcReader","qualname":"::crc::CrcReader","value":"CrcReader {  }","parent":null,"children":[{"krate":0,"index":785},{"krate":0,"index":786}],"decl_id":null,"docs":" A wrapper around a [`Read`] that calculates the CRC.","sig":null,"attributes":[{"value":"/ A wrapper around a [`Read`] that calculates the CRC.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":11574,"byte_end":11630,"line_start":17,"line_end":17,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":11631,"byte_end":11634,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":11635,"byte_end":11697,"line_start":19,"line_end":19,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":11820,"byte_end":11823,"line_start":28,"line_end":28,"column_start":12,"column_end":15},"name":"new","qualname":"<Crc>::new","value":"fn () -> Crc","parent":null,"children":[],"decl_id":null,"docs":" Create a new CRC.\n","sig":null,"attributes":[{"value":"/ Create a new CRC.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":11787,"byte_end":11808,"line_start":27,"line_end":27,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":11976,"byte_end":11979,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"sum","qualname":"<Crc>::sum","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the current crc32 checksum.\n","sig":null,"attributes":[{"value":"/ Returns the current crc32 checksum.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":11925,"byte_end":11964,"line_start":35,"line_end":35,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":12203,"byte_end":12209,"line_start":42,"line_end":42,"column_start":12,"column_end":18},"name":"amount","qualname":"<Crc>::amount","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The number of bytes that have been used to calculate the CRC.\n This value is only accurate if the amount is lower than 2<sup>32</sup>.\n","sig":null,"attributes":[{"value":"/ The number of bytes that have been used to calculate the CRC.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":12046,"byte_end":12111,"line_start":40,"line_end":40,"column_start":5,"column_end":70}},{"value":"/ This value is only accurate if the amount is lower than 2<sup>32</sup>.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":12116,"byte_end":12191,"line_start":41,"line_end":41,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":12310,"byte_end":12316,"line_start":47,"line_end":47,"column_start":12,"column_end":18},"name":"update","qualname":"<Crc>::update","value":"fn (&mut self, data: &[u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Update the CRC with the bytes in `data`.\n","sig":null,"attributes":[{"value":"/ Update the CRC with the bytes in `data`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":12254,"byte_end":12298,"line_start":46,"line_end":46,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":12479,"byte_end":12484,"line_start":53,"line_end":53,"column_start":12,"column_end":17},"name":"reset","qualname":"<Crc>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset the CRC.\n","sig":null,"attributes":[{"value":"/ Reset the CRC.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":12449,"byte_end":12467,"line_start":52,"line_end":52,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":12639,"byte_end":12646,"line_start":59,"line_end":59,"column_start":12,"column_end":19},"name":"combine","qualname":"<Crc>::combine","value":"fn (&mut self, additional_crc: &Crc) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Combine the CRC with the CRC for the subsequent block of bytes.\n","sig":null,"attributes":[{"value":"/ Combine the CRC with the CRC for the subsequent block of bytes.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":12560,"byte_end":12627,"line_start":58,"line_end":58,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":12856,"byte_end":12859,"line_start":67,"line_end":67,"column_start":12,"column_end":15},"name":"new","qualname":"<CrcReader<R>>::new","value":"fn (r: R) -> CrcReader<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new CrcReader.\n","sig":null,"attributes":[{"value":"/ Create a new CrcReader.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":12817,"byte_end":12844,"line_start":66,"line_end":66,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":13048,"byte_end":13051,"line_start":77,"line_end":77,"column_start":12,"column_end":15},"name":"crc","qualname":"<CrcReader<R>>::crc","value":"fn (&self) -> &Crc","parent":null,"children":[],"decl_id":null,"docs":" Get the Crc for this CrcReader.\n","sig":null,"attributes":[{"value":"/ Get the Crc for this CrcReader.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":13001,"byte_end":13036,"line_start":76,"line_end":76,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":13163,"byte_end":13173,"line_start":82,"line_end":82,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<CrcReader<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Get the reader that is wrapped by this CrcReader.\n","sig":null,"attributes":[{"value":"/ Get the reader that is wrapped by this CrcReader.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":13098,"byte_end":13151,"line_start":81,"line_end":81,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":13295,"byte_end":13302,"line_start":87,"line_end":87,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<CrcReader<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Get the reader that is wrapped by this CrcReader by reference.\n","sig":null,"attributes":[{"value":"/ Get the reader that is wrapped by this CrcReader by reference.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":13217,"byte_end":13283,"line_start":86,"line_end":86,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":13437,"byte_end":13444,"line_start":92,"line_end":92,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<CrcReader<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the reader that is wrapped by this CrcReader.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to the reader that is wrapped by this CrcReader.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":13349,"byte_end":13425,"line_start":91,"line_end":91,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":13551,"byte_end":13556,"line_start":97,"line_end":97,"column_start":12,"column_end":17},"name":"reset","qualname":"<CrcReader<R>>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset the Crc in this CrcReader.\n","sig":null,"attributes":[{"value":"/ Reset the Crc in this CrcReader.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":13503,"byte_end":13539,"line_start":96,"line_end":96,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":790},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":14282,"byte_end":14291,"line_start":126,"line_end":126,"column_start":12,"column_end":21},"name":"CrcWriter","qualname":"::crc::CrcWriter","value":"CrcWriter {  }","parent":null,"children":[{"krate":0,"index":792},{"krate":0,"index":793}],"decl_id":null,"docs":" A wrapper around a [`Write`] that calculates the CRC.","sig":null,"attributes":[{"value":"/ A wrapper around a [`Write`] that calculates the CRC.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":14127,"byte_end":14184,"line_start":122,"line_end":122,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":14185,"byte_end":14188,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":14189,"byte_end":14253,"line_start":124,"line_end":124,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":14402,"byte_end":14405,"line_start":133,"line_end":133,"column_start":12,"column_end":15},"name":"crc","qualname":"<CrcWriter<W>>::crc","value":"fn (&self) -> &Crc","parent":null,"children":[],"decl_id":null,"docs":" Get the Crc for this CrcWriter.\n","sig":null,"attributes":[{"value":"/ Get the Crc for this CrcWriter.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":14355,"byte_end":14390,"line_start":132,"line_end":132,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":14517,"byte_end":14527,"line_start":138,"line_end":138,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<CrcWriter<W>>::into_inner","value":"fn (self) -> W","parent":null,"children":[],"decl_id":null,"docs":" Get the writer that is wrapped by this CrcWriter.\n","sig":null,"attributes":[{"value":"/ Get the writer that is wrapped by this CrcWriter.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":14452,"byte_end":14505,"line_start":137,"line_end":137,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":14649,"byte_end":14656,"line_start":143,"line_end":143,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<CrcWriter<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Get the writer that is wrapped by this CrcWriter by reference.\n","sig":null,"attributes":[{"value":"/ Get the writer that is wrapped by this CrcWriter by reference.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":14571,"byte_end":14637,"line_start":142,"line_end":142,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":14791,"byte_end":14798,"line_start":148,"line_end":148,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<CrcWriter<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the writer that is wrapped by this CrcWriter.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to the writer that is wrapped by this CrcWriter.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":14703,"byte_end":14779,"line_start":147,"line_end":147,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":14905,"byte_end":14910,"line_start":153,"line_end":153,"column_start":12,"column_end":17},"name":"reset","qualname":"<CrcWriter<W>>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset the Crc in this CrcWriter.\n","sig":null,"attributes":[{"value":"/ Reset the Crc in this CrcWriter.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":14857,"byte_end":14893,"line_start":152,"line_end":152,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":15032,"byte_end":15035,"line_start":160,"line_end":160,"column_start":12,"column_end":15},"name":"new","qualname":"<CrcWriter<W>>::new","value":"fn (w: W) -> CrcWriter<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new CrcWriter.\n","sig":null,"attributes":[{"value":"/ Create a new CrcWriter.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":14993,"byte_end":15020,"line_start":159,"line_end":159,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":797},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":22829,"byte_end":22843,"line_start":45,"line_end":45,"column_start":12,"column_end":26},"name":"DeflateEncoder","qualname":"::deflate::bufread::DeflateEncoder","value":"DeflateEncoder {  }","parent":null,"children":[{"krate":0,"index":799},{"krate":0,"index":800}],"decl_id":null,"docs":" A DEFLATE encoder, or compressor.","sig":null,"attributes":[{"value":"/ A DEFLATE encoder, or compressor.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":21848,"byte_end":21885,"line_start":13,"line_end":13,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":21886,"byte_end":21889,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`BufRead`] interface and will read uncompressed","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":21890,"byte_end":21970,"line_start":15,"line_end":15,"column_start":1,"column_end":81}},{"value":"/ data from an underlying stream and emit a stream of compressed data.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":21971,"byte_end":22043,"line_start":16,"line_end":16,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":22044,"byte_end":22047,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ [`BufRead`]: https://doc.rust-lang.org/std/io/trait.BufRead.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":22048,"byte_end":22116,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":22117,"byte_end":22120,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":22121,"byte_end":22135,"line_start":20,"line_end":20,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":22136,"byte_end":22139,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":22140,"byte_end":22147,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":22148,"byte_end":22176,"line_start":23,"line_end":23,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":22177,"byte_end":22193,"line_start":24,"line_end":24,"column_start":1,"column_end":17}},{"value":"/ use flate2::Compression;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":22194,"byte_end":22222,"line_start":25,"line_end":25,"column_start":1,"column_end":29}},{"value":"/ use flate2::bufread::DeflateEncoder;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":22223,"byte_end":22263,"line_start":26,"line_end":26,"column_start":1,"column_end":41}},{"value":"/ use std::fs::File;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":22264,"byte_end":22286,"line_start":27,"line_end":27,"column_start":1,"column_end":23}},{"value":"/ use std::io::BufReader;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":22287,"byte_end":22314,"line_start":28,"line_end":28,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":22315,"byte_end":22318,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":22319,"byte_end":22336,"line_start":30,"line_end":30,"column_start":1,"column_end":18}},{"value":"/ #    println!(\"{:?}\", open_hello_world().unwrap());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":22337,"byte_end":22392,"line_start":31,"line_end":31,"column_start":1,"column_end":56}},{"value":"/ # }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":22393,"byte_end":22400,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":22401,"byte_end":22406,"line_start":33,"line_end":33,"column_start":1,"column_end":6}},{"value":"/ // Opens sample file, compresses the contents and returns a Vector","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":22407,"byte_end":22477,"line_start":34,"line_end":34,"column_start":1,"column_end":71}},{"value":"/ fn open_hello_world() -> io::Result<Vec<u8>> {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":22478,"byte_end":22528,"line_start":35,"line_end":35,"column_start":1,"column_end":51}},{"value":"/    let f = File::open(\"examples/hello_world.txt\")?;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":22529,"byte_end":22584,"line_start":36,"line_end":36,"column_start":1,"column_end":56}},{"value":"/    let b = BufReader::new(f);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":22585,"byte_end":22618,"line_start":37,"line_end":37,"column_start":1,"column_end":34}},{"value":"/    let mut deflater = DeflateEncoder::new(b, Compression::fast());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":22619,"byte_end":22689,"line_start":38,"line_end":38,"column_start":1,"column_end":71}},{"value":"/    let mut buffer = Vec::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":22690,"byte_end":22725,"line_start":39,"line_end":39,"column_start":1,"column_end":36}},{"value":"/    deflater.read_to_end(&mut buffer)?;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":22726,"byte_end":22768,"line_start":40,"line_end":40,"column_start":1,"column_end":43}},{"value":"/    Ok(buffer)","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":22769,"byte_end":22786,"line_start":41,"line_end":41,"column_start":1,"column_end":18}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":22787,"byte_end":22792,"line_start":42,"line_end":42,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":22793,"byte_end":22800,"line_start":43,"line_end":43,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":23058,"byte_end":23061,"line_start":53,"line_end":53,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateEncoder<R>>::new","value":"fn (r: R, level: crate::Compression) -> DeflateEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder which will read uncompressed data from the given","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":22925,"byte_end":22999,"line_start":51,"line_end":51,"column_start":5,"column_end":79}},{"value":"/ stream and emit the compressed stream.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":23004,"byte_end":23046,"line_start":52,"line_end":52,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":23727,"byte_end":23732,"line_start":73,"line_end":73,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateEncoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this encoder entirely, swapping out the input","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":23348,"byte_end":23417,"line_start":66,"line_end":66,"column_start":5,"column_end":74}},{"value":"/ stream for another.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":23422,"byte_end":23445,"line_start":67,"line_end":67,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":23450,"byte_end":23453,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ This function will reset the internal state of this encoder and replace","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":23458,"byte_end":23533,"line_start":69,"line_end":69,"column_start":5,"column_end":80}},{"value":"/ the input stream with the one provided, returning the previous input","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":23538,"byte_end":23610,"line_start":70,"line_end":70,"column_start":5,"column_end":77}},{"value":"/ stream. Future data read from this encoder will be the compressed","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":23615,"byte_end":23684,"line_start":71,"line_end":71,"column_start":5,"column_end":74}},{"value":"/ version of `r`'s data.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":23689,"byte_end":23715,"line_start":72,"line_end":72,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":23902,"byte_end":23909,"line_start":79,"line_end":79,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateEncoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying reader","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":23841,"byte_end":23890,"line_start":78,"line_end":78,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":24154,"byte_end":24161,"line_start":87,"line_end":87,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateEncoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":23954,"byte_end":24011,"line_start":83,"line_end":83,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":24016,"byte_end":24019,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":24024,"byte_end":24096,"line_start":85,"line_end":85,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":24101,"byte_end":24142,"line_start":86,"line_end":86,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":24289,"byte_end":24299,"line_start":92,"line_end":92,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateEncoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.\n","sig":null,"attributes":[{"value":"/ Consumes this encoder, returning the underlying reader.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":24218,"byte_end":24277,"line_start":91,"line_end":91,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":24570,"byte_end":24578,"line_start":100,"line_end":100,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateEncoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been read into this compressor.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that have been read into this compressor.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":24341,"byte_end":24414,"line_start":96,"line_end":96,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":24419,"byte_end":24422,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes read from the underlying object may be accounted","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":24427,"byte_end":24503,"line_start":98,"line_end":98,"column_start":5,"column_end":81}},{"value":"/ for, there may still be some active buffering.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":24508,"byte_end":24558,"line_start":99,"line_end":99,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":24812,"byte_end":24821,"line_start":108,"line_end":108,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateEncoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the compressor has produced.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":24635,"byte_end":24700,"line_start":104,"line_end":104,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":24705,"byte_end":24708,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes may have been read yet, some may still be","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":24713,"byte_end":24782,"line_start":106,"line_end":106,"column_start":5,"column_end":74}},{"value":"/ buffered.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":24787,"byte_end":24800,"line_start":107,"line_end":107,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":804},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":26646,"byte_end":26660,"line_start":171,"line_end":171,"column_start":12,"column_end":26},"name":"DeflateDecoder","qualname":"::deflate::bufread::DeflateDecoder","value":"DeflateDecoder {  }","parent":null,"children":[{"krate":0,"index":806},{"krate":0,"index":807}],"decl_id":null,"docs":" A DEFLATE decoder, or decompressor.","sig":null,"attributes":[{"value":"/ A DEFLATE decoder, or decompressor.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":25564,"byte_end":25603,"line_start":139,"line_end":139,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":25604,"byte_end":25607,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`BufRead`] interface and takes a stream of","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":25608,"byte_end":25683,"line_start":141,"line_end":141,"column_start":1,"column_end":76}},{"value":"/ compressed data as input, providing the decompressed data when read from.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":25684,"byte_end":25761,"line_start":142,"line_end":142,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":25762,"byte_end":25765,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ [`BufRead`]: https://doc.rust-lang.org/std/io/trait.BufRead.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":25766,"byte_end":25834,"line_start":144,"line_end":144,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":25835,"byte_end":25838,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":25839,"byte_end":25853,"line_start":146,"line_end":146,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":25854,"byte_end":25857,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":25858,"byte_end":25865,"line_start":148,"line_end":148,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":25866,"byte_end":25894,"line_start":149,"line_end":149,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":25895,"byte_end":25911,"line_start":150,"line_end":150,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":25912,"byte_end":25942,"line_start":151,"line_end":151,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::DeflateEncoder;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":25943,"byte_end":25983,"line_start":152,"line_end":152,"column_start":1,"column_end":41}},{"value":"/ use flate2::bufread::DeflateDecoder;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":25984,"byte_end":26024,"line_start":153,"line_end":153,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":26025,"byte_end":26028,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":26029,"byte_end":26046,"line_start":155,"line_end":155,"column_start":1,"column_end":18}},{"value":"/ #    let mut e = DeflateEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":26047,"byte_end":26124,"line_start":156,"line_end":156,"column_start":1,"column_end":78}},{"value":"/ #    e.write_all(b\"Hello World\").unwrap();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":26125,"byte_end":26171,"line_start":157,"line_end":157,"column_start":1,"column_end":47}},{"value":"/ #    let bytes = e.finish().unwrap();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":26172,"byte_end":26213,"line_start":158,"line_end":158,"column_start":1,"column_end":42}},{"value":"/ #    println!(\"{}\", decode_reader(bytes).unwrap());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":26214,"byte_end":26269,"line_start":159,"line_end":159,"column_start":1,"column_end":56}},{"value":"/ # }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":26270,"byte_end":26277,"line_start":160,"line_end":160,"column_start":1,"column_end":8}},{"value":"/ // Uncompresses a Deflate Encoded vector of bytes and returns a string or error","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":26278,"byte_end":26361,"line_start":161,"line_end":161,"column_start":1,"column_end":84}},{"value":"/ // Here &[u8] implements Read","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":26362,"byte_end":26395,"line_start":162,"line_end":162,"column_start":1,"column_end":34}},{"value":"/ fn decode_reader(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":26396,"byte_end":26456,"line_start":163,"line_end":163,"column_start":1,"column_end":61}},{"value":"/    let mut deflater = DeflateDecoder::new(&bytes[..]);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":26457,"byte_end":26515,"line_start":164,"line_end":164,"column_start":1,"column_end":59}},{"value":"/    let mut s = String::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":26516,"byte_end":26549,"line_start":165,"line_end":165,"column_start":1,"column_end":34}},{"value":"/    deflater.read_to_string(&mut s)?;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":26550,"byte_end":26590,"line_start":166,"line_end":166,"column_start":1,"column_end":41}},{"value":"/    Ok(s)","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":26591,"byte_end":26603,"line_start":167,"line_end":167,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":26604,"byte_end":26609,"line_start":168,"line_end":168,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":26610,"byte_end":26617,"line_start":169,"line_end":169,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":26948,"byte_end":26951,"line_start":183,"line_end":183,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateDecoder<R>>::new","value":"fn (r: R) -> DeflateDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder which will decompress data read from the given","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":26848,"byte_end":26920,"line_start":181,"line_end":181,"column_start":5,"column_end":77}},{"value":"/ stream.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":26925,"byte_end":26936,"line_start":182,"line_end":182,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":27491,"byte_end":27496,"line_start":199,"line_end":199,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateDecoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this decoder entirely, swapping out the input","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":27119,"byte_end":27188,"line_start":192,"line_end":192,"column_start":5,"column_end":74}},{"value":"/ stream for another.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":27193,"byte_end":27216,"line_start":193,"line_end":193,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":27221,"byte_end":27224,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ This will reset the internal state of this decoder and replace the","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":27229,"byte_end":27299,"line_start":195,"line_end":195,"column_start":5,"column_end":75}},{"value":"/ input stream with the one provided, returning the previous input","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":27304,"byte_end":27372,"line_start":196,"line_end":196,"column_start":5,"column_end":73}},{"value":"/ stream. Future data read from this decoder will be the decompressed","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":27377,"byte_end":27448,"line_start":197,"line_end":197,"column_start":5,"column_end":76}},{"value":"/ version of `r`'s data.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":27453,"byte_end":27479,"line_start":198,"line_end":198,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":27783,"byte_end":27793,"line_start":208,"line_end":208,"column_start":12,"column_end":22},"name":"reset_data","qualname":"<DeflateDecoder<R>>::reset_data","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder's data","sig":null,"attributes":[{"value":"/ Resets the state of this decoder's data","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":27605,"byte_end":27648,"line_start":204,"line_end":204,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":27653,"byte_end":27656,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ This will reset the internal state of this decoder. It will continue","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":27661,"byte_end":27733,"line_start":206,"line_end":206,"column_start":5,"column_end":77}},{"value":"/ reading from the same stream.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":27738,"byte_end":27771,"line_start":207,"line_end":207,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":27913,"byte_end":27920,"line_start":213,"line_end":213,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying stream","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":27852,"byte_end":27901,"line_start":212,"line_end":212,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":28165,"byte_end":28172,"line_start":221,"line_end":221,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":27965,"byte_end":28022,"line_start":217,"line_end":217,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":28027,"byte_end":28030,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":28035,"byte_end":28107,"line_start":219,"line_end":219,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":28112,"byte_end":28153,"line_start":220,"line_end":220,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":28300,"byte_end":28310,"line_start":226,"line_end":226,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[{"value":"/ Consumes this decoder, returning the underlying reader.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":28229,"byte_end":28288,"line_start":225,"line_end":225,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":28579,"byte_end":28587,"line_start":234,"line_end":234,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateDecoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has consumed.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":28352,"byte_end":28419,"line_start":230,"line_end":230,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":28424,"byte_end":28427,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ Note that this will likely be smaller than what the decompressor","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":28432,"byte_end":28500,"line_start":232,"line_end":232,"column_start":5,"column_end":73}},{"value":"/ actually read from the underlying stream due to buffering.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":28505,"byte_end":28567,"line_start":233,"line_end":233,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":28723,"byte_end":28732,"line_start":239,"line_end":239,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateDecoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has produced.\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has produced.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":28644,"byte_end":28711,"line_start":238,"line_end":238,"column_start":5,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":811},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":30608,"byte_end":30622,"line_start":41,"line_end":41,"column_start":12,"column_end":26},"name":"DeflateEncoder","qualname":"::deflate::read::DeflateEncoder","value":"DeflateEncoder {  }","parent":null,"children":[{"krate":0,"index":813}],"decl_id":null,"docs":" A DEFLATE encoder, or compressor.","sig":null,"attributes":[{"value":"/ A DEFLATE encoder, or compressor.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":29681,"byte_end":29718,"line_start":12,"line_end":12,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":29719,"byte_end":29722,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`Read`] interface and will read uncompressed","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":29723,"byte_end":29800,"line_start":14,"line_end":14,"column_start":1,"column_end":78}},{"value":"/ data from an underlying stream and emit a stream of compressed data.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":29801,"byte_end":29873,"line_start":15,"line_end":15,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":29874,"byte_end":29877,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":29878,"byte_end":29940,"line_start":17,"line_end":17,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":29941,"byte_end":29944,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":29945,"byte_end":29959,"line_start":19,"line_end":19,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":29960,"byte_end":29963,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":29964,"byte_end":29971,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":29972,"byte_end":30000,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":30001,"byte_end":30017,"line_start":23,"line_end":23,"column_start":1,"column_end":17}},{"value":"/ use flate2::Compression;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":30018,"byte_end":30046,"line_start":24,"line_end":24,"column_start":1,"column_end":29}},{"value":"/ use flate2::read::DeflateEncoder;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":30047,"byte_end":30084,"line_start":25,"line_end":25,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":30085,"byte_end":30088,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":30089,"byte_end":30106,"line_start":27,"line_end":27,"column_start":1,"column_end":18}},{"value":"/ #    println!(\"{:?}\", deflateencoder_read_hello_world().unwrap());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":30107,"byte_end":30177,"line_start":28,"line_end":28,"column_start":1,"column_end":71}},{"value":"/ # }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":30178,"byte_end":30185,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":30186,"byte_end":30191,"line_start":30,"line_end":30,"column_start":1,"column_end":6}},{"value":"/ // Return a vector containing the Deflate compressed version of hello world","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":30192,"byte_end":30271,"line_start":31,"line_end":31,"column_start":1,"column_end":80}},{"value":"/ fn deflateencoder_read_hello_world() -> io::Result<Vec<u8>> {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":30272,"byte_end":30337,"line_start":32,"line_end":32,"column_start":1,"column_end":66}},{"value":"/    let mut ret_vec = [0;100];","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":30338,"byte_end":30371,"line_start":33,"line_end":33,"column_start":1,"column_end":34}},{"value":"/    let c = b\"hello world\";","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":30372,"byte_end":30402,"line_start":34,"line_end":34,"column_start":1,"column_end":31}},{"value":"/    let mut deflater = DeflateEncoder::new(&c[..], Compression::fast());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":30403,"byte_end":30478,"line_start":35,"line_end":35,"column_start":1,"column_end":76}},{"value":"/    let count = deflater.read(&mut ret_vec)?;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":30479,"byte_end":30527,"line_start":36,"line_end":36,"column_start":1,"column_end":49}},{"value":"/    Ok(ret_vec[0..count].to_vec())","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":30528,"byte_end":30565,"line_start":37,"line_end":37,"column_start":1,"column_end":38}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":30566,"byte_end":30571,"line_start":38,"line_end":38,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":30572,"byte_end":30579,"line_start":39,"line_end":39,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":30852,"byte_end":30855,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateEncoder<R>>::new","value":"fn (r: R, level: crate::Compression) -> DeflateEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder which will read uncompressed data from the given","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":30719,"byte_end":30793,"line_start":46,"line_end":46,"column_start":5,"column_end":79}},{"value":"/ stream and emit the compressed stream.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":30798,"byte_end":30840,"line_start":47,"line_end":47,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":31592,"byte_end":31597,"line_start":66,"line_end":66,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateEncoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this encoder entirely, swapping out the input","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":31063,"byte_end":31132,"line_start":56,"line_end":56,"column_start":5,"column_end":74}},{"value":"/ stream for another.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":31137,"byte_end":31160,"line_start":57,"line_end":57,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":31165,"byte_end":31168,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ This function will reset the internal state of this encoder and replace","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":31173,"byte_end":31248,"line_start":59,"line_end":59,"column_start":5,"column_end":80}},{"value":"/ the input stream with the one provided, returning the previous input","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":31253,"byte_end":31325,"line_start":60,"line_end":60,"column_start":5,"column_end":77}},{"value":"/ stream. Future data read from this encoder will be the compressed","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":31330,"byte_end":31399,"line_start":61,"line_end":61,"column_start":5,"column_end":74}},{"value":"/ version of `r`'s data.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":31404,"byte_end":31430,"line_start":62,"line_end":62,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":31435,"byte_end":31438,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ Note that there may be currently buffered data when this function is","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":31443,"byte_end":31515,"line_start":64,"line_end":64,"column_start":5,"column_end":77}},{"value":"/ called, and in that case the buffered data is discarded.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":31520,"byte_end":31580,"line_start":65,"line_end":65,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":31793,"byte_end":31800,"line_start":72,"line_end":72,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateEncoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying reader","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":31732,"byte_end":31781,"line_start":71,"line_end":71,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":32066,"byte_end":32073,"line_start":80,"line_end":80,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateEncoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":31866,"byte_end":31923,"line_start":76,"line_end":76,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":31928,"byte_end":31931,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":31936,"byte_end":32008,"line_start":78,"line_end":78,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":32013,"byte_end":32054,"line_start":79,"line_end":79,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":32414,"byte_end":32424,"line_start":89,"line_end":89,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateEncoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.","sig":null,"attributes":[{"value":"/ Consumes this encoder, returning the underlying reader.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":32147,"byte_end":32206,"line_start":84,"line_end":84,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":32211,"byte_end":32214,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ Note that there may be buffered bytes which are not re-acquired as part","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":32219,"byte_end":32294,"line_start":86,"line_end":86,"column_start":5,"column_end":80}},{"value":"/ of this transition. It's recommended to only call this function after","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":32299,"byte_end":32372,"line_start":87,"line_end":87,"column_start":5,"column_end":78}},{"value":"/ EOF has been reached.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":32377,"byte_end":32402,"line_start":88,"line_end":88,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":32723,"byte_end":32731,"line_start":97,"line_end":97,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateEncoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been read into this compressor.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that have been read into this compressor.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":32494,"byte_end":32567,"line_start":93,"line_end":93,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":32572,"byte_end":32575,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes read from the underlying object may be accounted","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":32580,"byte_end":32656,"line_start":95,"line_end":95,"column_start":5,"column_end":81}},{"value":"/ for, there may still be some active buffering.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":32661,"byte_end":32711,"line_start":96,"line_end":96,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":32966,"byte_end":32975,"line_start":105,"line_end":105,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateEncoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the compressor has produced.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":32789,"byte_end":32854,"line_start":101,"line_end":101,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":32859,"byte_end":32862,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes may have been read yet, some may still be","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":32867,"byte_end":32936,"line_start":103,"line_end":103,"column_start":5,"column_end":74}},{"value":"/ buffered.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":32941,"byte_end":32954,"line_start":104,"line_end":104,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":817},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":34750,"byte_end":34764,"line_start":168,"line_end":168,"column_start":12,"column_end":26},"name":"DeflateDecoder","qualname":"::deflate::read::DeflateDecoder","value":"DeflateDecoder {  }","parent":null,"children":[{"krate":0,"index":819}],"decl_id":null,"docs":" A DEFLATE decoder, or decompressor.","sig":null,"attributes":[{"value":"/ A DEFLATE decoder, or decompressor.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":33680,"byte_end":33719,"line_start":136,"line_end":136,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":33720,"byte_end":33723,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`Read`] interface and takes a stream of","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":33724,"byte_end":33796,"line_start":138,"line_end":138,"column_start":1,"column_end":73}},{"value":"/ compressed data as input, providing the decompressed data when read from.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":33797,"byte_end":33874,"line_start":139,"line_end":139,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":33875,"byte_end":33878,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":33879,"byte_end":33941,"line_start":141,"line_end":141,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":33942,"byte_end":33945,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":33946,"byte_end":33960,"line_start":143,"line_end":143,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":33961,"byte_end":33964,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":33965,"byte_end":33972,"line_start":145,"line_end":145,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":33973,"byte_end":34001,"line_start":146,"line_end":146,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":34002,"byte_end":34018,"line_start":147,"line_end":147,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":34019,"byte_end":34049,"line_start":148,"line_end":148,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::DeflateEncoder;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":34050,"byte_end":34090,"line_start":149,"line_end":149,"column_start":1,"column_end":41}},{"value":"/ use flate2::read::DeflateDecoder;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":34091,"byte_end":34128,"line_start":150,"line_end":150,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":34129,"byte_end":34132,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":34133,"byte_end":34150,"line_start":152,"line_end":152,"column_start":1,"column_end":18}},{"value":"/ #    let mut e = DeflateEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":34151,"byte_end":34228,"line_start":153,"line_end":153,"column_start":1,"column_end":78}},{"value":"/ #    e.write_all(b\"Hello World\").unwrap();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":34229,"byte_end":34275,"line_start":154,"line_end":154,"column_start":1,"column_end":47}},{"value":"/ #    let bytes = e.finish().unwrap();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":34276,"byte_end":34317,"line_start":155,"line_end":155,"column_start":1,"column_end":42}},{"value":"/ #    println!(\"{}\", decode_reader(bytes).unwrap());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":34318,"byte_end":34373,"line_start":156,"line_end":156,"column_start":1,"column_end":56}},{"value":"/ # }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":34374,"byte_end":34381,"line_start":157,"line_end":157,"column_start":1,"column_end":8}},{"value":"/ // Uncompresses a Deflate Encoded vector of bytes and returns a string or error","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":34382,"byte_end":34465,"line_start":158,"line_end":158,"column_start":1,"column_end":84}},{"value":"/ // Here &[u8] implements Read","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":34466,"byte_end":34499,"line_start":159,"line_end":159,"column_start":1,"column_end":34}},{"value":"/ fn decode_reader(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":34500,"byte_end":34560,"line_start":160,"line_end":160,"column_start":1,"column_end":61}},{"value":"/    let mut deflater = DeflateDecoder::new(&bytes[..]);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":34561,"byte_end":34619,"line_start":161,"line_end":161,"column_start":1,"column_end":59}},{"value":"/    let mut s = String::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":34620,"byte_end":34653,"line_start":162,"line_end":162,"column_start":1,"column_end":34}},{"value":"/    deflater.read_to_string(&mut s)?;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":34654,"byte_end":34694,"line_start":163,"line_end":163,"column_start":1,"column_end":41}},{"value":"/    Ok(s)","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":34695,"byte_end":34707,"line_start":164,"line_end":164,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":34708,"byte_end":34713,"line_start":165,"line_end":165,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":34714,"byte_end":34721,"line_start":166,"line_end":166,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":34961,"byte_end":34964,"line_start":175,"line_end":175,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateDecoder<R>>::new","value":"fn (r: R) -> DeflateDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder which will decompress data read from the given","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":34861,"byte_end":34933,"line_start":173,"line_end":173,"column_start":5,"column_end":77}},{"value":"/ stream.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":34938,"byte_end":34949,"line_start":174,"line_end":174,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":35282,"byte_end":35294,"line_start":183,"line_end":183,"column_start":12,"column_end":24},"name":"new_with_buf","qualname":"<DeflateDecoder<R>>::new_with_buf","value":"fn (r: R, buf: Vec<u8>) -> DeflateDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Same as `new`, but the intermediate buffer for data is specified.","sig":null,"attributes":[{"value":"/ Same as `new`, but the intermediate buffer for data is specified.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":35065,"byte_end":35134,"line_start":179,"line_end":179,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":35139,"byte_end":35142,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ Note that the capacity of the intermediate buffer is never increased,","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":35147,"byte_end":35220,"line_start":181,"line_end":181,"column_start":5,"column_end":78}},{"value":"/ and it is recommended for it to be large.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":35225,"byte_end":35270,"line_start":182,"line_end":182,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":36014,"byte_end":36019,"line_start":201,"line_end":201,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateDecoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this decoder entirely, swapping out the input","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":35492,"byte_end":35561,"line_start":191,"line_end":191,"column_start":5,"column_end":74}},{"value":"/ stream for another.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":35566,"byte_end":35589,"line_start":192,"line_end":192,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":35594,"byte_end":35597,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ This will reset the internal state of this decoder and replace the","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":35602,"byte_end":35672,"line_start":194,"line_end":194,"column_start":5,"column_end":75}},{"value":"/ input stream with the one provided, returning the previous input","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":35677,"byte_end":35745,"line_start":195,"line_end":195,"column_start":5,"column_end":73}},{"value":"/ stream. Future data read from this decoder will be the decompressed","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":35750,"byte_end":35821,"line_start":196,"line_end":196,"column_start":5,"column_end":76}},{"value":"/ version of `r`'s data.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":35826,"byte_end":35852,"line_start":197,"line_end":197,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":35857,"byte_end":35860,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ Note that there may be currently buffered data when this function is","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":35865,"byte_end":35937,"line_start":199,"line_end":199,"column_start":5,"column_end":77}},{"value":"/ called, and in that case the buffered data is discarded.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":35942,"byte_end":36002,"line_start":200,"line_end":200,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":36215,"byte_end":36222,"line_start":207,"line_end":207,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying stream","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":36154,"byte_end":36203,"line_start":206,"line_end":206,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":36488,"byte_end":36495,"line_start":215,"line_end":215,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":36288,"byte_end":36345,"line_start":211,"line_end":211,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":36350,"byte_end":36353,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":36358,"byte_end":36430,"line_start":213,"line_end":213,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":36435,"byte_end":36476,"line_start":214,"line_end":214,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":36836,"byte_end":36846,"line_start":224,"line_end":224,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.","sig":null,"attributes":[{"value":"/ Consumes this decoder, returning the underlying reader.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":36569,"byte_end":36628,"line_start":219,"line_end":219,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":36633,"byte_end":36636,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ Note that there may be buffered bytes which are not re-acquired as part","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":36641,"byte_end":36716,"line_start":221,"line_end":221,"column_start":5,"column_end":80}},{"value":"/ of this transition. It's recommended to only call this function after","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":36721,"byte_end":36794,"line_start":222,"line_end":222,"column_start":5,"column_end":78}},{"value":"/ EOF has been reached.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":36799,"byte_end":36824,"line_start":223,"line_end":223,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":37143,"byte_end":37151,"line_start":232,"line_end":232,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateDecoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has consumed.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":36916,"byte_end":36983,"line_start":228,"line_end":228,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":36988,"byte_end":36991,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ Note that this will likely be smaller than what the decompressor","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":36996,"byte_end":37064,"line_start":230,"line_end":230,"column_start":5,"column_end":73}},{"value":"/ actually read from the underlying stream due to buffering.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":37069,"byte_end":37131,"line_start":231,"line_end":231,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":37288,"byte_end":37297,"line_start":237,"line_end":237,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateDecoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has produced.\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has produced.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":37209,"byte_end":37276,"line_start":236,"line_end":236,"column_start":5,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":823},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":38900,"byte_end":38914,"line_start":35,"line_end":35,"column_start":12,"column_end":26},"name":"DeflateEncoder","qualname":"::deflate::write::DeflateEncoder","value":"DeflateEncoder {  }","parent":null,"children":[{"krate":0,"index":825}],"decl_id":null,"docs":" A DEFLATE encoder, or compressor.","sig":null,"attributes":[{"value":"/ A DEFLATE encoder, or compressor.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":38206,"byte_end":38243,"line_start":12,"line_end":12,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":38244,"byte_end":38247,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`Write`] interface and takes a stream of","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":38248,"byte_end":38321,"line_start":14,"line_end":14,"column_start":1,"column_end":74}},{"value":"/ uncompressed data, writing the compressed data to the wrapped writer.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":38322,"byte_end":38395,"line_start":15,"line_end":15,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":38396,"byte_end":38399,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":38400,"byte_end":38464,"line_start":17,"line_end":17,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":38465,"byte_end":38468,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":38469,"byte_end":38483,"line_start":19,"line_end":19,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":38484,"byte_end":38487,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":38488,"byte_end":38495,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":38496,"byte_end":38524,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/ use flate2::Compression;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":38525,"byte_end":38553,"line_start":23,"line_end":23,"column_start":1,"column_end":29}},{"value":"/ use flate2::write::DeflateEncoder;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":38554,"byte_end":38592,"line_start":24,"line_end":24,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":38593,"byte_end":38596,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ // Vec<u8> implements Write to print the compressed bytes of sample string","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":38597,"byte_end":38675,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/ # fn main() {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":38676,"byte_end":38693,"line_start":27,"line_end":27,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":38694,"byte_end":38697,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ let mut e = DeflateEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":38698,"byte_end":38770,"line_start":29,"line_end":29,"column_start":1,"column_end":73}},{"value":"/ e.write_all(b\"Hello World\").unwrap();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":38771,"byte_end":38812,"line_start":30,"line_end":30,"column_start":1,"column_end":42}},{"value":"/ println!(\"{:?}\", e.finish().unwrap());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":38813,"byte_end":38855,"line_start":31,"line_end":31,"column_start":1,"column_end":43}},{"value":"/ # }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":38856,"byte_end":38863,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":38864,"byte_end":38871,"line_start":33,"line_end":33,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":39244,"byte_end":39247,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateEncoder<W>>::new","value":"fn (w: W, level: crate::Compression) -> DeflateEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will write compressed data to the stream\n given at the given compression level.","sig":null,"attributes":[{"value":"/ Creates a new encoder which will write compressed data to the stream","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":39006,"byte_end":39078,"line_start":40,"line_end":40,"column_start":5,"column_end":77}},{"value":"/ given at the given compression level.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":39083,"byte_end":39124,"line_start":41,"line_end":41,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":39129,"byte_end":39132,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ When this encoder is dropped or unwrapped the final pieces of data will","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":39137,"byte_end":39212,"line_start":43,"line_end":43,"column_start":5,"column_end":80}},{"value":"/ be flushed.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":39217,"byte_end":39232,"line_start":44,"line_end":44,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":39481,"byte_end":39488,"line_start":52,"line_end":52,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateEncoder<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":39419,"byte_end":39469,"line_start":51,"line_end":51,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":39765,"byte_end":39772,"line_start":60,"line_end":60,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateEncoder<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":39544,"byte_end":39602,"line_start":56,"line_end":56,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":39607,"byte_end":39610,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ Note that mutating the output/input state of the stream may corrupt this","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":39615,"byte_end":39691,"line_start":58,"line_end":58,"column_start":5,"column_end":81}},{"value":"/ object, so care must be taken when using this method.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":39696,"byte_end":39753,"line_start":59,"line_end":59,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":40650,"byte_end":40655,"line_start":80,"line_end":80,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateEncoder<W>>::reset","value":"fn (&mut self, w: W) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the output\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this encoder entirely, swapping out the output","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":39836,"byte_end":39906,"line_start":64,"line_end":64,"column_start":5,"column_end":75}},{"value":"/ stream for another.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":39911,"byte_end":39934,"line_start":65,"line_end":65,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":39939,"byte_end":39942,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ This function will finish encoding the current stream into the current","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":39947,"byte_end":40021,"line_start":67,"line_end":67,"column_start":5,"column_end":79}},{"value":"/ output stream before swapping out the two output streams. If the stream","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":40026,"byte_end":40101,"line_start":68,"line_end":68,"column_start":5,"column_end":80}},{"value":"/ cannot be finished an error is returned.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":40106,"byte_end":40150,"line_start":69,"line_end":69,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":40155,"byte_end":40158,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ After the current stream has been finished, this will reset the internal","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":40163,"byte_end":40239,"line_start":71,"line_end":71,"column_start":5,"column_end":81}},{"value":"/ state of this encoder and replace the output stream with the one","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":40244,"byte_end":40312,"line_start":72,"line_end":72,"column_start":5,"column_end":73}},{"value":"/ provided, returning the previous output stream. Future data written to","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":40317,"byte_end":40391,"line_start":73,"line_end":73,"column_start":5,"column_end":79}},{"value":"/ this encoder will be the compressed into the stream `w` provided.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":40396,"byte_end":40465,"line_start":74,"line_end":74,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":40470,"byte_end":40473,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":40478,"byte_end":40490,"line_start":76,"line_end":76,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":40495,"byte_end":40498,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":40503,"byte_end":40574,"line_start":78,"line_end":78,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":40579,"byte_end":40638,"line_start":79,"line_end":79,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":41415,"byte_end":41425,"line_start":101,"line_end":101,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<DeflateEncoder<W>>::try_finish","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[{"value":"/ Attempt to finish this output stream, writing out final chunks of data.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":40800,"byte_end":40875,"line_start":86,"line_end":86,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":40880,"byte_end":40883,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ Note that this function can only be used once data has finished being","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":40888,"byte_end":40961,"line_start":88,"line_end":88,"column_start":5,"column_end":78}},{"value":"/ written to the output stream. After this function is called then further","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":40966,"byte_end":41042,"line_start":89,"line_end":89,"column_start":5,"column_end":81}},{"value":"/ calls to `write` may result in a panic.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":41047,"byte_end":41090,"line_start":90,"line_end":90,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":41095,"byte_end":41098,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":41103,"byte_end":41115,"line_start":92,"line_end":92,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":41120,"byte_end":41123,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ Attempts to write data to this stream may result in a panic after this","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":41128,"byte_end":41202,"line_start":94,"line_end":94,"column_start":5,"column_end":79}},{"value":"/ function is called.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":41207,"byte_end":41230,"line_start":95,"line_end":95,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":41235,"byte_end":41238,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":41243,"byte_end":41255,"line_start":97,"line_end":97,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":41260,"byte_end":41263,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":41268,"byte_end":41339,"line_start":99,"line_end":99,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":41344,"byte_end":41403,"line_start":100,"line_end":100,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":42260,"byte_end":42266,"line_start":120,"line_end":120,"column_start":12,"column_end":18},"name":"finish","qualname":"<DeflateEncoder<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[{"value":"/ Consumes this encoder, flushing the output stream.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":41496,"byte_end":41550,"line_start":105,"line_end":105,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":41555,"byte_end":41558,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ This will flush the underlying data stream, close off the compressed","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":41563,"byte_end":41635,"line_start":107,"line_end":107,"column_start":5,"column_end":77}},{"value":"/ stream and, if successful, return the contained writer.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":41640,"byte_end":41699,"line_start":108,"line_end":108,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":41704,"byte_end":41707,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ Note that this function may not be suitable to call in a situation where","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":41712,"byte_end":41788,"line_start":110,"line_end":110,"column_start":5,"column_end":81}},{"value":"/ the underlying stream is an asynchronous I/O stream. To finish a stream","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":41793,"byte_end":41868,"line_start":111,"line_end":111,"column_start":5,"column_end":80}},{"value":"/ the `try_finish` (or `shutdown`) method should be used instead. To","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":41873,"byte_end":41943,"line_start":112,"line_end":112,"column_start":5,"column_end":75}},{"value":"/ re-acquire ownership of a stream it is safe to call this method after","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":41948,"byte_end":42021,"line_start":113,"line_end":113,"column_start":5,"column_end":78}},{"value":"/ `try_finish` or `shutdown` has returned `Ok`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":42026,"byte_end":42075,"line_start":114,"line_end":114,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":42080,"byte_end":42083,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":42088,"byte_end":42100,"line_start":116,"line_end":116,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":42105,"byte_end":42108,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":42113,"byte_end":42184,"line_start":118,"line_end":118,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":42189,"byte_end":42248,"line_start":119,"line_end":119,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":42951,"byte_end":42963,"line_start":137,"line_end":137,"column_start":12,"column_end":24},"name":"flush_finish","qualname":"<DeflateEncoder<W>>::flush_finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[{"value":"/ Consumes this encoder, flushing the output stream.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":42373,"byte_end":42427,"line_start":125,"line_end":125,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":42432,"byte_end":42435,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ This will flush the underlying data stream and then return the contained","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":42440,"byte_end":42516,"line_start":127,"line_end":127,"column_start":5,"column_end":81}},{"value":"/ writer if the flush succeeded.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":42521,"byte_end":42555,"line_start":128,"line_end":128,"column_start":5,"column_end":39}},{"value":"/ The compressed stream will not closed but only flushed. This","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":42560,"byte_end":42624,"line_start":129,"line_end":129,"column_start":5,"column_end":69}},{"value":"/ means that obtained byte array can by extended by another deflated","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":42629,"byte_end":42699,"line_start":130,"line_end":130,"column_start":5,"column_end":75}},{"value":"/ stream. To close the stream add the two bytes 0x3 and 0x0.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":42704,"byte_end":42766,"line_start":131,"line_end":131,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":42771,"byte_end":42774,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":42779,"byte_end":42791,"line_start":133,"line_end":133,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":42796,"byte_end":42799,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":42804,"byte_end":42875,"line_start":135,"line_end":135,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":42880,"byte_end":42939,"line_start":136,"line_end":136,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":43289,"byte_end":43297,"line_start":146,"line_end":146,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateEncoder<W>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been written to this compresor.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that have been written to this compresor.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":43069,"byte_end":43142,"line_start":142,"line_end":142,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":43147,"byte_end":43150,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes written to this object may be accounted for,","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":43155,"byte_end":43227,"line_start":144,"line_end":144,"column_start":5,"column_end":77}},{"value":"/ there may still be some active buffering.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":43232,"byte_end":43277,"line_start":145,"line_end":145,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":43540,"byte_end":43549,"line_start":154,"line_end":154,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateEncoder<W>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the compressor has produced.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":43360,"byte_end":43425,"line_start":150,"line_end":150,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":43430,"byte_end":43433,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes may have been written yet, some may still be","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":43438,"byte_end":43510,"line_start":152,"line_end":152,"column_start":5,"column_end":77}},{"value":"/ buffered.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":43515,"byte_end":43528,"line_start":153,"line_end":153,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":829},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":45481,"byte_end":45495,"line_start":220,"line_end":220,"column_start":12,"column_end":26},"name":"DeflateDecoder","qualname":"::deflate::write::DeflateDecoder","value":"DeflateDecoder {  }","parent":null,"children":[{"krate":0,"index":831}],"decl_id":null,"docs":" A DEFLATE decoder, or decompressor.","sig":null,"attributes":[{"value":"/ A DEFLATE decoder, or decompressor.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":44299,"byte_end":44338,"line_start":186,"line_end":186,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":44339,"byte_end":44342,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`Write`] and will emit a stream of decompressed","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":44343,"byte_end":44423,"line_start":188,"line_end":188,"column_start":1,"column_end":81}},{"value":"/ data when fed a stream of compressed data.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":44424,"byte_end":44470,"line_start":189,"line_end":189,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":44471,"byte_end":44474,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":44475,"byte_end":44538,"line_start":191,"line_end":191,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":44539,"byte_end":44542,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":44543,"byte_end":44557,"line_start":193,"line_end":193,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":44558,"byte_end":44561,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":44562,"byte_end":44569,"line_start":195,"line_end":195,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":44570,"byte_end":44598,"line_start":196,"line_end":196,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":44599,"byte_end":44615,"line_start":197,"line_end":197,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":44616,"byte_end":44646,"line_start":198,"line_end":198,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::DeflateEncoder;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":44647,"byte_end":44687,"line_start":199,"line_end":199,"column_start":1,"column_end":41}},{"value":"/ use flate2::write::DeflateDecoder;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":44688,"byte_end":44726,"line_start":200,"line_end":200,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":44727,"byte_end":44730,"line_start":201,"line_end":201,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":44731,"byte_end":44748,"line_start":202,"line_end":202,"column_start":1,"column_end":18}},{"value":"/ #    let mut e = DeflateEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":44749,"byte_end":44826,"line_start":203,"line_end":203,"column_start":1,"column_end":78}},{"value":"/ #    e.write_all(b\"Hello World\").unwrap();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":44827,"byte_end":44873,"line_start":204,"line_end":204,"column_start":1,"column_end":47}},{"value":"/ #    let bytes = e.finish().unwrap();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":44874,"byte_end":44915,"line_start":205,"line_end":205,"column_start":1,"column_end":42}},{"value":"/ #    println!(\"{}\", decode_writer(bytes).unwrap());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":44916,"byte_end":44971,"line_start":206,"line_end":206,"column_start":1,"column_end":56}},{"value":"/ # }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":44972,"byte_end":44979,"line_start":207,"line_end":207,"column_start":1,"column_end":8}},{"value":"/ // Uncompresses a Deflate Encoded vector of bytes and returns a string or error","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":44980,"byte_end":45063,"line_start":208,"line_end":208,"column_start":1,"column_end":84}},{"value":"/ // Here Vec<u8> implements Write","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":45064,"byte_end":45100,"line_start":209,"line_end":209,"column_start":1,"column_end":37}},{"value":"/ fn decode_writer(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":45101,"byte_end":45161,"line_start":210,"line_end":210,"column_start":1,"column_end":61}},{"value":"/    let mut writer = Vec::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":45162,"byte_end":45197,"line_start":211,"line_end":211,"column_start":1,"column_end":36}},{"value":"/    let mut deflater = DeflateDecoder::new(writer);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":45198,"byte_end":45252,"line_start":212,"line_end":212,"column_start":1,"column_end":55}},{"value":"/    deflater.write_all(&bytes[..])?;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":45253,"byte_end":45292,"line_start":213,"line_end":213,"column_start":1,"column_end":40}},{"value":"/    writer = deflater.finish()?;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":45293,"byte_end":45328,"line_start":214,"line_end":214,"column_start":1,"column_end":36}},{"value":"/    let return_string = String::from_utf8(writer).expect(\"String parsing error\");","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":45329,"byte_end":45413,"line_start":215,"line_end":215,"column_start":1,"column_end":85}},{"value":"/    Ok(return_string)","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":45414,"byte_end":45438,"line_start":216,"line_end":216,"column_start":1,"column_end":25}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":45439,"byte_end":45444,"line_start":217,"line_end":217,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":45445,"byte_end":45452,"line_start":218,"line_end":218,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":45784,"byte_end":45787,"line_start":229,"line_end":229,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateDecoder<W>>::new","value":"fn (w: W) -> DeflateDecoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will write uncompressed data to the stream.","sig":null,"attributes":[{"value":"/ Creates a new decoder which will write uncompressed data to the stream.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":45589,"byte_end":45664,"line_start":225,"line_end":225,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":45669,"byte_end":45672,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ When this encoder is dropped or unwrapped the final pieces of data will","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":45677,"byte_end":45752,"line_start":227,"line_end":227,"column_start":5,"column_end":80}},{"value":"/ be flushed.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":45757,"byte_end":45772,"line_start":228,"line_end":228,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":45989,"byte_end":45996,"line_start":236,"line_end":236,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateDecoder<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":45927,"byte_end":45977,"line_start":235,"line_end":235,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":46273,"byte_end":46280,"line_start":244,"line_end":244,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateDecoder<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":46052,"byte_end":46110,"line_start":240,"line_end":240,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":46115,"byte_end":46118,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ Note that mutating the output/input state of the stream may corrupt this","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":46123,"byte_end":46199,"line_start":242,"line_end":242,"column_start":5,"column_end":81}},{"value":"/ object, so care must be taken when using this method.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":46204,"byte_end":46261,"line_start":243,"line_end":243,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":47061,"byte_end":47066,"line_start":263,"line_end":263,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateDecoder<W>>::reset","value":"fn (&mut self, w: W) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the output\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this decoder entirely, swapping out the output","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":46344,"byte_end":46414,"line_start":248,"line_end":248,"column_start":5,"column_end":75}},{"value":"/ stream for another.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":46419,"byte_end":46442,"line_start":249,"line_end":249,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":46447,"byte_end":46450,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ This function will finish encoding the current stream into the current","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":46455,"byte_end":46529,"line_start":251,"line_end":251,"column_start":5,"column_end":79}},{"value":"/ output stream before swapping out the two output streams.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":46534,"byte_end":46595,"line_start":252,"line_end":252,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":46600,"byte_end":46603,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ This will then reset the internal state of this decoder and replace the","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":46608,"byte_end":46683,"line_start":254,"line_end":254,"column_start":5,"column_end":80}},{"value":"/ output stream with the one provided, returning the previous output","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":46688,"byte_end":46758,"line_start":255,"line_end":255,"column_start":5,"column_end":75}},{"value":"/ stream. Future data written to this decoder will be decompressed into","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":46763,"byte_end":46836,"line_start":256,"line_end":256,"column_start":5,"column_end":78}},{"value":"/ the output stream `w`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":46841,"byte_end":46867,"line_start":257,"line_end":257,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":46872,"byte_end":46875,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":46880,"byte_end":46892,"line_start":259,"line_end":259,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":46897,"byte_end":46900,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to finish the stream, and if that I/O","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":46905,"byte_end":46977,"line_start":261,"line_end":261,"column_start":5,"column_end":77}},{"value":"/ returns an error then that will be returned from this function.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":46982,"byte_end":47049,"line_start":262,"line_end":262,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":47807,"byte_end":47817,"line_start":284,"line_end":284,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<DeflateDecoder<W>>::try_finish","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[{"value":"/ Attempt to finish this output stream, writing out final chunks of data.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":47228,"byte_end":47303,"line_start":269,"line_end":269,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":47308,"byte_end":47311,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ Note that this function can only be used once data has finished being","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":47316,"byte_end":47389,"line_start":271,"line_end":271,"column_start":5,"column_end":78}},{"value":"/ written to the output stream. After this function is called then further","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":47394,"byte_end":47470,"line_start":272,"line_end":272,"column_start":5,"column_end":81}},{"value":"/ calls to `write` may result in a panic.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":47475,"byte_end":47518,"line_start":273,"line_end":273,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":47523,"byte_end":47526,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":47531,"byte_end":47543,"line_start":275,"line_end":275,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":47548,"byte_end":47551,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ Attempts to write data to this stream may result in a panic after this","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":47556,"byte_end":47630,"line_start":277,"line_end":277,"column_start":5,"column_end":79}},{"value":"/ function is called.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":47635,"byte_end":47658,"line_start":278,"line_end":278,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":47663,"byte_end":47666,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":47671,"byte_end":47683,"line_start":280,"line_end":280,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":47688,"byte_end":47691,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to finish the stream, returning any","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":47696,"byte_end":47766,"line_start":282,"line_end":282,"column_start":5,"column_end":75}},{"value":"/ errors which happen.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":47771,"byte_end":47795,"line_start":283,"line_end":283,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":48631,"byte_end":48637,"line_start":303,"line_end":303,"column_start":12,"column_end":18},"name":"finish","qualname":"<DeflateDecoder<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[{"value":"/ Consumes this encoder, flushing the output stream.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":47888,"byte_end":47942,"line_start":288,"line_end":288,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":47947,"byte_end":47950,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ This will flush the underlying data stream and then return the contained","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":47955,"byte_end":48031,"line_start":290,"line_end":290,"column_start":5,"column_end":81}},{"value":"/ writer if the flush succeeded.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":48036,"byte_end":48070,"line_start":291,"line_end":291,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":48075,"byte_end":48078,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ Note that this function may not be suitable to call in a situation where","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":48083,"byte_end":48159,"line_start":293,"line_end":293,"column_start":5,"column_end":81}},{"value":"/ the underlying stream is an asynchronous I/O stream. To finish a stream","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":48164,"byte_end":48239,"line_start":294,"line_end":294,"column_start":5,"column_end":80}},{"value":"/ the `try_finish` (or `shutdown`) method should be used instead. To","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":48244,"byte_end":48314,"line_start":295,"line_end":295,"column_start":5,"column_end":75}},{"value":"/ re-acquire ownership of a stream it is safe to call this method after","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":48319,"byte_end":48392,"line_start":296,"line_end":296,"column_start":5,"column_end":78}},{"value":"/ `try_finish` or `shutdown` has returned `Ok`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":48397,"byte_end":48446,"line_start":297,"line_end":297,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":48451,"byte_end":48454,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":48459,"byte_end":48471,"line_start":299,"line_end":299,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":48476,"byte_end":48479,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":48484,"byte_end":48555,"line_start":301,"line_end":301,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":48560,"byte_end":48619,"line_start":302,"line_end":302,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":48999,"byte_end":49007,"line_start":313,"line_end":313,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateDecoder<W>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed for\n decompression.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has consumed for","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":48744,"byte_end":48814,"line_start":308,"line_end":308,"column_start":5,"column_end":75}},{"value":"/ decompression.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":48819,"byte_end":48837,"line_start":309,"line_end":309,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":48842,"byte_end":48845,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ Note that this will likely be smaller than the number of bytes","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":48850,"byte_end":48916,"line_start":311,"line_end":311,"column_start":5,"column_end":71}},{"value":"/ successfully written to this stream due to internal buffering.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":48921,"byte_end":48987,"line_start":312,"line_end":312,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":49177,"byte_end":49186,"line_start":319,"line_end":319,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateDecoder<W>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has written to its\n output stream.\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has written to its","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":49070,"byte_end":49142,"line_start":317,"line_end":317,"column_start":5,"column_end":77}},{"value":"/ output stream.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":49147,"byte_end":49165,"line_start":318,"line_end":318,"column_start":5,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":876},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":66601,"byte_end":66610,"line_start":151,"line_end":151,"column_start":12,"column_end":21},"name":"GzEncoder","qualname":"::gz::bufread::GzEncoder","value":"GzEncoder {  }","parent":null,"children":[{"krate":0,"index":878},{"krate":0,"index":879},{"krate":0,"index":880},{"krate":0,"index":881}],"decl_id":null,"docs":" A gzip streaming encoder","sig":null,"attributes":[{"value":"/ A gzip streaming encoder","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":65639,"byte_end":65667,"line_start":120,"line_end":120,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":65668,"byte_end":65671,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ This structure exposes a [`BufRead`] interface that will read uncompressed data","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":65672,"byte_end":65755,"line_start":122,"line_end":122,"column_start":1,"column_end":84}},{"value":"/ from the underlying reader and expose the compressed version as a [`BufRead`]","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":65756,"byte_end":65837,"line_start":123,"line_end":123,"column_start":1,"column_end":82}},{"value":"/ interface.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":65838,"byte_end":65852,"line_start":124,"line_end":124,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":65853,"byte_end":65856,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ [`BufRead`]: https://doc.rust-lang.org/std/io/trait.BufRead.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":65857,"byte_end":65925,"line_start":126,"line_end":126,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":65926,"byte_end":65929,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":65930,"byte_end":65944,"line_start":128,"line_end":128,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":65945,"byte_end":65948,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":65949,"byte_end":65956,"line_start":130,"line_end":130,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":65957,"byte_end":65985,"line_start":131,"line_end":131,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":65986,"byte_end":66002,"line_start":132,"line_end":132,"column_start":1,"column_end":17}},{"value":"/ use flate2::Compression;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":66003,"byte_end":66031,"line_start":133,"line_end":133,"column_start":1,"column_end":29}},{"value":"/ use flate2::bufread::GzEncoder;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":66032,"byte_end":66067,"line_start":134,"line_end":134,"column_start":1,"column_end":36}},{"value":"/ use std::fs::File;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":66068,"byte_end":66090,"line_start":135,"line_end":135,"column_start":1,"column_end":23}},{"value":"/ use std::io::BufReader;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":66091,"byte_end":66118,"line_start":136,"line_end":136,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":66119,"byte_end":66122,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ // Opens sample file, compresses the contents and returns a Vector or error","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":66123,"byte_end":66202,"line_start":138,"line_end":138,"column_start":1,"column_end":80}},{"value":"/ // File wrapped in a BufReader implements BufRead","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":66203,"byte_end":66256,"line_start":139,"line_end":139,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":66257,"byte_end":66260,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ fn open_hello_world() -> io::Result<Vec<u8>> {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":66261,"byte_end":66311,"line_start":141,"line_end":141,"column_start":1,"column_end":51}},{"value":"/     let f = File::open(\"examples/hello_world.txt\")?;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":66312,"byte_end":66368,"line_start":142,"line_end":142,"column_start":1,"column_end":57}},{"value":"/     let b = BufReader::new(f);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":66369,"byte_end":66403,"line_start":143,"line_end":143,"column_start":1,"column_end":35}},{"value":"/     let mut gz = GzEncoder::new(b, Compression::fast());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":66404,"byte_end":66464,"line_start":144,"line_end":144,"column_start":1,"column_end":61}},{"value":"/     let mut buffer = Vec::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":66465,"byte_end":66501,"line_start":145,"line_end":145,"column_start":1,"column_end":37}},{"value":"/     gz.read_to_end(&mut buffer)?;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":66502,"byte_end":66539,"line_start":146,"line_end":146,"column_start":1,"column_end":38}},{"value":"/     Ok(buffer)","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":66540,"byte_end":66558,"line_start":147,"line_end":147,"column_start":1,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":66559,"byte_end":66564,"line_start":148,"line_end":148,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":66565,"byte_end":66572,"line_start":149,"line_end":149,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":67378,"byte_end":67381,"line_start":176,"line_end":176,"column_start":12,"column_end":15},"name":"new","qualname":"<GzEncoder<R>>::new","value":"fn (r: R, level: Compression) -> GzEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will use the given compression level.","sig":null,"attributes":[{"value":"/ Creates a new encoder which will use the given compression level.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":67037,"byte_end":67106,"line_start":169,"line_end":169,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":67111,"byte_end":67114,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ The encoder is not configured specially for the emitted header. For","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":67119,"byte_end":67190,"line_start":171,"line_end":171,"column_start":5,"column_end":76}},{"value":"/ header configuration, see the `GzBuilder` type.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":67195,"byte_end":67246,"line_start":172,"line_end":172,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":67251,"byte_end":67254,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ The data read from the stream `r` will be compressed and available","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":67259,"byte_end":67329,"line_start":174,"line_end":174,"column_start":5,"column_end":75}},{"value":"/ through the returned reader.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":67334,"byte_end":67366,"line_start":175,"line_end":175,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":68136,"byte_end":68143,"line_start":201,"line_end":201,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzEncoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying reader.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":68074,"byte_end":68124,"line_start":200,"line_end":200,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":68410,"byte_end":68417,"line_start":209,"line_end":209,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzEncoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying reader.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying reader.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":68209,"byte_end":68267,"line_start":205,"line_end":205,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":68272,"byte_end":68275,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the reader may result in surprising results if","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":68280,"byte_end":68352,"line_start":207,"line_end":207,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":68357,"byte_end":68398,"line_start":208,"line_end":208,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":68560,"byte_end":68570,"line_start":214,"line_end":214,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<GzEncoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying stream, consuming this encoder\n","sig":null,"attributes":[{"value":"/ Returns the underlying stream, consuming this encoder","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":68491,"byte_end":68548,"line_start":213,"line_end":213,"column_start":5,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":885},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":70937,"byte_end":70946,"line_start":300,"line_end":300,"column_start":12,"column_end":21},"name":"GzDecoder","qualname":"::gz::bufread::GzDecoder","value":"GzDecoder {  }","parent":null,"children":[{"krate":0,"index":887},{"krate":0,"index":888},{"krate":0,"index":889},{"krate":0,"index":890}],"decl_id":null,"docs":" A gzip streaming decoder","sig":null,"attributes":[{"value":"/ A gzip streaming decoder","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":69904,"byte_end":69932,"line_start":266,"line_end":266,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":69933,"byte_end":69936,"line_start":267,"line_end":267,"column_start":1,"column_end":4}},{"value":"/ This structure exposes a [`ReadBuf`] interface that will consume compressed","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":69937,"byte_end":70016,"line_start":268,"line_end":268,"column_start":1,"column_end":80}},{"value":"/ data from the underlying reader and emit uncompressed data.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":70017,"byte_end":70080,"line_start":269,"line_end":269,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":70081,"byte_end":70084,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"/ [`ReadBuf`]: https://doc.rust-lang.org/std/io/trait.BufRead.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":70085,"byte_end":70153,"line_start":271,"line_end":271,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":70154,"byte_end":70157,"line_start":272,"line_end":272,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":70158,"byte_end":70172,"line_start":273,"line_end":273,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":70173,"byte_end":70176,"line_start":274,"line_end":274,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":70177,"byte_end":70184,"line_start":275,"line_end":275,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":70185,"byte_end":70213,"line_start":276,"line_end":276,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":70214,"byte_end":70230,"line_start":277,"line_end":277,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":70231,"byte_end":70261,"line_start":278,"line_end":278,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::GzEncoder;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":70262,"byte_end":70297,"line_start":279,"line_end":279,"column_start":1,"column_end":36}},{"value":"/ use flate2::bufread::GzDecoder;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":70298,"byte_end":70333,"line_start":280,"line_end":280,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":70334,"byte_end":70337,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":70338,"byte_end":70355,"line_start":282,"line_end":282,"column_start":1,"column_end":18}},{"value":"/ #   let mut e = GzEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":70356,"byte_end":70427,"line_start":283,"line_end":283,"column_start":1,"column_end":72}},{"value":"/ #   e.write_all(b\"Hello World\").unwrap();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":70428,"byte_end":70473,"line_start":284,"line_end":284,"column_start":1,"column_end":46}},{"value":"/ #   let bytes = e.finish().unwrap();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":70474,"byte_end":70514,"line_start":285,"line_end":285,"column_start":1,"column_end":41}},{"value":"/ #   println!(\"{}\", decode_reader(bytes).unwrap());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":70515,"byte_end":70569,"line_start":286,"line_end":286,"column_start":1,"column_end":55}},{"value":"/ # }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":70570,"byte_end":70577,"line_start":287,"line_end":287,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":70578,"byte_end":70583,"line_start":288,"line_end":288,"column_start":1,"column_end":6}},{"value":"/ // Uncompresses a Gz Encoded vector of bytes and returns a string or error","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":70584,"byte_end":70662,"line_start":289,"line_end":289,"column_start":1,"column_end":79}},{"value":"/ // Here &[u8] implements BufRead","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":70663,"byte_end":70699,"line_start":290,"line_end":290,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":70700,"byte_end":70703,"line_start":291,"line_end":291,"column_start":1,"column_end":4}},{"value":"/ fn decode_reader(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":70704,"byte_end":70764,"line_start":292,"line_end":292,"column_start":1,"column_end":61}},{"value":"/    let mut gz = GzDecoder::new(&bytes[..]);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":70765,"byte_end":70812,"line_start":293,"line_end":293,"column_start":1,"column_end":48}},{"value":"/    let mut s = String::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":70813,"byte_end":70846,"line_start":294,"line_end":294,"column_start":1,"column_end":34}},{"value":"/    gz.read_to_string(&mut s)?;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":70847,"byte_end":70881,"line_start":295,"line_end":295,"column_start":1,"column_end":35}},{"value":"/    Ok(s)","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":70882,"byte_end":70894,"line_start":296,"line_end":296,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":70895,"byte_end":70900,"line_start":297,"line_end":297,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":70901,"byte_end":70908,"line_start":298,"line_end":298,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":72328,"byte_end":72331,"line_start":354,"line_end":354,"column_start":12,"column_end":15},"name":"new","qualname":"<GzDecoder<R>>::new","value":"fn (mut r: R) -> GzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder from the given reader, immediately parsing the\n gzip header.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder from the given reader, immediately parsing the","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":72223,"byte_end":72295,"line_start":352,"line_end":352,"column_start":5,"column_end":77}},{"value":"/ gzip header.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":72300,"byte_end":72316,"line_start":353,"line_end":353,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":73281,"byte_end":73287,"line_start":388,"line_end":388,"column_start":12,"column_end":18},"name":"header","qualname":"<GzDecoder<R>>::header","value":"fn (&self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the header associated with this stream, if it was valid\n","sig":null,"attributes":[{"value":"/ Returns the header associated with this stream, if it was valid","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":73202,"byte_end":73269,"line_start":387,"line_end":387,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":73420,"byte_end":73427,"line_start":393,"line_end":393,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying reader.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":73358,"byte_end":73408,"line_start":392,"line_end":392,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":73695,"byte_end":73702,"line_start":401,"line_end":401,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":73494,"byte_end":73552,"line_start":397,"line_end":397,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":73557,"byte_end":73560,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":73565,"byte_end":73637,"line_start":399,"line_end":399,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":73642,"byte_end":73683,"line_start":400,"line_end":400,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":73848,"byte_end":73858,"line_start":406,"line_end":406,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<GzDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[{"value":"/ Consumes this decoder, returning the underlying reader.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":73777,"byte_end":73836,"line_start":405,"line_end":405,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":912},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":80016,"byte_end":80030,"line_start":581,"line_end":581,"column_start":12,"column_end":26},"name":"MultiGzDecoder","qualname":"::gz::bufread::MultiGzDecoder","value":"","parent":null,"children":[],"decl_id":null,"docs":" A gzip streaming decoder that decodes all members of a multistream","sig":null,"attributes":[{"value":"/ A gzip streaming decoder that decodes all members of a multistream","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":78478,"byte_end":78548,"line_start":540,"line_end":540,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":78549,"byte_end":78552,"line_start":541,"line_end":541,"column_start":1,"column_end":4}},{"value":"/ A gzip member consists of a header, compressed data and a trailer. The [gzip","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":78553,"byte_end":78633,"line_start":542,"line_end":542,"column_start":1,"column_end":81}},{"value":"/ specification](https://tools.ietf.org/html/rfc1952), however, allows multiple","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":78634,"byte_end":78715,"line_start":543,"line_end":543,"column_start":1,"column_end":82}},{"value":"/ gzip members to be joined in a single stream. `MultiGzDecoder` will","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":78716,"byte_end":78787,"line_start":544,"line_end":544,"column_start":1,"column_end":72}},{"value":"/ decode all consecutive members while `GzDecoder` will only decompress","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":78788,"byte_end":78861,"line_start":545,"line_end":545,"column_start":1,"column_end":74}},{"value":"/ the first gzip member. The multistream format is commonly used in","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":78862,"byte_end":78931,"line_start":546,"line_end":546,"column_start":1,"column_end":70}},{"value":"/ bioinformatics, for example when using the BGZF compressed data.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":78932,"byte_end":79000,"line_start":547,"line_end":547,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":79001,"byte_end":79004,"line_start":548,"line_end":548,"column_start":1,"column_end":4}},{"value":"/ This structure exposes a [`BufRead`] interface that will consume all gzip members","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":79005,"byte_end":79090,"line_start":549,"line_end":549,"column_start":1,"column_end":86}},{"value":"/ from the underlying reader and emit uncompressed data.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":79091,"byte_end":79149,"line_start":550,"line_end":550,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":79150,"byte_end":79153,"line_start":551,"line_end":551,"column_start":1,"column_end":4}},{"value":"/ [`BufRead`]: https://doc.rust-lang.org/std/io/trait.BufRead.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":79154,"byte_end":79222,"line_start":552,"line_end":552,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":79223,"byte_end":79226,"line_start":553,"line_end":553,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":79227,"byte_end":79241,"line_start":554,"line_end":554,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":79242,"byte_end":79245,"line_start":555,"line_end":555,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":79246,"byte_end":79253,"line_start":556,"line_end":556,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":79254,"byte_end":79282,"line_start":557,"line_end":557,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":79283,"byte_end":79299,"line_start":558,"line_end":558,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":79300,"byte_end":79330,"line_start":559,"line_end":559,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::GzEncoder;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":79331,"byte_end":79366,"line_start":560,"line_end":560,"column_start":1,"column_end":36}},{"value":"/ use flate2::bufread::MultiGzDecoder;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":79367,"byte_end":79407,"line_start":561,"line_end":561,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":79408,"byte_end":79411,"line_start":562,"line_end":562,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":79412,"byte_end":79429,"line_start":563,"line_end":563,"column_start":1,"column_end":18}},{"value":"/ #   let mut e = GzEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":79430,"byte_end":79501,"line_start":564,"line_end":564,"column_start":1,"column_end":72}},{"value":"/ #   e.write_all(b\"Hello World\").unwrap();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":79502,"byte_end":79547,"line_start":565,"line_end":565,"column_start":1,"column_end":46}},{"value":"/ #   let bytes = e.finish().unwrap();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":79548,"byte_end":79588,"line_start":566,"line_end":566,"column_start":1,"column_end":41}},{"value":"/ #   println!(\"{}\", decode_reader(bytes).unwrap());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":79589,"byte_end":79643,"line_start":567,"line_end":567,"column_start":1,"column_end":55}},{"value":"/ # }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":79644,"byte_end":79651,"line_start":568,"line_end":568,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":79652,"byte_end":79657,"line_start":569,"line_end":569,"column_start":1,"column_end":6}},{"value":"/ // Uncompresses a Gz Encoded vector of bytes and returns a string or error","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":79658,"byte_end":79736,"line_start":570,"line_end":570,"column_start":1,"column_end":79}},{"value":"/ // Here &[u8] implements BufRead","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":79737,"byte_end":79773,"line_start":571,"line_end":571,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":79774,"byte_end":79777,"line_start":572,"line_end":572,"column_start":1,"column_end":4}},{"value":"/ fn decode_reader(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":79778,"byte_end":79838,"line_start":573,"line_end":573,"column_start":1,"column_end":61}},{"value":"/    let mut gz = MultiGzDecoder::new(&bytes[..]);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":79839,"byte_end":79891,"line_start":574,"line_end":574,"column_start":1,"column_end":53}},{"value":"/    let mut s = String::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":79892,"byte_end":79925,"line_start":575,"line_end":575,"column_start":1,"column_end":34}},{"value":"/    gz.read_to_string(&mut s)?;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":79926,"byte_end":79960,"line_start":576,"line_end":576,"column_start":1,"column_end":35}},{"value":"/    Ok(s)","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":79961,"byte_end":79973,"line_start":577,"line_end":577,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":79974,"byte_end":79979,"line_start":578,"line_end":578,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":79980,"byte_end":79987,"line_start":579,"line_end":579,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":80278,"byte_end":80281,"line_start":587,"line_end":587,"column_start":12,"column_end":15},"name":"new","qualname":"<MultiGzDecoder<R>>::new","value":"fn (r: R) -> MultiGzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder from the given reader, immediately parsing the\n (first) gzip header. If the gzip stream contains multiple members all will\n be decoded.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder from the given reader, immediately parsing the","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":80091,"byte_end":80163,"line_start":584,"line_end":584,"column_start":5,"column_end":77}},{"value":"/ (first) gzip header. If the gzip stream contains multiple members all will","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":80168,"byte_end":80246,"line_start":585,"line_end":585,"column_start":5,"column_end":83}},{"value":"/ be decoded.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":80251,"byte_end":80266,"line_start":586,"line_end":586,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":80491,"byte_end":80497,"line_start":594,"line_end":594,"column_start":12,"column_end":18},"name":"header","qualname":"<MultiGzDecoder<R>>::header","value":"fn (&self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the current header associated with this stream, if it's valid\n","sig":null,"attributes":[{"value":"/ Returns the current header associated with this stream, if it's valid","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":80406,"byte_end":80479,"line_start":593,"line_end":593,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":80625,"byte_end":80632,"line_start":599,"line_end":599,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<MultiGzDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying reader.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":80563,"byte_end":80613,"line_start":598,"line_end":598,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":80885,"byte_end":80892,"line_start":607,"line_end":607,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<MultiGzDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":80684,"byte_end":80742,"line_start":603,"line_end":603,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":80747,"byte_end":80750,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":80755,"byte_end":80827,"line_start":605,"line_end":605,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":80832,"byte_end":80873,"line_start":606,"line_end":606,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":81023,"byte_end":81033,"line_start":612,"line_end":612,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<MultiGzDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[{"value":"/ Consumes this decoder, returning the underlying reader.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":80952,"byte_end":81011,"line_start":611,"line_end":611,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":919},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":82834,"byte_end":82843,"line_start":41,"line_end":41,"column_start":12,"column_end":21},"name":"GzEncoder","qualname":"::gz::read::GzEncoder","value":"GzEncoder {  }","parent":null,"children":[{"krate":0,"index":921}],"decl_id":null,"docs":" A gzip streaming encoder","sig":null,"attributes":[{"value":"/ A gzip streaming encoder","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":82006,"byte_end":82034,"line_start":14,"line_end":14,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":82035,"byte_end":82038,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This structure exposes a [`Read`] interface that will read uncompressed data","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":82039,"byte_end":82119,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/ from the underlying reader and expose the compressed version as a [`Read`]","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":82120,"byte_end":82198,"line_start":17,"line_end":17,"column_start":1,"column_end":79}},{"value":"/ interface.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":82199,"byte_end":82213,"line_start":18,"line_end":18,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":82214,"byte_end":82217,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":82218,"byte_end":82280,"line_start":20,"line_end":20,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":82281,"byte_end":82284,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":82285,"byte_end":82299,"line_start":22,"line_end":22,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":82300,"byte_end":82303,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":82304,"byte_end":82311,"line_start":24,"line_end":24,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":82312,"byte_end":82340,"line_start":25,"line_end":25,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":82341,"byte_end":82357,"line_start":26,"line_end":26,"column_start":1,"column_end":17}},{"value":"/ use flate2::Compression;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":82358,"byte_end":82386,"line_start":27,"line_end":27,"column_start":1,"column_end":29}},{"value":"/ use flate2::read::GzEncoder;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":82387,"byte_end":82419,"line_start":28,"line_end":28,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":82420,"byte_end":82423,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ // Return a vector containing the GZ compressed version of hello world","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":82424,"byte_end":82498,"line_start":30,"line_end":30,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":82499,"byte_end":82502,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ fn gzencode_hello_world() -> io::Result<Vec<u8>> {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":82503,"byte_end":82557,"line_start":32,"line_end":32,"column_start":1,"column_end":55}},{"value":"/     let mut ret_vec = [0;100];","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":82558,"byte_end":82592,"line_start":33,"line_end":33,"column_start":1,"column_end":35}},{"value":"/     let bytestring = b\"hello world\";","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":82593,"byte_end":82633,"line_start":34,"line_end":34,"column_start":1,"column_end":41}},{"value":"/     let mut gz = GzEncoder::new(&bytestring[..], Compression::fast());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":82634,"byte_end":82708,"line_start":35,"line_end":35,"column_start":1,"column_end":75}},{"value":"/     let count = gz.read(&mut ret_vec)?;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":82709,"byte_end":82752,"line_start":36,"line_end":36,"column_start":1,"column_end":44}},{"value":"/     Ok(ret_vec[0..count].to_vec())","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":82753,"byte_end":82791,"line_start":37,"line_end":37,"column_start":1,"column_end":39}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":82792,"byte_end":82797,"line_start":38,"line_end":38,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":82798,"byte_end":82805,"line_start":39,"line_end":39,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":367},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":83391,"byte_end":83394,"line_start":57,"line_end":57,"column_start":12,"column_end":15},"name":"new","qualname":"<GzEncoder<R>>::new","value":"fn (r: R, level: Compression) -> GzEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will use the given compression level.","sig":null,"attributes":[{"value":"/ Creates a new encoder which will use the given compression level.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":83050,"byte_end":83119,"line_start":50,"line_end":50,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":83124,"byte_end":83127,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ The encoder is not configured specially for the emitted header. For","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":83132,"byte_end":83203,"line_start":52,"line_end":52,"column_start":5,"column_end":76}},{"value":"/ header configuration, see the `GzBuilder` type.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":83208,"byte_end":83259,"line_start":53,"line_end":53,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":83264,"byte_end":83267,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ The data read from the stream `r` will be compressed and available","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":83272,"byte_end":83342,"line_start":55,"line_end":55,"column_start":5,"column_end":75}},{"value":"/ through the returned reader.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":83347,"byte_end":83379,"line_start":56,"line_end":56,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":83577,"byte_end":83584,"line_start":64,"line_end":64,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzEncoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying reader.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":83515,"byte_end":83565,"line_start":63,"line_end":63,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":83851,"byte_end":83858,"line_start":72,"line_end":72,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzEncoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying reader.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying reader.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":83650,"byte_end":83708,"line_start":68,"line_end":68,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":83713,"byte_end":83716,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the reader may result in surprising results if","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":83721,"byte_end":83793,"line_start":70,"line_end":70,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":83798,"byte_end":83839,"line_start":71,"line_end":71,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":84001,"byte_end":84011,"line_start":77,"line_end":77,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<GzEncoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying stream, consuming this encoder\n","sig":null,"attributes":[{"value":"/ Returns the underlying stream, consuming this encoder","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":83932,"byte_end":83989,"line_start":76,"line_end":76,"column_start":5,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":925},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":85476,"byte_end":85485,"line_start":133,"line_end":133,"column_start":12,"column_end":21},"name":"GzDecoder","qualname":"::gz::read::GzDecoder","value":"GzDecoder {  }","parent":null,"children":[{"krate":0,"index":927}],"decl_id":null,"docs":" A gzip streaming decoder","sig":null,"attributes":[{"value":"/ A gzip streaming decoder","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":84450,"byte_end":84478,"line_start":98,"line_end":98,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":84479,"byte_end":84482,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ This structure exposes a [`Read`] interface that will consume compressed","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":84483,"byte_end":84559,"line_start":100,"line_end":100,"column_start":1,"column_end":77}},{"value":"/ data from the underlying reader and emit uncompressed data.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":84560,"byte_end":84623,"line_start":101,"line_end":101,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":84624,"byte_end":84627,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":84628,"byte_end":84690,"line_start":103,"line_end":103,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":84691,"byte_end":84694,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":84695,"byte_end":84709,"line_start":105,"line_end":105,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":84710,"byte_end":84713,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":84714,"byte_end":84721,"line_start":107,"line_end":107,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":84722,"byte_end":84725,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":84726,"byte_end":84754,"line_start":109,"line_end":109,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":84755,"byte_end":84771,"line_start":110,"line_end":110,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":84772,"byte_end":84802,"line_start":111,"line_end":111,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::GzEncoder;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":84803,"byte_end":84838,"line_start":112,"line_end":112,"column_start":1,"column_end":36}},{"value":"/ use flate2::read::GzDecoder;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":84839,"byte_end":84871,"line_start":113,"line_end":113,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":84872,"byte_end":84875,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":84876,"byte_end":84893,"line_start":115,"line_end":115,"column_start":1,"column_end":18}},{"value":"/ #    let mut e = GzEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":84894,"byte_end":84966,"line_start":116,"line_end":116,"column_start":1,"column_end":73}},{"value":"/ #    e.write_all(b\"Hello World\").unwrap();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":84967,"byte_end":85013,"line_start":117,"line_end":117,"column_start":1,"column_end":47}},{"value":"/ #    let bytes = e.finish().unwrap();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":85014,"byte_end":85055,"line_start":118,"line_end":118,"column_start":1,"column_end":42}},{"value":"/ #    println!(\"{}\", decode_reader(bytes).unwrap());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":85056,"byte_end":85111,"line_start":119,"line_end":119,"column_start":1,"column_end":56}},{"value":"/ # }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":85112,"byte_end":85119,"line_start":120,"line_end":120,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":85120,"byte_end":85125,"line_start":121,"line_end":121,"column_start":1,"column_end":6}},{"value":"/ // Uncompresses a Gz Encoded vector of bytes and returns a string or error","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":85126,"byte_end":85204,"line_start":122,"line_end":122,"column_start":1,"column_end":79}},{"value":"/ // Here &[u8] implements Read","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":85205,"byte_end":85238,"line_start":123,"line_end":123,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":85239,"byte_end":85242,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ fn decode_reader(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":85243,"byte_end":85303,"line_start":125,"line_end":125,"column_start":1,"column_end":61}},{"value":"/    let mut gz = GzDecoder::new(&bytes[..]);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":85304,"byte_end":85351,"line_start":126,"line_end":126,"column_start":1,"column_end":48}},{"value":"/    let mut s = String::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":85352,"byte_end":85385,"line_start":127,"line_end":127,"column_start":1,"column_end":34}},{"value":"/    gz.read_to_string(&mut s)?;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":85386,"byte_end":85420,"line_start":128,"line_end":128,"column_start":1,"column_end":35}},{"value":"/    Ok(s)","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":85421,"byte_end":85433,"line_start":129,"line_end":129,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":85434,"byte_end":85439,"line_start":130,"line_end":130,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":85440,"byte_end":85447,"line_start":131,"line_end":131,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":85677,"byte_end":85680,"line_start":140,"line_end":140,"column_start":12,"column_end":15},"name":"new","qualname":"<GzDecoder<R>>::new","value":"fn (r: R) -> GzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder from the given reader, immediately parsing the\n gzip header.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder from the given reader, immediately parsing the","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":85572,"byte_end":85644,"line_start":138,"line_end":138,"column_start":5,"column_end":77}},{"value":"/ gzip header.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":85649,"byte_end":85665,"line_start":139,"line_end":139,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":385},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":85914,"byte_end":85920,"line_start":149,"line_end":149,"column_start":12,"column_end":18},"name":"header","qualname":"<GzDecoder<R>>::header","value":"fn (&self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the header associated with this stream, if it was valid.\n","sig":null,"attributes":[{"value":"/ Returns the header associated with this stream, if it was valid.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":85834,"byte_end":85902,"line_start":148,"line_end":148,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":86052,"byte_end":86059,"line_start":154,"line_end":154,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying reader.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":85990,"byte_end":86040,"line_start":153,"line_end":153,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":387},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":86326,"byte_end":86333,"line_start":162,"line_end":162,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":86125,"byte_end":86183,"line_start":158,"line_end":158,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":86188,"byte_end":86191,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":86196,"byte_end":86268,"line_start":160,"line_end":160,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":86273,"byte_end":86314,"line_start":161,"line_end":161,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":86478,"byte_end":86488,"line_start":167,"line_end":167,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<GzDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[{"value":"/ Consumes this decoder, returning the underlying reader.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":86407,"byte_end":86466,"line_start":166,"line_end":166,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":931},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":88714,"byte_end":88728,"line_start":239,"line_end":239,"column_start":12,"column_end":26},"name":"MultiGzDecoder","qualname":"::gz::read::MultiGzDecoder","value":"MultiGzDecoder {  }","parent":null,"children":[{"krate":0,"index":933}],"decl_id":null,"docs":" A gzip streaming decoder that decodes all members of a multistream","sig":null,"attributes":[{"value":"/ A gzip streaming decoder that decodes all members of a multistream","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":87186,"byte_end":87256,"line_start":198,"line_end":198,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":87257,"byte_end":87260,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ A gzip member consists of a header, compressed data and a trailer. The [gzip","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":87261,"byte_end":87341,"line_start":200,"line_end":200,"column_start":1,"column_end":81}},{"value":"/ specification](https://tools.ietf.org/html/rfc1952), however, allows multiple","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":87342,"byte_end":87423,"line_start":201,"line_end":201,"column_start":1,"column_end":82}},{"value":"/ gzip members to be joined in a single stream.  `MultiGzDecoder` will","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":87424,"byte_end":87496,"line_start":202,"line_end":202,"column_start":1,"column_end":73}},{"value":"/ decode all consecutive members while `GzDecoder` will only decompress the","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":87497,"byte_end":87574,"line_start":203,"line_end":203,"column_start":1,"column_end":78}},{"value":"/ first gzip member. The multistream format is commonly used in bioinformatics,","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":87575,"byte_end":87656,"line_start":204,"line_end":204,"column_start":1,"column_end":82}},{"value":"/ for example when using the BGZF compressed data.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":87657,"byte_end":87709,"line_start":205,"line_end":205,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":87710,"byte_end":87713,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ This structure exposes a [`Read`] interface that will consume all gzip members","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":87714,"byte_end":87796,"line_start":207,"line_end":207,"column_start":1,"column_end":83}},{"value":"/ from the underlying reader and emit uncompressed data.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":87797,"byte_end":87855,"line_start":208,"line_end":208,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":87856,"byte_end":87859,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":87860,"byte_end":87922,"line_start":210,"line_end":210,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":87923,"byte_end":87926,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":87927,"byte_end":87941,"line_start":212,"line_end":212,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":87942,"byte_end":87945,"line_start":213,"line_end":213,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":87946,"byte_end":87953,"line_start":214,"line_end":214,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":87954,"byte_end":87982,"line_start":215,"line_end":215,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":87983,"byte_end":87999,"line_start":216,"line_end":216,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":88000,"byte_end":88030,"line_start":217,"line_end":217,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::GzEncoder;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":88031,"byte_end":88066,"line_start":218,"line_end":218,"column_start":1,"column_end":36}},{"value":"/ use flate2::read::MultiGzDecoder;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":88067,"byte_end":88104,"line_start":219,"line_end":219,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":88105,"byte_end":88108,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":88109,"byte_end":88126,"line_start":221,"line_end":221,"column_start":1,"column_end":18}},{"value":"/ #    let mut e = GzEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":88127,"byte_end":88199,"line_start":222,"line_end":222,"column_start":1,"column_end":73}},{"value":"/ #    e.write_all(b\"Hello World\").unwrap();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":88200,"byte_end":88246,"line_start":223,"line_end":223,"column_start":1,"column_end":47}},{"value":"/ #    let bytes = e.finish().unwrap();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":88247,"byte_end":88288,"line_start":224,"line_end":224,"column_start":1,"column_end":42}},{"value":"/ #    println!(\"{}\", decode_reader(bytes).unwrap());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":88289,"byte_end":88344,"line_start":225,"line_end":225,"column_start":1,"column_end":56}},{"value":"/ # }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":88345,"byte_end":88352,"line_start":226,"line_end":226,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":88353,"byte_end":88358,"line_start":227,"line_end":227,"column_start":1,"column_end":6}},{"value":"/ // Uncompresses a Gz Encoded vector of bytes and returns a string or error","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":88359,"byte_end":88437,"line_start":228,"line_end":228,"column_start":1,"column_end":79}},{"value":"/ // Here &[u8] implements Read","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":88438,"byte_end":88471,"line_start":229,"line_end":229,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":88472,"byte_end":88475,"line_start":230,"line_end":230,"column_start":1,"column_end":4}},{"value":"/ fn decode_reader(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":88476,"byte_end":88536,"line_start":231,"line_end":231,"column_start":1,"column_end":61}},{"value":"/    let mut gz = MultiGzDecoder::new(&bytes[..]);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":88537,"byte_end":88589,"line_start":232,"line_end":232,"column_start":1,"column_end":53}},{"value":"/    let mut s = String::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":88590,"byte_end":88623,"line_start":233,"line_end":233,"column_start":1,"column_end":34}},{"value":"/    gz.read_to_string(&mut s)?;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":88624,"byte_end":88658,"line_start":234,"line_end":234,"column_start":1,"column_end":35}},{"value":"/    Ok(s)","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":88659,"byte_end":88671,"line_start":235,"line_end":235,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":88672,"byte_end":88677,"line_start":236,"line_end":236,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":88678,"byte_end":88685,"line_start":237,"line_end":237,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":89012,"byte_end":89015,"line_start":247,"line_end":247,"column_start":12,"column_end":15},"name":"new","qualname":"<MultiGzDecoder<R>>::new","value":"fn (r: R) -> MultiGzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder from the given reader, immediately parsing the\n (first) gzip header. If the gzip stream contains multiple members all will\n be decoded.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder from the given reader, immediately parsing the","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":88825,"byte_end":88897,"line_start":244,"line_end":244,"column_start":5,"column_end":77}},{"value":"/ (first) gzip header. If the gzip stream contains multiple members all will","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":88902,"byte_end":88980,"line_start":245,"line_end":245,"column_start":5,"column_end":83}},{"value":"/ be decoded.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":88985,"byte_end":89000,"line_start":246,"line_end":246,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":89275,"byte_end":89281,"line_start":256,"line_end":256,"column_start":12,"column_end":18},"name":"header","qualname":"<MultiGzDecoder<R>>::header","value":"fn (&self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the current header associated with this stream, if it's valid.\n","sig":null,"attributes":[{"value":"/ Returns the current header associated with this stream, if it's valid.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":89189,"byte_end":89263,"line_start":255,"line_end":255,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":89413,"byte_end":89420,"line_start":261,"line_end":261,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<MultiGzDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying reader.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":89351,"byte_end":89401,"line_start":260,"line_end":260,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":89687,"byte_end":89694,"line_start":269,"line_end":269,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<MultiGzDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":89486,"byte_end":89544,"line_start":265,"line_end":265,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":89549,"byte_end":89552,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":89557,"byte_end":89629,"line_start":267,"line_end":267,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":89634,"byte_end":89675,"line_start":268,"line_end":268,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":89839,"byte_end":89849,"line_start":274,"line_end":274,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<MultiGzDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[{"value":"/ Consumes this decoder, returning the underlying reader.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":89768,"byte_end":89827,"line_start":273,"line_end":273,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":937},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":91560,"byte_end":91569,"line_start":39,"line_end":39,"column_start":12,"column_end":21},"name":"GzEncoder","qualname":"::gz::write::GzEncoder","value":"GzEncoder {  }","parent":null,"children":[{"krate":0,"index":939},{"krate":0,"index":940},{"krate":0,"index":941},{"krate":0,"index":942}],"decl_id":null,"docs":" A gzip streaming encoder","sig":null,"attributes":[{"value":"/ A gzip streaming encoder","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":90919,"byte_end":90947,"line_start":16,"line_end":16,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":90948,"byte_end":90951,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ This structure exposes a [`Write`] interface that will emit compressed data","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":90952,"byte_end":91031,"line_start":18,"line_end":18,"column_start":1,"column_end":80}},{"value":"/ to the underlying writer `W`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":91032,"byte_end":91065,"line_start":19,"line_end":19,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":91066,"byte_end":91069,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":91070,"byte_end":91134,"line_start":21,"line_end":21,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":91135,"byte_end":91138,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":91139,"byte_end":91153,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":91154,"byte_end":91157,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":91158,"byte_end":91165,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":91166,"byte_end":91194,"line_start":26,"line_end":26,"column_start":1,"column_end":29}},{"value":"/ use flate2::Compression;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":91195,"byte_end":91223,"line_start":27,"line_end":27,"column_start":1,"column_end":29}},{"value":"/ use flate2::write::GzEncoder;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":91224,"byte_end":91257,"line_start":28,"line_end":28,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":91258,"byte_end":91261,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ // Vec<u8> implements Write to print the compressed bytes of sample string","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":91262,"byte_end":91340,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/ # fn main() {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":91341,"byte_end":91358,"line_start":31,"line_end":31,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":91359,"byte_end":91362,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ let mut e = GzEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":91363,"byte_end":91430,"line_start":33,"line_end":33,"column_start":1,"column_end":68}},{"value":"/ e.write_all(b\"Hello World\").unwrap();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":91431,"byte_end":91472,"line_start":34,"line_end":34,"column_start":1,"column_end":42}},{"value":"/ println!(\"{:?}\", e.finish().unwrap());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":91473,"byte_end":91515,"line_start":35,"line_end":35,"column_start":1,"column_end":43}},{"value":"/ # }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":91516,"byte_end":91523,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":91524,"byte_end":91531,"line_start":37,"line_end":37,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":435},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":92316,"byte_end":92319,"line_start":63,"line_end":63,"column_start":12,"column_end":15},"name":"new","qualname":"<GzEncoder<W>>::new","value":"fn (w: W, level: Compression) -> GzEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will use the given compression level.","sig":null,"attributes":[{"value":"/ Creates a new encoder which will use the given compression level.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":91975,"byte_end":92044,"line_start":56,"line_end":56,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":92049,"byte_end":92052,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ The encoder is not configured specially for the emitted header. For","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":92057,"byte_end":92128,"line_start":58,"line_end":58,"column_start":5,"column_end":76}},{"value":"/ header configuration, see the `GzBuilder` type.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":92133,"byte_end":92184,"line_start":59,"line_end":59,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":92189,"byte_end":92192,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ The data written to the returned encoder will be compressed and then","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":92197,"byte_end":92269,"line_start":61,"line_end":61,"column_start":5,"column_end":77}},{"value":"/ written to the stream `w`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":92274,"byte_end":92304,"line_start":62,"line_end":62,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":436},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":92478,"byte_end":92485,"line_start":68,"line_end":68,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzEncoder<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":92416,"byte_end":92466,"line_start":67,"line_end":67,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":437},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":92742,"byte_end":92749,"line_start":76,"line_end":76,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzEncoder<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":92541,"byte_end":92599,"line_start":72,"line_end":72,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":92604,"byte_end":92607,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the writer may result in surprising results if","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":92612,"byte_end":92684,"line_start":74,"line_end":74,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":92689,"byte_end":92730,"line_start":75,"line_end":75,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":438},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":93428,"byte_end":93438,"line_start":95,"line_end":95,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<GzEncoder<W>>::try_finish","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[{"value":"/ Attempt to finish this output stream, writing out final chunks of data.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":92813,"byte_end":92888,"line_start":80,"line_end":80,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":92893,"byte_end":92896,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ Note that this function can only be used once data has finished being","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":92901,"byte_end":92974,"line_start":82,"line_end":82,"column_start":5,"column_end":78}},{"value":"/ written to the output stream. After this function is called then further","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":92979,"byte_end":93055,"line_start":83,"line_end":83,"column_start":5,"column_end":81}},{"value":"/ calls to `write` may result in a panic.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":93060,"byte_end":93103,"line_start":84,"line_end":84,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":93108,"byte_end":93111,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":93116,"byte_end":93128,"line_start":86,"line_end":86,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":93133,"byte_end":93136,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ Attempts to write data to this stream may result in a panic after this","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":93141,"byte_end":93215,"line_start":88,"line_end":88,"column_start":5,"column_end":79}},{"value":"/ function is called.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":93220,"byte_end":93243,"line_start":89,"line_end":89,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":93248,"byte_end":93251,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":93256,"byte_end":93268,"line_start":91,"line_end":91,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":93273,"byte_end":93276,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":93281,"byte_end":93352,"line_start":93,"line_end":93,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":93357,"byte_end":93416,"line_start":94,"line_end":94,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":94811,"byte_end":94817,"line_start":131,"line_end":131,"column_start":12,"column_end":18},"name":"finish","qualname":"<GzEncoder<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Finish encoding this stream, returning the underlying writer once the\n encoding is done.","sig":null,"attributes":[{"value":"/ Finish encoding this stream, returning the underlying writer once the","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":94151,"byte_end":94224,"line_start":118,"line_end":118,"column_start":5,"column_end":78}},{"value":"/ encoding is done.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":94229,"byte_end":94250,"line_start":119,"line_end":119,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":94255,"byte_end":94258,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ Note that this function may not be suitable to call in a situation where","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":94263,"byte_end":94339,"line_start":121,"line_end":121,"column_start":5,"column_end":81}},{"value":"/ the underlying stream is an asynchronous I/O stream. To finish a stream","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":94344,"byte_end":94419,"line_start":122,"line_end":122,"column_start":5,"column_end":80}},{"value":"/ the `try_finish` (or `shutdown`) method should be used instead. To","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":94424,"byte_end":94494,"line_start":123,"line_end":123,"column_start":5,"column_end":75}},{"value":"/ re-acquire ownership of a stream it is safe to call this method after","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":94499,"byte_end":94572,"line_start":124,"line_end":124,"column_start":5,"column_end":78}},{"value":"/ `try_finish` or `shutdown` has returned `Ok`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":94577,"byte_end":94626,"line_start":125,"line_end":125,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":94631,"byte_end":94634,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":94639,"byte_end":94651,"line_start":127,"line_end":127,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":94656,"byte_end":94659,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":94664,"byte_end":94735,"line_start":129,"line_end":129,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":94740,"byte_end":94799,"line_start":130,"line_end":130,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":946},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":97281,"byte_end":97290,"line_start":219,"line_end":219,"column_start":12,"column_end":21},"name":"GzDecoder","qualname":"::gz::write::GzDecoder","value":"GzDecoder {  }","parent":null,"children":[{"krate":0,"index":948},{"krate":0,"index":949},{"krate":0,"index":950},{"krate":0,"index":951}],"decl_id":null,"docs":" A gzip streaming decoder","sig":null,"attributes":[{"value":"/ A gzip streaming decoder","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":96167,"byte_end":96195,"line_start":186,"line_end":186,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":96196,"byte_end":96199,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ This structure exposes a [`Write`] interface that will emit compressed data","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":96200,"byte_end":96279,"line_start":188,"line_end":188,"column_start":1,"column_end":80}},{"value":"/ to the underlying writer `W`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":96280,"byte_end":96313,"line_start":189,"line_end":189,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":96314,"byte_end":96317,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":96318,"byte_end":96382,"line_start":191,"line_end":191,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":96383,"byte_end":96386,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":96387,"byte_end":96401,"line_start":193,"line_end":193,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":96402,"byte_end":96405,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":96406,"byte_end":96413,"line_start":195,"line_end":195,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":96414,"byte_end":96442,"line_start":196,"line_end":196,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":96443,"byte_end":96459,"line_start":197,"line_end":197,"column_start":1,"column_end":17}},{"value":"/ use flate2::Compression;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":96460,"byte_end":96488,"line_start":198,"line_end":198,"column_start":1,"column_end":29}},{"value":"/ use flate2::write::{GzEncoder, GzDecoder};","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":96489,"byte_end":96535,"line_start":199,"line_end":199,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":96536,"byte_end":96539,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":96540,"byte_end":96557,"line_start":201,"line_end":201,"column_start":1,"column_end":18}},{"value":"/ #    let mut e = GzEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":96558,"byte_end":96630,"line_start":202,"line_end":202,"column_start":1,"column_end":73}},{"value":"/ #    e.write(b\"Hello World\").unwrap();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":96631,"byte_end":96673,"line_start":203,"line_end":203,"column_start":1,"column_end":43}},{"value":"/ #    let bytes = e.finish().unwrap();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":96674,"byte_end":96715,"line_start":204,"line_end":204,"column_start":1,"column_end":42}},{"value":"/ #    assert_eq!(\"Hello World\", decode_writer(bytes).unwrap());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":96716,"byte_end":96782,"line_start":205,"line_end":205,"column_start":1,"column_end":67}},{"value":"/ # }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":96783,"byte_end":96790,"line_start":206,"line_end":206,"column_start":1,"column_end":8}},{"value":"/ // Uncompresses a gzip encoded vector of bytes and returns a string or error","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":96791,"byte_end":96871,"line_start":207,"line_end":207,"column_start":1,"column_end":81}},{"value":"/ // Here Vec<u8> implements Write","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":96872,"byte_end":96908,"line_start":208,"line_end":208,"column_start":1,"column_end":37}},{"value":"/ fn decode_writer(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":96909,"byte_end":96969,"line_start":209,"line_end":209,"column_start":1,"column_end":61}},{"value":"/    let mut writer = Vec::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":96970,"byte_end":97005,"line_start":210,"line_end":210,"column_start":1,"column_end":36}},{"value":"/    let mut decoder = GzDecoder::new(writer);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":97006,"byte_end":97054,"line_start":211,"line_end":211,"column_start":1,"column_end":49}},{"value":"/    decoder.write_all(&bytes[..])?;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":97055,"byte_end":97093,"line_start":212,"line_end":212,"column_start":1,"column_end":39}},{"value":"/    writer = decoder.finish()?;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":97094,"byte_end":97128,"line_start":213,"line_end":213,"column_start":1,"column_end":35}},{"value":"/    let return_string = String::from_utf8(writer).expect(\"String parsing error\");","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":97129,"byte_end":97213,"line_start":214,"line_end":214,"column_start":1,"column_end":85}},{"value":"/    Ok(return_string)","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":97214,"byte_end":97238,"line_start":215,"line_end":215,"column_start":1,"column_end":25}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":97239,"byte_end":97244,"line_start":216,"line_end":216,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":97245,"byte_end":97252,"line_start":217,"line_end":217,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":97697,"byte_end":97700,"line_start":233,"line_end":233,"column_start":12,"column_end":15},"name":"new","qualname":"<GzDecoder<W>>::new","value":"fn (w: W) -> GzDecoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will write uncompressed data to the stream.","sig":null,"attributes":[{"value":"/ Creates a new decoder which will write uncompressed data to the stream.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":97502,"byte_end":97577,"line_start":229,"line_end":229,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":97582,"byte_end":97585,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ When this encoder is dropped or unwrapped the final pieces of data will","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":97590,"byte_end":97665,"line_start":231,"line_end":231,"column_start":5,"column_end":80}},{"value":"/ be flushed.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":97670,"byte_end":97685,"line_start":232,"line_end":232,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":455},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":98029,"byte_end":98035,"line_start":243,"line_end":243,"column_start":12,"column_end":18},"name":"header","qualname":"<GzDecoder<W>>::header","value":"fn (&self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the header associated with this stream.\n","sig":null,"attributes":[{"value":"/ Returns the header associated with this stream.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":97966,"byte_end":98017,"line_start":242,"line_end":242,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":98168,"byte_end":98175,"line_start":248,"line_end":248,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzDecoder<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":98106,"byte_end":98156,"line_start":247,"line_end":247,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":98462,"byte_end":98469,"line_start":256,"line_end":256,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzDecoder<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":98241,"byte_end":98299,"line_start":252,"line_end":252,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":98304,"byte_end":98307,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ Note that mutating the output/input state of the stream may corrupt this","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":98312,"byte_end":98388,"line_start":254,"line_end":254,"column_start":5,"column_end":81}},{"value":"/ object, so care must be taken when using this method.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":98393,"byte_end":98450,"line_start":255,"line_end":255,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":99122,"byte_end":99132,"line_start":275,"line_end":275,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<GzDecoder<W>>::try_finish","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[{"value":"/ Attempt to finish this output stream, writing out final chunks of data.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":98543,"byte_end":98618,"line_start":260,"line_end":260,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":98623,"byte_end":98626,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ Note that this function can only be used once data has finished being","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":98631,"byte_end":98704,"line_start":262,"line_end":262,"column_start":5,"column_end":78}},{"value":"/ written to the output stream. After this function is called then further","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":98709,"byte_end":98785,"line_start":263,"line_end":263,"column_start":5,"column_end":81}},{"value":"/ calls to `write` may result in a panic.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":98790,"byte_end":98833,"line_start":264,"line_end":264,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":98838,"byte_end":98841,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":98846,"byte_end":98858,"line_start":266,"line_end":266,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":98863,"byte_end":98866,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ Attempts to write data to this stream may result in a panic after this","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":98871,"byte_end":98945,"line_start":268,"line_end":268,"column_start":5,"column_end":79}},{"value":"/ function is called.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":98950,"byte_end":98973,"line_start":269,"line_end":269,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":98978,"byte_end":98981,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":98986,"byte_end":98998,"line_start":271,"line_end":271,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":99003,"byte_end":99006,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to finish the stream, returning any","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":99011,"byte_end":99081,"line_start":273,"line_end":273,"column_start":5,"column_end":75}},{"value":"/ errors which happen.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":99086,"byte_end":99110,"line_start":274,"line_end":274,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":459},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":99971,"byte_end":99977,"line_start":295,"line_end":295,"column_start":12,"column_end":18},"name":"finish","qualname":"<GzDecoder<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, flushing the output stream.","sig":null,"attributes":[{"value":"/ Consumes this decoder, flushing the output stream.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":99228,"byte_end":99282,"line_start":280,"line_end":280,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":99287,"byte_end":99290,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ This will flush the underlying data stream and then return the contained","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":99295,"byte_end":99371,"line_start":282,"line_end":282,"column_start":5,"column_end":81}},{"value":"/ writer if the flush succeeded.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":99376,"byte_end":99410,"line_start":283,"line_end":283,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":99415,"byte_end":99418,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ Note that this function may not be suitable to call in a situation where","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":99423,"byte_end":99499,"line_start":285,"line_end":285,"column_start":5,"column_end":81}},{"value":"/ the underlying stream is an asynchronous I/O stream. To finish a stream","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":99504,"byte_end":99579,"line_start":286,"line_end":286,"column_start":5,"column_end":80}},{"value":"/ the `try_finish` (or `shutdown`) method should be used instead. To","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":99584,"byte_end":99654,"line_start":287,"line_end":287,"column_start":5,"column_end":75}},{"value":"/ re-acquire ownership of a stream it is safe to call this method after","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":99659,"byte_end":99732,"line_start":288,"line_end":288,"column_start":5,"column_end":78}},{"value":"/ `try_finish` or `shutdown` has returned `Ok`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":99737,"byte_end":99786,"line_start":289,"line_end":289,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":99791,"byte_end":99794,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":99799,"byte_end":99811,"line_start":291,"line_end":291,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":99816,"byte_end":99819,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":99824,"byte_end":99895,"line_start":293,"line_end":293,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":99900,"byte_end":99959,"line_start":294,"line_end":294,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":955},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":51756,"byte_end":51764,"line_start":22,"line_end":22,"column_start":12,"column_end":20},"name":"GzHeader","qualname":"::gz::GzHeader","value":"GzHeader {  }","parent":null,"children":[{"krate":0,"index":956},{"krate":0,"index":957},{"krate":0,"index":958},{"krate":0,"index":959},{"krate":0,"index":960}],"decl_id":null,"docs":" A structure representing the header of a gzip stream.","sig":null,"attributes":[{"value":"/ A structure representing the header of a gzip stream.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":51551,"byte_end":51608,"line_start":17,"line_end":17,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":51609,"byte_end":51612,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ The header can contain metadata about the file that was compressed, if","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":51613,"byte_end":51687,"line_start":19,"line_end":19,"column_start":1,"column_end":75}},{"value":"/ present.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":51688,"byte_end":51700,"line_start":20,"line_end":20,"column_start":1,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":52007,"byte_end":52015,"line_start":32,"line_end":32,"column_start":12,"column_end":20},"name":"filename","qualname":"<GzHeader>::filename","value":"fn (&self) -> Option<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `filename` field of this gzip stream's header, if present.\n","sig":null,"attributes":[{"value":"/ Returns the `filename` field of this gzip stream's header, if present.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":51921,"byte_end":51995,"line_start":31,"line_end":31,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":52183,"byte_end":52188,"line_start":37,"line_end":37,"column_start":12,"column_end":17},"name":"extra","qualname":"<GzHeader>::extra","value":"fn (&self) -> Option<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `extra` field of this gzip stream's header, if present.\n","sig":null,"attributes":[{"value":"/ Returns the `extra` field of this gzip stream's header, if present.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":52100,"byte_end":52171,"line_start":36,"line_end":36,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":52355,"byte_end":52362,"line_start":42,"line_end":42,"column_start":12,"column_end":19},"name":"comment","qualname":"<GzHeader>::comment","value":"fn (&self) -> Option<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `comment` field of this gzip stream's header, if present.\n","sig":null,"attributes":[{"value":"/ Returns the `comment` field of this gzip stream's header, if present.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":52270,"byte_end":52343,"line_start":41,"line_end":41,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":52648,"byte_end":52664,"line_start":50,"line_end":50,"column_start":12,"column_end":28},"name":"operating_system","qualname":"<GzHeader>::operating_system","value":"fn (&self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the `operating_system` field of this gzip stream's header.","sig":null,"attributes":[{"value":"/ Returns the `operating_system` field of this gzip stream's header.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":52446,"byte_end":52516,"line_start":46,"line_end":46,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":52521,"byte_end":52524,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ There are predefined values for various operating systems.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":52529,"byte_end":52591,"line_start":48,"line_end":48,"column_start":5,"column_end":67}},{"value":"/ 255 means that the value is unknown.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":52596,"byte_end":52636,"line_start":49,"line_end":49,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":483},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":53286,"byte_end":53291,"line_start":63,"line_end":63,"column_start":12,"column_end":17},"name":"mtime","qualname":"<GzHeader>::mtime","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" This gives the most recent modification time of the original file being compressed.","sig":null,"attributes":[{"value":"/ This gives the most recent modification time of the original file being compressed.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":52721,"byte_end":52808,"line_start":54,"line_end":54,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":52813,"byte_end":52816,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ The time is in Unix format, i.e., seconds since 00:00:00 GMT, Jan. 1, 1970.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":52821,"byte_end":52900,"line_start":56,"line_end":56,"column_start":5,"column_end":84}},{"value":"/ (Note that this may cause problems for MS-DOS and other systems that use local","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":52905,"byte_end":52987,"line_start":57,"line_end":57,"column_start":5,"column_end":87}},{"value":"/ rather than Universal time.) If the compressed data did not come from a file,","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":52992,"byte_end":53073,"line_start":58,"line_end":58,"column_start":5,"column_end":86}},{"value":"/ `mtime` is set to the time at which compression started.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":53078,"byte_end":53138,"line_start":59,"line_end":59,"column_start":5,"column_end":65}},{"value":"/ `mtime` = 0 means no time stamp is available.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":53143,"byte_end":53192,"line_start":60,"line_end":60,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":53197,"byte_end":53200,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ The usage of `mtime` is discouraged because of Year 2038 problem.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":53205,"byte_end":53274,"line_start":62,"line_end":62,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":53686,"byte_end":53703,"line_start":74,"line_end":74,"column_start":12,"column_end":29},"name":"mtime_as_datetime","qualname":"<GzHeader>::mtime_as_datetime","value":"fn (&self) -> Option<time::SystemTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns the most recent modification time represented by a date-time type.\n Returns `None` if the value of the underlying counter is 0,\n indicating no time stamp is available.","sig":null,"attributes":[{"value":"/ Returns the most recent modification time represented by a date-time type.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":53338,"byte_end":53416,"line_start":67,"line_end":67,"column_start":5,"column_end":83}},{"value":"/ Returns `None` if the value of the underlying counter is 0,","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":53421,"byte_end":53484,"line_start":68,"line_end":68,"column_start":5,"column_end":68}},{"value":"/ indicating no time stamp is available.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":53489,"byte_end":53531,"line_start":69,"line_end":69,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":53536,"byte_end":53539,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":53544,"byte_end":53547,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ The time is measured as seconds since 00:00:00 GMT, Jan. 1 1970.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":53552,"byte_end":53620,"line_start":72,"line_end":72,"column_start":5,"column_end":73}},{"value":"/ See [`mtime`](#method.mtime) for more detail.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":53625,"byte_end":53674,"line_start":73,"line_end":73,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":971},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":54776,"byte_end":54785,"line_start":112,"line_end":112,"column_start":12,"column_end":21},"name":"GzBuilder","qualname":"::gz::GzBuilder","value":"GzBuilder {  }","parent":null,"children":[{"krate":0,"index":972},{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":975},{"krate":0,"index":976}],"decl_id":null,"docs":" A builder structure to create a new gzip Encoder.","sig":null,"attributes":[{"value":"/ A builder structure to create a new gzip Encoder.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":53980,"byte_end":54033,"line_start":85,"line_end":85,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":54034,"byte_end":54037,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ This structure controls header configuration options such as the filename.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":54038,"byte_end":54116,"line_start":87,"line_end":87,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":54117,"byte_end":54120,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":54121,"byte_end":54135,"line_start":89,"line_end":89,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":54136,"byte_end":54139,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":54140,"byte_end":54147,"line_start":91,"line_end":91,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":54148,"byte_end":54176,"line_start":92,"line_end":92,"column_start":1,"column_end":29}},{"value":"/ # use std::io;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":54177,"byte_end":54195,"line_start":93,"line_end":93,"column_start":1,"column_end":19}},{"value":"/ use std::fs::File;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":54196,"byte_end":54218,"line_start":94,"line_end":94,"column_start":1,"column_end":23}},{"value":"/ use flate2::GzBuilder;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":54219,"byte_end":54245,"line_start":95,"line_end":95,"column_start":1,"column_end":27}},{"value":"/ use flate2::Compression;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":54246,"byte_end":54274,"line_start":96,"line_end":96,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":54275,"byte_end":54278,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ // GzBuilder opens a file and writes a sample string using GzBuilder pattern","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":54279,"byte_end":54359,"line_start":98,"line_end":98,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":54360,"byte_end":54363,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ # fn sample_builder() -> Result<(), io::Error> {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":54364,"byte_end":54416,"line_start":100,"line_end":100,"column_start":1,"column_end":53}},{"value":"/ let f = File::create(\"examples/hello_world.gz\")?;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":54417,"byte_end":54470,"line_start":101,"line_end":101,"column_start":1,"column_end":54}},{"value":"/ let mut gz = GzBuilder::new()","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":54471,"byte_end":54504,"line_start":102,"line_end":102,"column_start":1,"column_end":34}},{"value":"/                 .filename(\"hello_world.txt\")","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":54505,"byte_end":54553,"line_start":103,"line_end":103,"column_start":1,"column_end":49}},{"value":"/                 .comment(\"test file, please delete\")","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":54554,"byte_end":54610,"line_start":104,"line_end":104,"column_start":1,"column_end":57}},{"value":"/                 .write(f, Compression::default());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":54611,"byte_end":54665,"line_start":105,"line_end":105,"column_start":1,"column_end":55}},{"value":"/ gz.write_all(b\"hello world\")?;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":54666,"byte_end":54700,"line_start":106,"line_end":106,"column_start":1,"column_end":35}},{"value":"/ gz.finish()?;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":54701,"byte_end":54718,"line_start":107,"line_end":107,"column_start":1,"column_end":18}},{"value":"/ # Ok(())","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":54719,"byte_end":54731,"line_start":108,"line_end":108,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":54732,"byte_end":54739,"line_start":109,"line_end":109,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":54740,"byte_end":54747,"line_start":110,"line_end":110,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":55020,"byte_end":55023,"line_start":122,"line_end":122,"column_start":12,"column_end":15},"name":"new","qualname":"<GzBuilder>::new","value":"fn () -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a new blank builder with no header by default.\n","sig":null,"attributes":[{"value":"/ Create a new blank builder with no header by default.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":54951,"byte_end":55008,"line_start":121,"line_end":121,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":487},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":55283,"byte_end":55288,"line_start":133,"line_end":133,"column_start":12,"column_end":17},"name":"mtime","qualname":"<GzBuilder>::mtime","value":"fn (mut self, mtime: u32) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `mtime` field in the gzip header.\n","sig":null,"attributes":[{"value":"/ Configure the `mtime` field in the gzip header.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":55220,"byte_end":55271,"line_start":132,"line_end":132,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":488},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":55452,"byte_end":55468,"line_start":139,"line_end":139,"column_start":12,"column_end":28},"name":"operating_system","qualname":"<GzBuilder>::operating_system","value":"fn (mut self, os: u8) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `operating_system` field in the gzip header.\n","sig":null,"attributes":[{"value":"/ Configure the `operating_system` field in the gzip header.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":55378,"byte_end":55440,"line_start":138,"line_end":138,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":55631,"byte_end":55636,"line_start":145,"line_end":145,"column_start":12,"column_end":17},"name":"extra","qualname":"<GzBuilder>::extra","value":"fn <T> (mut self, extra: T) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `extra` field in the gzip header.\n","sig":null,"attributes":[{"value":"/ Configure the `extra` field in the gzip header.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":55568,"byte_end":55619,"line_start":144,"line_end":144,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":491},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":55910,"byte_end":55918,"line_start":155,"line_end":155,"column_start":12,"column_end":20},"name":"filename","qualname":"<GzBuilder>::filename","value":"fn <T> (mut self, filename: T) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `filename` field in the gzip header.","sig":null,"attributes":[{"value":"/ Configure the `filename` field in the gzip header.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":55755,"byte_end":55809,"line_start":150,"line_end":150,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":55814,"byte_end":55817,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":55822,"byte_end":55834,"line_start":152,"line_end":152,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":55839,"byte_end":55842,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ Panics if the `filename` slice contains a zero.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":55847,"byte_end":55898,"line_start":154,"line_end":154,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":493},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":56222,"byte_end":56229,"line_start":165,"line_end":165,"column_start":12,"column_end":19},"name":"comment","qualname":"<GzBuilder>::comment","value":"fn <T> (mut self, comment: T) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `comment` field in the gzip header.","sig":null,"attributes":[{"value":"/ Configure the `comment` field in the gzip header.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":56069,"byte_end":56122,"line_start":160,"line_end":160,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":56127,"byte_end":56130,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":56135,"byte_end":56147,"line_start":162,"line_end":162,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":56152,"byte_end":56155,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ Panics if the `comment` slice contains a zero.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":56160,"byte_end":56210,"line_start":164,"line_end":164,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":495},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":56592,"byte_end":56597,"line_start":174,"line_end":174,"column_start":12,"column_end":17},"name":"write","qualname":"<GzBuilder>::write","value":"fn <W> (self, w: W, lvl: Compression) -> write::GzEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Consume this builder, creating a writer encoder in the process.","sig":null,"attributes":[{"value":"/ Consume this builder, creating a writer encoder in the process.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":56377,"byte_end":56444,"line_start":170,"line_end":170,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":56449,"byte_end":56452,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ The data written to the returned encoder will be compressed and then","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":56457,"byte_end":56529,"line_start":172,"line_end":172,"column_start":5,"column_end":77}},{"value":"/ written out to the supplied parameter `w`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":56534,"byte_end":56580,"line_start":173,"line_end":173,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":497},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":56941,"byte_end":56945,"line_start":182,"line_end":182,"column_start":12,"column_end":16},"name":"read","qualname":"<GzBuilder>::read","value":"fn <R> (self, r: R, lvl: Compression) -> read::GzEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Consume this builder, creating a reader encoder in the process.","sig":null,"attributes":[{"value":"/ Consume this builder, creating a reader encoder in the process.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":56731,"byte_end":56798,"line_start":178,"line_end":178,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":56803,"byte_end":56806,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ Data read from the returned encoder will be the compressed version of","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":56811,"byte_end":56884,"line_start":180,"line_end":180,"column_start":5,"column_end":78}},{"value":"/ the data read from the given reader.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":56889,"byte_end":56929,"line_start":181,"line_end":181,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":57294,"byte_end":57302,"line_start":190,"line_end":190,"column_start":12,"column_end":20},"name":"buf_read","qualname":"<GzBuilder>::buf_read","value":"fn <R> (self, r: R, lvl: Compression) -> bufread::GzEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Consume this builder, creating a reader encoder in the process.","sig":null,"attributes":[{"value":"/ Consume this builder, creating a reader encoder in the process.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":57084,"byte_end":57151,"line_start":186,"line_end":186,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":57156,"byte_end":57159,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ Data read from the returned encoder will be the compressed version of","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":57164,"byte_end":57237,"line_start":188,"line_end":188,"column_start":5,"column_end":78}},{"value":"/ the data read from the given reader.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":57242,"byte_end":57282,"line_start":189,"line_end":189,"column_start":5,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":979},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":107065,"byte_end":107073,"line_start":22,"line_end":22,"column_start":12,"column_end":20},"name":"Compress","qualname":"::mem::Compress","value":"Compress {  }","parent":null,"children":[{"krate":0,"index":980}],"decl_id":null,"docs":" Raw in-memory compression stream for blocks of data.","sig":null,"attributes":[{"value":"/ Raw in-memory compression stream for blocks of data.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":106460,"byte_end":106516,"line_start":9,"line_end":9,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":106517,"byte_end":106520,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This type is the building block for the I/O streams in the rest of this","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":106521,"byte_end":106596,"line_start":11,"line_end":11,"column_start":1,"column_end":76}},{"value":"/ crate. It requires more management than the [`Read`]/[`Write`] API but is","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":106597,"byte_end":106674,"line_start":12,"line_end":12,"column_start":1,"column_end":78}},{"value":"/ maximally flexible in terms of accepting input from any source and being","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":106675,"byte_end":106751,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/ able to produce output to any memory location.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":106752,"byte_end":106802,"line_start":14,"line_end":14,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":106803,"byte_end":106806,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ It is recommended to use the I/O stream adaptors over this type as they're","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":106807,"byte_end":106885,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"/ easier to use.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":106886,"byte_end":106904,"line_start":17,"line_end":17,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":106905,"byte_end":106908,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":106909,"byte_end":106971,"line_start":19,"line_end":19,"column_start":1,"column_end":63}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":106972,"byte_end":107036,"line_start":20,"line_end":20,"column_start":1,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":983},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":107706,"byte_end":107716,"line_start":39,"line_end":39,"column_start":12,"column_end":22},"name":"Decompress","qualname":"::mem::Decompress","value":"Decompress {  }","parent":null,"children":[{"krate":0,"index":984}],"decl_id":null,"docs":" Raw in-memory decompression stream for blocks of data.","sig":null,"attributes":[{"value":"/ Raw in-memory decompression stream for blocks of data.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":107099,"byte_end":107157,"line_start":26,"line_end":26,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":107158,"byte_end":107161,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ This type is the building block for the I/O streams in the rest of this","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":107162,"byte_end":107237,"line_start":28,"line_end":28,"column_start":1,"column_end":76}},{"value":"/ crate. It requires more management than the [`Read`]/[`Write`] API but is","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":107238,"byte_end":107315,"line_start":29,"line_end":29,"column_start":1,"column_end":78}},{"value":"/ maximally flexible in terms of accepting input from any source and being","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":107316,"byte_end":107392,"line_start":30,"line_end":30,"column_start":1,"column_end":77}},{"value":"/ able to produce output to any memory location.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":107393,"byte_end":107443,"line_start":31,"line_end":31,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":107444,"byte_end":107447,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ It is recommended to use the I/O stream adaptors over this type as they're","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":107448,"byte_end":107526,"line_start":33,"line_end":33,"column_start":1,"column_end":79}},{"value":"/ easier to use.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":107527,"byte_end":107545,"line_start":34,"line_end":34,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":107546,"byte_end":107549,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":107550,"byte_end":107612,"line_start":36,"line_end":36,"column_start":1,"column_end":63}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":107613,"byte_end":107677,"line_start":37,"line_end":37,"column_start":1,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":988},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":108145,"byte_end":108149,"line_start":50,"line_end":50,"column_start":5,"column_end":9},"name":"None","qualname":"::mem::FlushCompress::None","value":"FlushCompress::None","parent":{"krate":0,"index":987},"children":[],"decl_id":null,"docs":" A typical parameter for passing to compression/decompression functions,\n this indicates that the underlying stream to decide how much data to\n accumulate before producing output in order to maximize compression.\n","sig":null,"attributes":[{"value":"/ A typical parameter for passing to compression/decompression functions,","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":107911,"byte_end":107986,"line_start":47,"line_end":47,"column_start":5,"column_end":80}},{"value":"/ this indicates that the underlying stream to decide how much data to","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":107991,"byte_end":108063,"line_start":48,"line_end":48,"column_start":5,"column_end":77}},{"value":"/ accumulate before producing output in order to maximize compression.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":108068,"byte_end":108140,"line_start":49,"line_end":49,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":991},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":108600,"byte_end":108604,"line_start":59,"line_end":59,"column_start":5,"column_end":9},"name":"Sync","qualname":"::mem::FlushCompress::Sync","value":"FlushCompress::Sync","parent":{"krate":0,"index":987},"children":[],"decl_id":null,"docs":" All pending output is flushed to the output buffer and the output is\n aligned on a byte boundary so that the decompressor can get all input\n data available so far.","sig":null,"attributes":[{"value":"/ All pending output is flushed to the output buffer and the output is","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":108184,"byte_end":108256,"line_start":52,"line_end":52,"column_start":5,"column_end":77}},{"value":"/ aligned on a byte boundary so that the decompressor can get all input","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":108261,"byte_end":108334,"line_start":53,"line_end":53,"column_start":5,"column_end":78}},{"value":"/ data available so far.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":108339,"byte_end":108365,"line_start":54,"line_end":54,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":108370,"byte_end":108373,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ Flushing may degrade compression for some compression algorithms and so","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":108378,"byte_end":108453,"line_start":56,"line_end":56,"column_start":5,"column_end":80}},{"value":"/ it should only be used when necessary. This will complete the current","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":108458,"byte_end":108531,"line_start":57,"line_end":57,"column_start":5,"column_end":78}},{"value":"/ deflate block and follow it with an empty stored block.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":108536,"byte_end":108595,"line_start":58,"line_end":58,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":994},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":109137,"byte_end":109144,"line_start":69,"line_end":69,"column_start":5,"column_end":12},"name":"Partial","qualname":"::mem::FlushCompress::Partial","value":"FlushCompress::Partial","parent":{"krate":0,"index":987},"children":[],"decl_id":null,"docs":" All pending output is flushed to the output buffer, but the output is\n not aligned to a byte boundary.","sig":null,"attributes":[{"value":"/ All pending output is flushed to the output buffer, but the output is","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":108641,"byte_end":108714,"line_start":61,"line_end":61,"column_start":5,"column_end":78}},{"value":"/ not aligned to a byte boundary.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":108719,"byte_end":108754,"line_start":62,"line_end":62,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":108759,"byte_end":108762,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ All of the input data so far will be available to the decompressor (as","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":108767,"byte_end":108841,"line_start":64,"line_end":64,"column_start":5,"column_end":79}},{"value":"/ with `Flush::Sync`. This completes the current deflate block and follows","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":108846,"byte_end":108922,"line_start":65,"line_end":65,"column_start":5,"column_end":81}},{"value":"/ it with an empty fixed codes block that is 10 bites long, and it assures","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":108927,"byte_end":109003,"line_start":66,"line_end":66,"column_start":5,"column_end":81}},{"value":"/ that enough bytes are output in order for the decompessor to finish the","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":109008,"byte_end":109083,"line_start":67,"line_end":67,"column_start":5,"column_end":80}},{"value":"/ block before the empty fixed code block.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":109088,"byte_end":109132,"line_start":68,"line_end":68,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":997},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":109488,"byte_end":109492,"line_start":76,"line_end":76,"column_start":5,"column_end":9},"name":"Full","qualname":"::mem::FlushCompress::Full","value":"FlushCompress::Full","parent":{"krate":0,"index":987},"children":[],"decl_id":null,"docs":" All output is flushed as with `Flush::Sync` and the compression state is\n reset so decompression can restart from this point if previous\n compressed data has been damaged or if random access is desired.","sig":null,"attributes":[{"value":"/ All output is flushed as with `Flush::Sync` and the compression state is","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":109184,"byte_end":109260,"line_start":71,"line_end":71,"column_start":5,"column_end":81}},{"value":"/ reset so decompression can restart from this point if previous","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":109265,"byte_end":109331,"line_start":72,"line_end":72,"column_start":5,"column_end":71}},{"value":"/ compressed data has been damaged or if random access is desired.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":109336,"byte_end":109404,"line_start":73,"line_end":73,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":109409,"byte_end":109412,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ Using this option too often can seriously degrade compression.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":109417,"byte_end":109483,"line_start":75,"line_end":75,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1000},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":109720,"byte_end":109726,"line_start":82,"line_end":82,"column_start":5,"column_end":11},"name":"Finish","qualname":"::mem::FlushCompress::Finish","value":"FlushCompress::Finish","parent":{"krate":0,"index":987},"children":[],"decl_id":null,"docs":" Pending input is processed and pending output is flushed.","sig":null,"attributes":[{"value":"/ Pending input is processed and pending output is flushed.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":109529,"byte_end":109590,"line_start":78,"line_end":78,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":109595,"byte_end":109598,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ The return value may indicate that the stream is not yet done and more","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":109603,"byte_end":109677,"line_start":80,"line_end":80,"column_start":5,"column_end":79}},{"value":"/ data has yet to be processed.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":109682,"byte_end":109715,"line_start":81,"line_end":81,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1003},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":109778,"byte_end":109792,"line_start":85,"line_end":85,"column_start":5,"column_end":19},"name":"_Nonexhaustive","qualname":"::mem::FlushCompress::_Nonexhaustive","value":"FlushCompress::_Nonexhaustive","parent":{"krate":0,"index":987},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":987},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":107891,"byte_end":107904,"line_start":46,"line_end":46,"column_start":10,"column_end":23},"name":"FlushCompress","qualname":"::mem::FlushCompress","value":"FlushCompress::{None, Sync, Partial, Full, Finish, _Nonexhaustive}","parent":null,"children":[{"krate":0,"index":988},{"krate":0,"index":991},{"krate":0,"index":994},{"krate":0,"index":997},{"krate":0,"index":1000},{"krate":0,"index":1003}],"decl_id":null,"docs":" Values which indicate the form of flushing to be used when compressing\n in-memory data.\n","sig":null,"attributes":[{"value":"/ Values which indicate the form of flushing to be used when compressing","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":107787,"byte_end":107861,"line_start":44,"line_end":44,"column_start":1,"column_end":75}},{"value":"/ in-memory data.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":107862,"byte_end":107881,"line_start":45,"line_end":45,"column_start":1,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1017},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":110204,"byte_end":110208,"line_start":95,"line_end":95,"column_start":5,"column_end":9},"name":"None","qualname":"::mem::FlushDecompress::None","value":"FlushDecompress::None","parent":{"krate":0,"index":1016},"children":[],"decl_id":null,"docs":" A typical parameter for passing to compression/decompression functions,\n this indicates that the underlying stream to decide how much data to\n accumulate before producing output in order to maximize compression.\n","sig":null,"attributes":[{"value":"/ A typical parameter for passing to compression/decompression functions,","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":109970,"byte_end":110045,"line_start":92,"line_end":92,"column_start":5,"column_end":80}},{"value":"/ this indicates that the underlying stream to decide how much data to","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":110050,"byte_end":110122,"line_start":93,"line_end":93,"column_start":5,"column_end":77}},{"value":"/ accumulate before producing output in order to maximize compression.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":110127,"byte_end":110199,"line_start":94,"line_end":94,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1020},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":110659,"byte_end":110663,"line_start":104,"line_end":104,"column_start":5,"column_end":9},"name":"Sync","qualname":"::mem::FlushDecompress::Sync","value":"FlushDecompress::Sync","parent":{"krate":0,"index":1016},"children":[],"decl_id":null,"docs":" All pending output is flushed to the output buffer and the output is\n aligned on a byte boundary so that the decompressor can get all input\n data available so far.","sig":null,"attributes":[{"value":"/ All pending output is flushed to the output buffer and the output is","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":110243,"byte_end":110315,"line_start":97,"line_end":97,"column_start":5,"column_end":77}},{"value":"/ aligned on a byte boundary so that the decompressor can get all input","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":110320,"byte_end":110393,"line_start":98,"line_end":98,"column_start":5,"column_end":78}},{"value":"/ data available so far.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":110398,"byte_end":110424,"line_start":99,"line_end":99,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":110429,"byte_end":110432,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ Flushing may degrade compression for some compression algorithms and so","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":110437,"byte_end":110512,"line_start":101,"line_end":101,"column_start":5,"column_end":80}},{"value":"/ it should only be used when necessary. This will complete the current","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":110517,"byte_end":110590,"line_start":102,"line_end":102,"column_start":5,"column_end":78}},{"value":"/ deflate block and follow it with an empty stored block.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":110595,"byte_end":110654,"line_start":103,"line_end":103,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1023},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":110891,"byte_end":110897,"line_start":110,"line_end":110,"column_start":5,"column_end":11},"name":"Finish","qualname":"::mem::FlushDecompress::Finish","value":"FlushDecompress::Finish","parent":{"krate":0,"index":1016},"children":[],"decl_id":null,"docs":" Pending input is processed and pending output is flushed.","sig":null,"attributes":[{"value":"/ Pending input is processed and pending output is flushed.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":110700,"byte_end":110761,"line_start":106,"line_end":106,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":110766,"byte_end":110769,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ The return value may indicate that the stream is not yet done and more","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":110774,"byte_end":110848,"line_start":108,"line_end":108,"column_start":5,"column_end":79}},{"value":"/ data has yet to be processed.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":110853,"byte_end":110886,"line_start":109,"line_end":109,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1026},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":110949,"byte_end":110963,"line_start":113,"line_end":113,"column_start":5,"column_end":19},"name":"_Nonexhaustive","qualname":"::mem::FlushDecompress::_Nonexhaustive","value":"FlushDecompress::_Nonexhaustive","parent":{"krate":0,"index":1016},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1016},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":109948,"byte_end":109963,"line_start":91,"line_end":91,"column_start":10,"column_end":25},"name":"FlushDecompress","qualname":"::mem::FlushDecompress","value":"FlushDecompress::{None, Sync, Finish, _Nonexhaustive}","parent":null,"children":[{"krate":0,"index":1017},{"krate":0,"index":1020},{"krate":0,"index":1023},{"krate":0,"index":1026}],"decl_id":null,"docs":" Values which indicate the form of flushing to be used when\n decompressing in-memory data.\n","sig":null,"attributes":[{"value":"/ Values which indicate the form of flushing to be used when","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":109842,"byte_end":109904,"line_start":89,"line_end":89,"column_start":1,"column_end":63}},{"value":"/ decompressing in-memory data.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":109905,"byte_end":109938,"line_start":90,"line_end":90,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":1045},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":111291,"byte_end":111306,"line_start":125,"line_end":125,"column_start":12,"column_end":27},"name":"DecompressError","qualname":"::mem::DecompressError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error returned when a decompression object finds that the input stream of\n bytes was not a valid input stream of bytes.\n","sig":null,"attributes":[{"value":"/ Error returned when a decompression object finds that the input stream of","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":111136,"byte_end":111213,"line_start":122,"line_end":122,"column_start":1,"column_end":78}},{"value":"/ bytes was not a valid input stream of bytes.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":111214,"byte_end":111262,"line_start":123,"line_end":123,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":111553,"byte_end":111569,"line_start":132,"line_end":132,"column_start":12,"column_end":28},"name":"needs_dictionary","qualname":"<DecompressError>::needs_dictionary","value":"fn (&self) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Indicates whether decompression failed due to requiring a dictionary.","sig":null,"attributes":[{"value":"/ Indicates whether decompression failed due to requiring a dictionary.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":111369,"byte_end":111442,"line_start":128,"line_end":128,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":111447,"byte_end":111450,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ The resulting integer is the Adler-32 checksum of the dictionary","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":111455,"byte_end":111523,"line_start":130,"line_end":130,"column_start":5,"column_end":73}},{"value":"/ required.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":111528,"byte_end":111541,"line_start":131,"line_end":131,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":1050},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":112085,"byte_end":112098,"line_start":152,"line_end":152,"column_start":12,"column_end":25},"name":"CompressError","qualname":"::mem::CompressError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error returned when a compression object is used incorrectly or otherwise\n generates an error.\n","sig":null,"attributes":[{"value":"/ Error returned when a compression object is used incorrectly or otherwise","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":111955,"byte_end":112032,"line_start":149,"line_end":149,"column_start":1,"column_end":78}},{"value":"/ generates an error.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":112033,"byte_end":112056,"line_start":150,"line_end":150,"column_start":1,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1056},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":112466,"byte_end":112468,"line_start":162,"line_end":162,"column_start":5,"column_end":7},"name":"Ok","qualname":"::mem::Status::Ok","value":"Status::Ok","parent":{"krate":0,"index":1055},"children":[],"decl_id":null,"docs":" Indicates success.","sig":null,"attributes":[{"value":"/ Indicates success.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":112287,"byte_end":112309,"line_start":158,"line_end":158,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":112314,"byte_end":112317,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ Means that more input may be needed but isn't available","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":112322,"byte_end":112381,"line_start":160,"line_end":160,"column_start":5,"column_end":64}},{"value":"/ and/or there's more output to be written but the output buffer is full.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":112386,"byte_end":112461,"line_start":161,"line_end":161,"column_start":5,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1058},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":112947,"byte_end":112955,"line_start":173,"line_end":173,"column_start":5,"column_end":13},"name":"BufError","qualname":"::mem::Status::BufError","value":"Status::BufError","parent":{"krate":0,"index":1055},"children":[],"decl_id":null,"docs":" Indicates that forward progress is not possible due to input or output\n buffers being empty.","sig":null,"attributes":[{"value":"/ Indicates that forward progress is not possible due to input or output","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":112475,"byte_end":112549,"line_start":164,"line_end":164,"column_start":5,"column_end":79}},{"value":"/ buffers being empty.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":112554,"byte_end":112578,"line_start":165,"line_end":165,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":112583,"byte_end":112586,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ For compression it means the input buffer needs some more data or the","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":112591,"byte_end":112664,"line_start":167,"line_end":167,"column_start":5,"column_end":78}},{"value":"/ output buffer needs to be freed up before trying again.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":112669,"byte_end":112728,"line_start":168,"line_end":168,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":112733,"byte_end":112736,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ For decompression this means that more input is needed to continue or","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":112741,"byte_end":112814,"line_start":170,"line_end":170,"column_start":5,"column_end":78}},{"value":"/ the output buffer isn't large enough to contain the result. The function","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":112819,"byte_end":112895,"line_start":171,"line_end":171,"column_start":5,"column_end":81}},{"value":"/ can be called again after fixing both.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":112900,"byte_end":112942,"line_start":172,"line_end":172,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1060},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":113237,"byte_end":113246,"line_start":180,"line_end":180,"column_start":5,"column_end":14},"name":"StreamEnd","qualname":"::mem::Status::StreamEnd","value":"Status::StreamEnd","parent":{"krate":0,"index":1055},"children":[],"decl_id":null,"docs":" Indicates that all input has been consumed and all output bytes have\n been written. Decompression/compression should not be called again.","sig":null,"attributes":[{"value":"/ Indicates that all input has been consumed and all output bytes have","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":112962,"byte_end":113034,"line_start":175,"line_end":175,"column_start":5,"column_end":77}},{"value":"/ been written. Decompression/compression should not be called again.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":113039,"byte_end":113110,"line_start":176,"line_end":176,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":113115,"byte_end":113118,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ For decompression with zlib streams the adler-32 of the decompressed","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":113123,"byte_end":113195,"line_start":178,"line_end":178,"column_start":5,"column_end":77}},{"value":"/ data has also been verified.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":113200,"byte_end":113232,"line_start":179,"line_end":179,"column_start":5,"column_end":37}}]},{"kind":"Enum","id":{"krate":0,"index":1055},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":112274,"byte_end":112280,"line_start":157,"line_end":157,"column_start":10,"column_end":16},"name":"Status","qualname":"::mem::Status","value":"Status::{Ok, BufError, StreamEnd}","parent":null,"children":[{"krate":0,"index":1056},{"krate":0,"index":1058},{"krate":0,"index":1060}],"decl_id":null,"docs":" Possible status results of compressing some data or successfully\n decompressing a block of data.\n","sig":null,"attributes":[{"value":"/ Possible status results of compressing some data or successfully","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":112116,"byte_end":112184,"line_start":154,"line_end":154,"column_start":1,"column_end":69}},{"value":"/ decompressing a block of data.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":112185,"byte_end":112219,"line_start":155,"line_end":155,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":113570,"byte_end":113573,"line_start":189,"line_end":189,"column_start":12,"column_end":15},"name":"new","qualname":"<Compress>::new","value":"fn (level: Compression, zlib_header: bool) -> Compress","parent":null,"children":[],"decl_id":null,"docs":" Creates a new object ready for compressing data that it's given.","sig":null,"attributes":[{"value":"/ Creates a new object ready for compressing data that it's given.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":113271,"byte_end":113339,"line_start":184,"line_end":184,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":113344,"byte_end":113347,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ The `level` argument here indicates what level of compression is going","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":113352,"byte_end":113426,"line_start":186,"line_end":186,"column_start":5,"column_end":79}},{"value":"/ to be performed, and the `zlib_header` argument indicates whether the","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":113431,"byte_end":113504,"line_start":187,"line_end":187,"column_start":5,"column_end":78}},{"value":"/ output data should have a zlib header or not.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":113509,"byte_end":113558,"line_start":188,"line_end":188,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":114881,"byte_end":114889,"line_start":225,"line_end":225,"column_start":12,"column_end":20},"name":"total_in","qualname":"<Compress>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of input bytes which have been processed by\n this compression object.\n","sig":null,"attributes":[{"value":"/ Returns the total number of input bytes which have been processed by","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":114764,"byte_end":114836,"line_start":223,"line_end":223,"column_start":5,"column_end":77}},{"value":"/ this compression object.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":114841,"byte_end":114869,"line_start":224,"line_end":224,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":115064,"byte_end":115073,"line_start":231,"line_end":231,"column_start":12,"column_end":21},"name":"total_out","qualname":"<Compress>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of output bytes which have been produced by\n this compression object.\n","sig":null,"attributes":[{"value":"/ Returns the total number of output bytes which have been produced by","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":114947,"byte_end":115019,"line_start":229,"line_end":229,"column_start":5,"column_end":77}},{"value":"/ this compression object.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":115024,"byte_end":115052,"line_start":230,"line_end":230,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":525},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":116015,"byte_end":116020,"line_start":256,"line_end":256,"column_start":12,"column_end":17},"name":"reset","qualname":"<Compress>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Quickly resets this compressor without having to reallocate anything.","sig":null,"attributes":[{"value":"/ Quickly resets this compressor without having to reallocate anything.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":115842,"byte_end":115915,"line_start":253,"line_end":253,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":115920,"byte_end":115923,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ This is equivalent to dropping this object and then creating a new one.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":115928,"byte_end":116003,"line_start":255,"line_end":255,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":117505,"byte_end":117513,"line_start":291,"line_end":291,"column_start":12,"column_end":20},"name":"compress","qualname":"<Compress>::compress","value":"fn (&mut self, input: &[u8], output: &mut [u8], flush: FlushCompress) -> Result<Status, CompressError>","parent":null,"children":[],"decl_id":null,"docs":" Compresses the input data into the output, consuming only as much\n input as needed and writing as much output as possible.","sig":null,"attributes":[{"value":"/ Compresses the input data into the output, consuming only as much","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":117104,"byte_end":117173,"line_start":284,"line_end":284,"column_start":5,"column_end":74}},{"value":"/ input as needed and writing as much output as possible.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":117178,"byte_end":117237,"line_start":285,"line_end":285,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":117242,"byte_end":117245,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ The flush option can be any of the available `FlushCompress` parameters.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":117250,"byte_end":117326,"line_start":287,"line_end":287,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":117331,"byte_end":117334,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ To learn how much data was consumed or how much output was produced, use","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":117339,"byte_end":117415,"line_start":289,"line_end":289,"column_start":5,"column_end":81}},{"value":"/ the `total_in` and `total_out` functions before/after this is called.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":117420,"byte_end":117493,"line_start":290,"line_end":290,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":118214,"byte_end":118226,"line_start":308,"line_end":308,"column_start":12,"column_end":24},"name":"compress_vec","qualname":"<Compress>::compress_vec","value":"fn (&mut self, input: &[u8], output: &mut Vec<u8>, flush: FlushCompress) -> Result<Status, CompressError>","parent":null,"children":[],"decl_id":null,"docs":" Compresses the input data into the extra space of the output, consuming\n only as much input as needed and writing as much output as possible.","sig":null,"attributes":[{"value":"/ Compresses the input data into the extra space of the output, consuming","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":117715,"byte_end":117790,"line_start":300,"line_end":300,"column_start":5,"column_end":80}},{"value":"/ only as much input as needed and writing as much output as possible.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":117795,"byte_end":117867,"line_start":301,"line_end":301,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":117872,"byte_end":117875,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ This function has the same semantics as `compress`, except that the","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":117880,"byte_end":117951,"line_start":303,"line_end":303,"column_start":5,"column_end":76}},{"value":"/ length of `vec` is managed by this function. This will not reallocate","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":117956,"byte_end":118029,"line_start":304,"line_end":304,"column_start":5,"column_end":78}},{"value":"/ the vector provided or attempt to grow it, so space for the output must","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":118034,"byte_end":118109,"line_start":305,"line_end":305,"column_start":5,"column_end":80}},{"value":"/ be reserved in the output vector by the caller before calling this","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":118114,"byte_end":118184,"line_start":306,"line_end":306,"column_start":5,"column_end":75}},{"value":"/ function.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":118189,"byte_end":118202,"line_start":307,"line_end":307,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":529},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":119070,"byte_end":119073,"line_start":335,"line_end":335,"column_start":12,"column_end":15},"name":"new","qualname":"<Decompress>::new","value":"fn (zlib_header: bool) -> Decompress","parent":null,"children":[],"decl_id":null,"docs":" Creates a new object ready for decompressing data that it's given.","sig":null,"attributes":[{"value":"/ Creates a new object ready for decompressing data that it's given.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":118862,"byte_end":118932,"line_start":331,"line_end":331,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":118937,"byte_end":118940,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ The `zlib_header` argument indicates whether the input data is expected","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":118945,"byte_end":119020,"line_start":333,"line_end":333,"column_start":5,"column_end":80}},{"value":"/ to have a zlib header or not.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":119025,"byte_end":119058,"line_start":334,"line_end":334,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":120207,"byte_end":120215,"line_start":365,"line_end":365,"column_start":12,"column_end":20},"name":"total_in","qualname":"<Decompress>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of input bytes which have been processed by\n this decompression object.\n","sig":null,"attributes":[{"value":"/ Returns the total number of input bytes which have been processed by","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":120088,"byte_end":120160,"line_start":363,"line_end":363,"column_start":5,"column_end":77}},{"value":"/ this decompression object.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":120165,"byte_end":120195,"line_start":364,"line_end":364,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":120392,"byte_end":120401,"line_start":371,"line_end":371,"column_start":12,"column_end":21},"name":"total_out","qualname":"<Decompress>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of output bytes which have been produced by\n this decompression object.\n","sig":null,"attributes":[{"value":"/ Returns the total number of output bytes which have been produced by","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":120273,"byte_end":120345,"line_start":369,"line_end":369,"column_start":5,"column_end":77}},{"value":"/ this decompression object.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":120350,"byte_end":120380,"line_start":370,"line_end":370,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":121600,"byte_end":121610,"line_start":397,"line_end":397,"column_start":12,"column_end":22},"name":"decompress","qualname":"<Decompress>::decompress","value":"fn (&mut self, input: &[u8], output: &mut [u8], flush: FlushDecompress) -> Result<Status, DecompressError>","parent":null,"children":[],"decl_id":null,"docs":" Decompresses the input data into the output, consuming only as much\n input as needed and writing as much output as possible.","sig":null,"attributes":[{"value":"/ Decompresses the input data into the output, consuming only as much","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":120460,"byte_end":120531,"line_start":375,"line_end":375,"column_start":5,"column_end":76}},{"value":"/ input as needed and writing as much output as possible.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":120536,"byte_end":120595,"line_start":376,"line_end":376,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":120600,"byte_end":120603,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ The flush option can be any of the available `FlushDecompress` parameters.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":120608,"byte_end":120686,"line_start":378,"line_end":378,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":120691,"byte_end":120694,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ If the first call passes `FlushDecompress::Finish` it is assumed that","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":120699,"byte_end":120772,"line_start":380,"line_end":380,"column_start":5,"column_end":78}},{"value":"/ the input and output buffers are both sized large enough to decompress","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":120777,"byte_end":120851,"line_start":381,"line_end":381,"column_start":5,"column_end":79}},{"value":"/ the entire stream in a single call.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":120856,"byte_end":120895,"line_start":382,"line_end":382,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":120900,"byte_end":120903,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ A flush value of `FlushDecompress::Finish` indicates that there are no","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":120908,"byte_end":120982,"line_start":384,"line_end":384,"column_start":5,"column_end":79}},{"value":"/ more source bytes available beside what's already in the input buffer,","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":120987,"byte_end":121061,"line_start":385,"line_end":385,"column_start":5,"column_end":79}},{"value":"/ and the output buffer is large enough to hold the rest of the","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":121066,"byte_end":121131,"line_start":386,"line_end":386,"column_start":5,"column_end":70}},{"value":"/ decompressed data.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":121136,"byte_end":121158,"line_start":387,"line_end":387,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":121163,"byte_end":121166,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ To learn how much data was consumed or how much output was produced, use","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":121171,"byte_end":121247,"line_start":389,"line_end":389,"column_start":5,"column_end":81}},{"value":"/ the `total_in` and `total_out` functions before/after this is called.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":121252,"byte_end":121325,"line_start":390,"line_end":390,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":121330,"byte_end":121333,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":121338,"byte_end":121350,"line_start":392,"line_end":392,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":121355,"byte_end":121358,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ If the input data to this instance of `Decompress` is not a valid","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":121363,"byte_end":121432,"line_start":394,"line_end":394,"column_start":5,"column_end":74}},{"value":"/ zlib/deflate stream then this function may return an instance of","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":121437,"byte_end":121505,"line_start":395,"line_end":395,"column_start":5,"column_end":73}},{"value":"/ `DecompressError` to indicate that the stream of input bytes is corrupted.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":121510,"byte_end":121588,"line_start":396,"line_end":396,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":122534,"byte_end":122548,"line_start":420,"line_end":420,"column_start":12,"column_end":26},"name":"decompress_vec","qualname":"<Decompress>::decompress_vec","value":"fn (&mut self, input: &[u8], output: &mut Vec<u8>, flush: FlushDecompress) -> Result<Status, DecompressError>","parent":null,"children":[],"decl_id":null,"docs":" Decompresses the input data into the extra space in the output vector\n specified by `output`.","sig":null,"attributes":[{"value":"/ Decompresses the input data into the extra space in the output vector","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":121818,"byte_end":121891,"line_start":406,"line_end":406,"column_start":5,"column_end":78}},{"value":"/ specified by `output`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":121896,"byte_end":121922,"line_start":407,"line_end":407,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":121927,"byte_end":121930,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ This function has the same semantics as `decompress`, except that the","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":121935,"byte_end":122008,"line_start":409,"line_end":409,"column_start":5,"column_end":78}},{"value":"/ length of `vec` is managed by this function. This will not reallocate","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":122013,"byte_end":122086,"line_start":410,"line_end":410,"column_start":5,"column_end":78}},{"value":"/ the vector provided or attempt to grow it, so space for the output must","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":122091,"byte_end":122166,"line_start":411,"line_end":411,"column_start":5,"column_end":80}},{"value":"/ be reserved in the output vector by the caller before calling this","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":122171,"byte_end":122241,"line_start":412,"line_end":412,"column_start":5,"column_end":75}},{"value":"/ function.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":122246,"byte_end":122259,"line_start":413,"line_end":413,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":122264,"byte_end":122267,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":122272,"byte_end":122284,"line_start":415,"line_end":415,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":122289,"byte_end":122292,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ If the input data to this instance of `Decompress` is not a valid","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":122297,"byte_end":122366,"line_start":417,"line_end":417,"column_start":5,"column_end":74}},{"value":"/ zlib/deflate stream then this function may return an instance of","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":122371,"byte_end":122439,"line_start":418,"line_end":418,"column_start":5,"column_end":73}},{"value":"/ `DecompressError` to indicate that the stream of input bytes is corrupted.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":122444,"byte_end":122522,"line_start":419,"line_end":419,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":124372,"byte_end":124377,"line_start":468,"line_end":468,"column_start":12,"column_end":17},"name":"reset","qualname":"<Decompress>::reset","value":"fn (&mut self, zlib_header: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Performs the equivalent of replacing this decompression state with a\n freshly allocated copy.","sig":null,"attributes":[{"value":"/ Performs the equivalent of replacing this decompression state with a","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":123992,"byte_end":124064,"line_start":460,"line_end":460,"column_start":5,"column_end":77}},{"value":"/ freshly allocated copy.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":124069,"byte_end":124096,"line_start":461,"line_end":461,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":124101,"byte_end":124104,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ This function may not allocate memory, though, and attempts to reuse any","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":124109,"byte_end":124185,"line_start":463,"line_end":463,"column_start":5,"column_end":81}},{"value":"/ previously existing resources.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":124190,"byte_end":124224,"line_start":464,"line_end":464,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":124229,"byte_end":124232,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ The argument provided here indicates whether the reset state will","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":124237,"byte_end":124306,"line_start":466,"line_end":466,"column_start":5,"column_end":74}},{"value":"/ attempt to decode a zlib header first or not.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":124311,"byte_end":124360,"line_start":467,"line_end":467,"column_start":5,"column_end":54}}]},{"kind":"Type","id":{"krate":0,"index":557},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zio.rs","byte_start":130848,"byte_end":130853,"line_start":15,"line_end":15,"column_start":10,"column_end":15},"name":"Flush","qualname":"::zio::Ops::Flush","value":"type Flush: Flush;","parent":{"krate":0,"index":556},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1083},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":144713,"byte_end":144724,"line_start":41,"line_end":41,"column_start":12,"column_end":23},"name":"ZlibEncoder","qualname":"::zlib::bufread::ZlibEncoder","value":"ZlibEncoder {  }","parent":null,"children":[{"krate":0,"index":1085},{"krate":0,"index":1086}],"decl_id":null,"docs":" A ZLIB encoder, or compressor.","sig":null,"attributes":[{"value":"/ A ZLIB encoder, or compressor.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":143871,"byte_end":143905,"line_start":13,"line_end":13,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":143906,"byte_end":143909,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`BufRead`] interface and will read uncompressed","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":143910,"byte_end":143990,"line_start":15,"line_end":15,"column_start":1,"column_end":81}},{"value":"/ data from an underlying stream and emit a stream of compressed data.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":143991,"byte_end":144063,"line_start":16,"line_end":16,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":144064,"byte_end":144067,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ [`BufRead`]: https://doc.rust-lang.org/std/io/trait.BufRead.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":144068,"byte_end":144136,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":144137,"byte_end":144140,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":144141,"byte_end":144155,"line_start":20,"line_end":20,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":144156,"byte_end":144159,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":144160,"byte_end":144167,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":144168,"byte_end":144196,"line_start":23,"line_end":23,"column_start":1,"column_end":29}},{"value":"/ use flate2::Compression;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":144197,"byte_end":144225,"line_start":24,"line_end":24,"column_start":1,"column_end":29}},{"value":"/ use flate2::bufread::ZlibEncoder;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":144226,"byte_end":144263,"line_start":25,"line_end":25,"column_start":1,"column_end":38}},{"value":"/ use std::fs::File;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":144264,"byte_end":144286,"line_start":26,"line_end":26,"column_start":1,"column_end":23}},{"value":"/ use std::io::BufReader;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":144287,"byte_end":144314,"line_start":27,"line_end":27,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":144315,"byte_end":144318,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ // Use a buffered file to compress contents into a Vec<u8>","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":144319,"byte_end":144381,"line_start":29,"line_end":29,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":144382,"byte_end":144385,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # fn open_hello_world() -> std::io::Result<Vec<u8>> {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":144386,"byte_end":144443,"line_start":31,"line_end":31,"column_start":1,"column_end":58}},{"value":"/ let f = File::open(\"examples/hello_world.txt\")?;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":144444,"byte_end":144496,"line_start":32,"line_end":32,"column_start":1,"column_end":53}},{"value":"/ let b = BufReader::new(f);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":144497,"byte_end":144527,"line_start":33,"line_end":33,"column_start":1,"column_end":31}},{"value":"/ let mut z = ZlibEncoder::new(b, Compression::fast());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":144528,"byte_end":144585,"line_start":34,"line_end":34,"column_start":1,"column_end":58}},{"value":"/ let mut buffer = Vec::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":144586,"byte_end":144618,"line_start":35,"line_end":35,"column_start":1,"column_end":33}},{"value":"/ z.read_to_end(&mut buffer)?;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":144619,"byte_end":144651,"line_start":36,"line_end":36,"column_start":1,"column_end":33}},{"value":"/ # Ok(buffer)","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":144652,"byte_end":144668,"line_start":37,"line_end":37,"column_start":1,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":144669,"byte_end":144676,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":144677,"byte_end":144684,"line_start":39,"line_end":39,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":144936,"byte_end":144939,"line_start":49,"line_end":49,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibEncoder<R>>::new","value":"fn (r: R, level: crate::Compression) -> ZlibEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder which will read uncompressed data from the given","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":144803,"byte_end":144877,"line_start":47,"line_end":47,"column_start":5,"column_end":79}},{"value":"/ stream and emit the compressed stream.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":144882,"byte_end":144924,"line_start":48,"line_end":48,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":145591,"byte_end":145596,"line_start":69,"line_end":69,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibEncoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this encoder entirely, swapping out the input","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":145212,"byte_end":145281,"line_start":62,"line_end":62,"column_start":5,"column_end":74}},{"value":"/ stream for another.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":145286,"byte_end":145309,"line_start":63,"line_end":63,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":145314,"byte_end":145317,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ This function will reset the internal state of this encoder and replace","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":145322,"byte_end":145397,"line_start":65,"line_end":65,"column_start":5,"column_end":80}},{"value":"/ the input stream with the one provided, returning the previous input","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":145402,"byte_end":145474,"line_start":66,"line_end":66,"column_start":5,"column_end":77}},{"value":"/ stream. Future data read from this encoder will be the compressed","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":145479,"byte_end":145548,"line_start":67,"line_end":67,"column_start":5,"column_end":74}},{"value":"/ version of `r`'s data.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":145553,"byte_end":145579,"line_start":68,"line_end":68,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":145766,"byte_end":145773,"line_start":75,"line_end":75,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibEncoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying reader","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":145705,"byte_end":145754,"line_start":74,"line_end":74,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":629},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":146018,"byte_end":146025,"line_start":83,"line_end":83,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibEncoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":145818,"byte_end":145875,"line_start":79,"line_end":79,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":145880,"byte_end":145883,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":145888,"byte_end":145960,"line_start":81,"line_end":81,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":145965,"byte_end":146006,"line_start":82,"line_end":82,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":630},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":146153,"byte_end":146163,"line_start":88,"line_end":88,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ZlibEncoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.\n","sig":null,"attributes":[{"value":"/ Consumes this encoder, returning the underlying reader.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":146082,"byte_end":146141,"line_start":87,"line_end":87,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":631},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":146434,"byte_end":146442,"line_start":96,"line_end":96,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibEncoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been read into this compressor.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that have been read into this compressor.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":146205,"byte_end":146278,"line_start":92,"line_end":92,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":146283,"byte_end":146286,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes read from the underlying object may be accounted","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":146291,"byte_end":146367,"line_start":94,"line_end":94,"column_start":5,"column_end":81}},{"value":"/ for, there may still be some active buffering.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":146372,"byte_end":146422,"line_start":95,"line_end":95,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":146676,"byte_end":146685,"line_start":104,"line_end":104,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibEncoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the compressor has produced.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":146499,"byte_end":146564,"line_start":100,"line_end":100,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":146569,"byte_end":146572,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes may have been read yet, some may still be","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":146577,"byte_end":146646,"line_start":102,"line_end":102,"column_start":5,"column_end":74}},{"value":"/ buffered.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":146651,"byte_end":146664,"line_start":103,"line_end":103,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":1090},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":148477,"byte_end":148488,"line_start":169,"line_end":169,"column_start":12,"column_end":23},"name":"ZlibDecoder","qualname":"::zlib::bufread::ZlibDecoder","value":"ZlibDecoder {  }","parent":null,"children":[{"krate":0,"index":1092},{"krate":0,"index":1093}],"decl_id":null,"docs":" A ZLIB decoder, or decompressor.","sig":null,"attributes":[{"value":"/ A ZLIB decoder, or decompressor.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":147416,"byte_end":147452,"line_start":135,"line_end":135,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":147453,"byte_end":147456,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`BufRead`] interface and takes a stream of","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":147457,"byte_end":147532,"line_start":137,"line_end":137,"column_start":1,"column_end":76}},{"value":"/ compressed data as input, providing the decompressed data when read from.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":147533,"byte_end":147610,"line_start":138,"line_end":138,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":147611,"byte_end":147614,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ [`BufRead`]: https://doc.rust-lang.org/std/io/trait.BufRead.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":147615,"byte_end":147683,"line_start":140,"line_end":140,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":147684,"byte_end":147687,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":147688,"byte_end":147702,"line_start":142,"line_end":142,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":147703,"byte_end":147706,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":147707,"byte_end":147714,"line_start":144,"line_end":144,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":147715,"byte_end":147743,"line_start":145,"line_end":145,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":147744,"byte_end":147760,"line_start":146,"line_end":146,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":147761,"byte_end":147791,"line_start":147,"line_end":147,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::ZlibEncoder;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":147792,"byte_end":147829,"line_start":148,"line_end":148,"column_start":1,"column_end":38}},{"value":"/ use flate2::bufread::ZlibDecoder;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":147830,"byte_end":147867,"line_start":149,"line_end":149,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":147868,"byte_end":147871,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":147872,"byte_end":147889,"line_start":151,"line_end":151,"column_start":1,"column_end":18}},{"value":"/ # let mut e = ZlibEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":147890,"byte_end":147961,"line_start":152,"line_end":152,"column_start":1,"column_end":72}},{"value":"/ # e.write_all(b\"Hello World\").unwrap();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":147962,"byte_end":148005,"line_start":153,"line_end":153,"column_start":1,"column_end":44}},{"value":"/ # let bytes = e.finish().unwrap();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":148006,"byte_end":148044,"line_start":154,"line_end":154,"column_start":1,"column_end":39}},{"value":"/ # println!(\"{}\", decode_bufreader(bytes).unwrap());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":148045,"byte_end":148100,"line_start":155,"line_end":155,"column_start":1,"column_end":56}},{"value":"/ # }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":148101,"byte_end":148108,"line_start":156,"line_end":156,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":148109,"byte_end":148114,"line_start":157,"line_end":157,"column_start":1,"column_end":6}},{"value":"/ // Uncompresses a Zlib Encoded vector of bytes and returns a string or error","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":148115,"byte_end":148195,"line_start":158,"line_end":158,"column_start":1,"column_end":81}},{"value":"/ // Here &[u8] implements BufRead","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":148196,"byte_end":148232,"line_start":159,"line_end":159,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":148233,"byte_end":148236,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ fn decode_bufreader(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":148237,"byte_end":148300,"line_start":161,"line_end":161,"column_start":1,"column_end":64}},{"value":"/     let mut z = ZlibDecoder::new(&bytes[..]);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":148301,"byte_end":148350,"line_start":162,"line_end":162,"column_start":1,"column_end":50}},{"value":"/     let mut s = String::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":148351,"byte_end":148385,"line_start":163,"line_end":163,"column_start":1,"column_end":35}},{"value":"/     z.read_to_string(&mut s)?;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":148386,"byte_end":148420,"line_start":164,"line_end":164,"column_start":1,"column_end":35}},{"value":"/     Ok(s)","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":148421,"byte_end":148434,"line_start":165,"line_end":165,"column_start":1,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":148435,"byte_end":148440,"line_start":166,"line_end":166,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":148441,"byte_end":148448,"line_start":167,"line_end":167,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":642},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":148669,"byte_end":148672,"line_start":177,"line_end":177,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibDecoder<R>>::new","value":"fn (r: R) -> ZlibDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder which will decompress data read from the given","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":148569,"byte_end":148641,"line_start":175,"line_end":175,"column_start":5,"column_end":77}},{"value":"/ stream.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":148646,"byte_end":148657,"line_start":176,"line_end":176,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":647},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":149302,"byte_end":149307,"line_start":197,"line_end":197,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibDecoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this decoder entirely, swapping out the input","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":148930,"byte_end":148999,"line_start":190,"line_end":190,"column_start":5,"column_end":74}},{"value":"/ stream for another.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":149004,"byte_end":149027,"line_start":191,"line_end":191,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":149032,"byte_end":149035,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ This will reset the internal state of this decoder and replace the","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":149040,"byte_end":149110,"line_start":193,"line_end":193,"column_start":5,"column_end":75}},{"value":"/ input stream with the one provided, returning the previous input","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":149115,"byte_end":149183,"line_start":194,"line_end":194,"column_start":5,"column_end":73}},{"value":"/ stream. Future data read from this decoder will be the decompressed","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":149188,"byte_end":149259,"line_start":195,"line_end":195,"column_start":5,"column_end":76}},{"value":"/ version of `r`'s data.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":149264,"byte_end":149290,"line_start":196,"line_end":196,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":648},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":149477,"byte_end":149484,"line_start":203,"line_end":203,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying stream","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":149416,"byte_end":149465,"line_start":202,"line_end":202,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":649},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":149729,"byte_end":149736,"line_start":211,"line_end":211,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":149529,"byte_end":149586,"line_start":207,"line_end":207,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":149591,"byte_end":149594,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":149599,"byte_end":149671,"line_start":209,"line_end":209,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":149676,"byte_end":149717,"line_start":210,"line_end":210,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":650},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":149864,"byte_end":149874,"line_start":216,"line_end":216,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ZlibDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[{"value":"/ Consumes this decoder, returning the underlying reader.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":149793,"byte_end":149852,"line_start":215,"line_end":215,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":651},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":150143,"byte_end":150151,"line_start":224,"line_end":224,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibDecoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has consumed.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":149916,"byte_end":149983,"line_start":220,"line_end":220,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":149988,"byte_end":149991,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ Note that this will likely be smaller than what the decompressor","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":149996,"byte_end":150064,"line_start":222,"line_end":222,"column_start":5,"column_end":73}},{"value":"/ actually read from the underlying stream due to buffering.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":150069,"byte_end":150131,"line_start":223,"line_end":223,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":652},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":150287,"byte_end":150296,"line_start":229,"line_end":229,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibDecoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has produced.\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has produced.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":150208,"byte_end":150275,"line_start":228,"line_end":228,"column_start":5,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":1097},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":152043,"byte_end":152054,"line_start":38,"line_end":38,"column_start":12,"column_end":23},"name":"ZlibEncoder","qualname":"::zlib::read::ZlibEncoder","value":"ZlibEncoder {  }","parent":null,"children":[{"krate":0,"index":1099}],"decl_id":null,"docs":" A ZLIB encoder, or compressor.","sig":null,"attributes":[{"value":"/ A ZLIB encoder, or compressor.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":151233,"byte_end":151267,"line_start":12,"line_end":12,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":151268,"byte_end":151271,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`Read`] interface and will read uncompressed","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":151272,"byte_end":151349,"line_start":14,"line_end":14,"column_start":1,"column_end":78}},{"value":"/ data from an underlying stream and emit a stream of compressed data.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":151350,"byte_end":151422,"line_start":15,"line_end":15,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":151423,"byte_end":151426,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":151427,"byte_end":151489,"line_start":17,"line_end":17,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":151490,"byte_end":151493,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":151494,"byte_end":151508,"line_start":19,"line_end":19,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":151509,"byte_end":151512,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":151513,"byte_end":151520,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":151521,"byte_end":151549,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/ use flate2::Compression;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":151550,"byte_end":151578,"line_start":23,"line_end":23,"column_start":1,"column_end":29}},{"value":"/ use flate2::read::ZlibEncoder;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":151579,"byte_end":151613,"line_start":24,"line_end":24,"column_start":1,"column_end":35}},{"value":"/ use std::fs::File;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":151614,"byte_end":151636,"line_start":25,"line_end":25,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":151637,"byte_end":151640,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ // Open example file and compress the contents using Read interface","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":151641,"byte_end":151712,"line_start":27,"line_end":27,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":151713,"byte_end":151716,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ # fn open_hello_world() -> std::io::Result<Vec<u8>> {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":151717,"byte_end":151774,"line_start":29,"line_end":29,"column_start":1,"column_end":58}},{"value":"/ let f = File::open(\"examples/hello_world.txt\")?;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":151775,"byte_end":151827,"line_start":30,"line_end":30,"column_start":1,"column_end":53}},{"value":"/ let mut z = ZlibEncoder::new(f, Compression::fast());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":151828,"byte_end":151885,"line_start":31,"line_end":31,"column_start":1,"column_end":58}},{"value":"/ let mut buffer = [0;50];","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":151886,"byte_end":151914,"line_start":32,"line_end":32,"column_start":1,"column_end":29}},{"value":"/ let byte_count = z.read(&mut buffer)?;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":151915,"byte_end":151957,"line_start":33,"line_end":33,"column_start":1,"column_end":43}},{"value":"/ # Ok(buffer[0..byte_count].to_vec())","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":151958,"byte_end":151998,"line_start":34,"line_end":34,"column_start":1,"column_end":41}},{"value":"/ # }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":151999,"byte_end":152006,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":152007,"byte_end":152014,"line_start":36,"line_end":36,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":667},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":152278,"byte_end":152281,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibEncoder<R>>::new","value":"fn (r: R, level: crate::Compression) -> ZlibEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder which will read uncompressed data from the given","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":152145,"byte_end":152219,"line_start":43,"line_end":43,"column_start":5,"column_end":79}},{"value":"/ stream and emit the compressed stream.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":152224,"byte_end":152266,"line_start":44,"line_end":44,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":670},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":153006,"byte_end":153011,"line_start":63,"line_end":63,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibEncoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this encoder entirely, swapping out the input","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":152477,"byte_end":152546,"line_start":53,"line_end":53,"column_start":5,"column_end":74}},{"value":"/ stream for another.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":152551,"byte_end":152574,"line_start":54,"line_end":54,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":152579,"byte_end":152582,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ This function will reset the internal state of this encoder and replace","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":152587,"byte_end":152662,"line_start":56,"line_end":56,"column_start":5,"column_end":80}},{"value":"/ the input stream with the one provided, returning the previous input","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":152667,"byte_end":152739,"line_start":57,"line_end":57,"column_start":5,"column_end":77}},{"value":"/ stream. Future data read from this encoder will be the compressed","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":152744,"byte_end":152813,"line_start":58,"line_end":58,"column_start":5,"column_end":74}},{"value":"/ version of `r`'s data.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":152818,"byte_end":152844,"line_start":59,"line_end":59,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":152849,"byte_end":152852,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ Note that there may be currently buffered data when this function is","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":152857,"byte_end":152929,"line_start":61,"line_end":61,"column_start":5,"column_end":77}},{"value":"/ called, and in that case the buffered data is discarded.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":152934,"byte_end":152994,"line_start":62,"line_end":62,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":671},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":153207,"byte_end":153214,"line_start":69,"line_end":69,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibEncoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying stream","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":153146,"byte_end":153195,"line_start":68,"line_end":68,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":672},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":153480,"byte_end":153487,"line_start":77,"line_end":77,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibEncoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":153280,"byte_end":153337,"line_start":73,"line_end":73,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":153342,"byte_end":153345,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":153350,"byte_end":153422,"line_start":75,"line_end":75,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":153427,"byte_end":153468,"line_start":76,"line_end":76,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":673},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":153828,"byte_end":153838,"line_start":86,"line_end":86,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ZlibEncoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.","sig":null,"attributes":[{"value":"/ Consumes this encoder, returning the underlying reader.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":153561,"byte_end":153620,"line_start":81,"line_end":81,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":153625,"byte_end":153628,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ Note that there may be buffered bytes which are not re-acquired as part","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":153633,"byte_end":153708,"line_start":83,"line_end":83,"column_start":5,"column_end":80}},{"value":"/ of this transition. It's recommended to only call this function after","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":153713,"byte_end":153786,"line_start":84,"line_end":84,"column_start":5,"column_end":78}},{"value":"/ EOF has been reached.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":153791,"byte_end":153816,"line_start":85,"line_end":85,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":674},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":154137,"byte_end":154145,"line_start":94,"line_end":94,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibEncoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been read into this compressor.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that have been read into this compressor.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":153908,"byte_end":153981,"line_start":90,"line_end":90,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":153986,"byte_end":153989,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes read from the underlying object may be accounted","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":153994,"byte_end":154070,"line_start":92,"line_end":92,"column_start":5,"column_end":81}},{"value":"/ for, there may still be some active buffering.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":154075,"byte_end":154125,"line_start":93,"line_end":93,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":675},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":154380,"byte_end":154389,"line_start":102,"line_end":102,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibEncoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the compressor has produced.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":154203,"byte_end":154268,"line_start":98,"line_end":98,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":154273,"byte_end":154276,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes may have been read yet, some may still be","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":154281,"byte_end":154350,"line_start":100,"line_end":100,"column_start":5,"column_end":74}},{"value":"/ buffered.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":154355,"byte_end":154368,"line_start":101,"line_end":101,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":1103},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":156122,"byte_end":156133,"line_start":167,"line_end":167,"column_start":12,"column_end":23},"name":"ZlibDecoder","qualname":"::zlib::read::ZlibDecoder","value":"ZlibDecoder {  }","parent":null,"children":[{"krate":0,"index":1105}],"decl_id":null,"docs":" A ZLIB decoder, or decompressor.","sig":null,"attributes":[{"value":"/ A ZLIB decoder, or decompressor.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":155082,"byte_end":155118,"line_start":133,"line_end":133,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":155119,"byte_end":155122,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`Read`] interface and takes a stream of","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":155123,"byte_end":155195,"line_start":135,"line_end":135,"column_start":1,"column_end":73}},{"value":"/ compressed data as input, providing the decompressed data when read from.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":155196,"byte_end":155273,"line_start":136,"line_end":136,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":155274,"byte_end":155277,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":155278,"byte_end":155340,"line_start":138,"line_end":138,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":155341,"byte_end":155344,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":155345,"byte_end":155359,"line_start":140,"line_end":140,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":155360,"byte_end":155363,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":155364,"byte_end":155371,"line_start":142,"line_end":142,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":155372,"byte_end":155400,"line_start":143,"line_end":143,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":155401,"byte_end":155417,"line_start":144,"line_end":144,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":155418,"byte_end":155448,"line_start":145,"line_end":145,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::ZlibEncoder;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":155449,"byte_end":155486,"line_start":146,"line_end":146,"column_start":1,"column_end":38}},{"value":"/ use flate2::read::ZlibDecoder;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":155487,"byte_end":155521,"line_start":147,"line_end":147,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":155522,"byte_end":155525,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":155526,"byte_end":155543,"line_start":149,"line_end":149,"column_start":1,"column_end":18}},{"value":"/ # let mut e = ZlibEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":155544,"byte_end":155615,"line_start":150,"line_end":150,"column_start":1,"column_end":72}},{"value":"/ # e.write_all(b\"Hello World\").unwrap();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":155616,"byte_end":155659,"line_start":151,"line_end":151,"column_start":1,"column_end":44}},{"value":"/ # let bytes = e.finish().unwrap();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":155660,"byte_end":155698,"line_start":152,"line_end":152,"column_start":1,"column_end":39}},{"value":"/ # println!(\"{}\", decode_reader(bytes).unwrap());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":155699,"byte_end":155751,"line_start":153,"line_end":153,"column_start":1,"column_end":53}},{"value":"/ # }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":155752,"byte_end":155759,"line_start":154,"line_end":154,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":155760,"byte_end":155765,"line_start":155,"line_end":155,"column_start":1,"column_end":6}},{"value":"/ // Uncompresses a Zlib Encoded vector of bytes and returns a string or error","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":155766,"byte_end":155846,"line_start":156,"line_end":156,"column_start":1,"column_end":81}},{"value":"/ // Here &[u8] implements Read","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":155847,"byte_end":155880,"line_start":157,"line_end":157,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":155881,"byte_end":155884,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ fn decode_reader(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":155885,"byte_end":155945,"line_start":159,"line_end":159,"column_start":1,"column_end":61}},{"value":"/     let mut z = ZlibDecoder::new(&bytes[..]);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":155946,"byte_end":155995,"line_start":160,"line_end":160,"column_start":1,"column_end":50}},{"value":"/     let mut s = String::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":155996,"byte_end":156030,"line_start":161,"line_end":161,"column_start":1,"column_end":35}},{"value":"/     z.read_to_string(&mut s)?;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":156031,"byte_end":156065,"line_start":162,"line_end":162,"column_start":1,"column_end":35}},{"value":"/     Ok(s)","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":156066,"byte_end":156079,"line_start":163,"line_end":163,"column_start":1,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":156080,"byte_end":156085,"line_start":164,"line_end":164,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":156086,"byte_end":156093,"line_start":165,"line_end":165,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":685},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":156324,"byte_end":156327,"line_start":174,"line_end":174,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibDecoder<R>>::new","value":"fn (r: R) -> ZlibDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder which will decompress data read from the given","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":156224,"byte_end":156296,"line_start":172,"line_end":172,"column_start":5,"column_end":77}},{"value":"/ stream.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":156301,"byte_end":156312,"line_start":173,"line_end":173,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":686},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":156654,"byte_end":156666,"line_start":182,"line_end":182,"column_start":12,"column_end":24},"name":"new_with_buf","qualname":"<ZlibDecoder<R>>::new_with_buf","value":"fn (r: R, buf: Vec<u8>) -> ZlibDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Same as `new`, but the intermediate buffer for data is specified.","sig":null,"attributes":[{"value":"/ Same as `new`, but the intermediate buffer for data is specified.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":156422,"byte_end":156491,"line_start":178,"line_end":178,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":156496,"byte_end":156499,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ Note that the specified buffer will only be used up to its current","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":156504,"byte_end":156574,"line_start":180,"line_end":180,"column_start":5,"column_end":75}},{"value":"/ length. The buffer's capacity will also not grow over time.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":156579,"byte_end":156642,"line_start":181,"line_end":181,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":689},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":157374,"byte_end":157379,"line_start":200,"line_end":200,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibDecoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this decoder entirely, swapping out the input","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":156852,"byte_end":156921,"line_start":190,"line_end":190,"column_start":5,"column_end":74}},{"value":"/ stream for another.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":156926,"byte_end":156949,"line_start":191,"line_end":191,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":156954,"byte_end":156957,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ This will reset the internal state of this decoder and replace the","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":156962,"byte_end":157032,"line_start":193,"line_end":193,"column_start":5,"column_end":75}},{"value":"/ input stream with the one provided, returning the previous input","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":157037,"byte_end":157105,"line_start":194,"line_end":194,"column_start":5,"column_end":73}},{"value":"/ stream. Future data read from this decoder will be the decompressed","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":157110,"byte_end":157181,"line_start":195,"line_end":195,"column_start":5,"column_end":76}},{"value":"/ version of `r`'s data.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":157186,"byte_end":157212,"line_start":196,"line_end":196,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":157217,"byte_end":157220,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ Note that there may be currently buffered data when this function is","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":157225,"byte_end":157297,"line_start":198,"line_end":198,"column_start":5,"column_end":77}},{"value":"/ called, and in that case the buffered data is discarded.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":157302,"byte_end":157362,"line_start":199,"line_end":199,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":690},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":157575,"byte_end":157582,"line_start":206,"line_end":206,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying stream","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":157514,"byte_end":157563,"line_start":205,"line_end":205,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":691},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":157848,"byte_end":157855,"line_start":214,"line_end":214,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying stream","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":157648,"byte_end":157705,"line_start":210,"line_end":210,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":157710,"byte_end":157713,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the stream may result in surprising results if","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":157718,"byte_end":157790,"line_start":212,"line_end":212,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":157795,"byte_end":157836,"line_start":213,"line_end":213,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":692},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":158196,"byte_end":158206,"line_start":223,"line_end":223,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ZlibDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.","sig":null,"attributes":[{"value":"/ Consumes this decoder, returning the underlying reader.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":157929,"byte_end":157988,"line_start":218,"line_end":218,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":157993,"byte_end":157996,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ Note that there may be buffered bytes which are not re-acquired as part","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":158001,"byte_end":158076,"line_start":220,"line_end":220,"column_start":5,"column_end":80}},{"value":"/ of this transition. It's recommended to only call this function after","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":158081,"byte_end":158154,"line_start":221,"line_end":221,"column_start":5,"column_end":78}},{"value":"/ EOF has been reached.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":158159,"byte_end":158184,"line_start":222,"line_end":222,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":693},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":158503,"byte_end":158511,"line_start":231,"line_end":231,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibDecoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has consumed.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":158276,"byte_end":158343,"line_start":227,"line_end":227,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":158348,"byte_end":158351,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ Note that this will likely be smaller than what the decompressor","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":158356,"byte_end":158424,"line_start":229,"line_end":229,"column_start":5,"column_end":73}},{"value":"/ actually read from the underlying stream due to buffering.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":158429,"byte_end":158491,"line_start":230,"line_end":230,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":694},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":158648,"byte_end":158657,"line_start":236,"line_end":236,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibDecoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has produced.\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has produced.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":158569,"byte_end":158636,"line_start":235,"line_end":235,"column_start":5,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":1109},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":160269,"byte_end":160280,"line_start":36,"line_end":36,"column_start":12,"column_end":23},"name":"ZlibEncoder","qualname":"::zlib::write::ZlibEncoder","value":"ZlibEncoder {  }","parent":null,"children":[{"krate":0,"index":1111}],"decl_id":null,"docs":" A ZLIB encoder, or compressor.","sig":null,"attributes":[{"value":"/ A ZLIB encoder, or compressor.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":159554,"byte_end":159588,"line_start":12,"line_end":12,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":159589,"byte_end":159592,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`Write`] interface and takes a stream of","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":159593,"byte_end":159666,"line_start":14,"line_end":14,"column_start":1,"column_end":74}},{"value":"/ uncompressed data, writing the compressed data to the wrapped writer.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":159667,"byte_end":159740,"line_start":15,"line_end":15,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":159741,"byte_end":159744,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":159745,"byte_end":159809,"line_start":17,"line_end":17,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":159810,"byte_end":159813,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":159814,"byte_end":159828,"line_start":19,"line_end":19,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":159829,"byte_end":159832,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":159833,"byte_end":159840,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":159841,"byte_end":159869,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/ use flate2::Compression;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":159870,"byte_end":159898,"line_start":23,"line_end":23,"column_start":1,"column_end":29}},{"value":"/ use flate2::write::ZlibEncoder;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":159899,"byte_end":159934,"line_start":24,"line_end":24,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":159935,"byte_end":159938,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ // Vec<u8> implements Write, assigning the compressed bytes of sample string","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":159939,"byte_end":160019,"line_start":26,"line_end":26,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":160020,"byte_end":160023,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ # fn zlib_encoding() -> std::io::Result<()> {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":160024,"byte_end":160073,"line_start":28,"line_end":28,"column_start":1,"column_end":50}},{"value":"/ let mut e = ZlibEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":160074,"byte_end":160143,"line_start":29,"line_end":29,"column_start":1,"column_end":70}},{"value":"/ e.write_all(b\"Hello World\")?;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":160144,"byte_end":160177,"line_start":30,"line_end":30,"column_start":1,"column_end":34}},{"value":"/ let compressed = e.finish()?;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":160178,"byte_end":160211,"line_start":31,"line_end":31,"column_start":1,"column_end":34}},{"value":"/ # Ok(())","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":160212,"byte_end":160224,"line_start":32,"line_end":32,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":160225,"byte_end":160232,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":160233,"byte_end":160240,"line_start":34,"line_end":34,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":711},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":160607,"byte_end":160610,"line_start":46,"line_end":46,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibEncoder<W>>::new","value":"fn (w: W, level: crate::Compression) -> ZlibEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will write compressed data to the stream\n given at the given compression level.","sig":null,"attributes":[{"value":"/ Creates a new encoder which will write compressed data to the stream","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":160369,"byte_end":160441,"line_start":41,"line_end":41,"column_start":5,"column_end":77}},{"value":"/ given at the given compression level.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":160446,"byte_end":160487,"line_start":42,"line_end":42,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":160492,"byte_end":160495,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ When this encoder is dropped or unwrapped the final pieces of data will","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":160500,"byte_end":160575,"line_start":44,"line_end":44,"column_start":5,"column_end":80}},{"value":"/ be flushed.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":160580,"byte_end":160595,"line_start":45,"line_end":45,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":712},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":160837,"byte_end":160844,"line_start":53,"line_end":53,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibEncoder<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":160775,"byte_end":160825,"line_start":52,"line_end":52,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":713},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":161121,"byte_end":161128,"line_start":61,"line_end":61,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibEncoder<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":160900,"byte_end":160958,"line_start":57,"line_end":57,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":160963,"byte_end":160966,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ Note that mutating the output/input state of the stream may corrupt this","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":160971,"byte_end":161047,"line_start":59,"line_end":59,"column_start":5,"column_end":81}},{"value":"/ object, so care must be taken when using this method.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":161052,"byte_end":161109,"line_start":60,"line_end":60,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":714},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":161943,"byte_end":161948,"line_start":80,"line_end":80,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibEncoder<W>>::reset","value":"fn (&mut self, w: W) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the output\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this encoder entirely, swapping out the output","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":161192,"byte_end":161262,"line_start":65,"line_end":65,"column_start":5,"column_end":75}},{"value":"/ stream for another.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":161267,"byte_end":161290,"line_start":66,"line_end":66,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":161295,"byte_end":161298,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ This function will finish encoding the current stream into the current","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":161303,"byte_end":161377,"line_start":68,"line_end":68,"column_start":5,"column_end":79}},{"value":"/ output stream before swapping out the two output streams.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":161382,"byte_end":161443,"line_start":69,"line_end":69,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":161448,"byte_end":161451,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ After the current stream has been finished, this will reset the internal","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":161456,"byte_end":161532,"line_start":71,"line_end":71,"column_start":5,"column_end":81}},{"value":"/ state of this encoder and replace the output stream with the one","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":161537,"byte_end":161605,"line_start":72,"line_end":72,"column_start":5,"column_end":73}},{"value":"/ provided, returning the previous output stream. Future data written to","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":161610,"byte_end":161684,"line_start":73,"line_end":73,"column_start":5,"column_end":79}},{"value":"/ this encoder will be the compressed into the stream `w` provided.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":161689,"byte_end":161758,"line_start":74,"line_end":74,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":161763,"byte_end":161766,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":161771,"byte_end":161783,"line_start":76,"line_end":76,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":161788,"byte_end":161791,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":161796,"byte_end":161867,"line_start":78,"line_end":78,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":161872,"byte_end":161931,"line_start":79,"line_end":79,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":715},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":162708,"byte_end":162718,"line_start":101,"line_end":101,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<ZlibEncoder<W>>::try_finish","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[{"value":"/ Attempt to finish this output stream, writing out final chunks of data.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":162093,"byte_end":162168,"line_start":86,"line_end":86,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":162173,"byte_end":162176,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ Note that this function can only be used once data has finished being","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":162181,"byte_end":162254,"line_start":88,"line_end":88,"column_start":5,"column_end":78}},{"value":"/ written to the output stream. After this function is called then further","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":162259,"byte_end":162335,"line_start":89,"line_end":89,"column_start":5,"column_end":81}},{"value":"/ calls to `write` may result in a panic.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":162340,"byte_end":162383,"line_start":90,"line_end":90,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":162388,"byte_end":162391,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":162396,"byte_end":162408,"line_start":92,"line_end":92,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":162413,"byte_end":162416,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ Attempts to write data to this stream may result in a panic after this","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":162421,"byte_end":162495,"line_start":94,"line_end":94,"column_start":5,"column_end":79}},{"value":"/ function is called.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":162500,"byte_end":162523,"line_start":95,"line_end":95,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":162528,"byte_end":162531,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":162536,"byte_end":162548,"line_start":97,"line_end":97,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":162553,"byte_end":162556,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":162561,"byte_end":162632,"line_start":99,"line_end":99,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":162637,"byte_end":162696,"line_start":100,"line_end":100,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":716},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":163553,"byte_end":163559,"line_start":120,"line_end":120,"column_start":12,"column_end":18},"name":"finish","qualname":"<ZlibEncoder<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[{"value":"/ Consumes this encoder, flushing the output stream.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":162789,"byte_end":162843,"line_start":105,"line_end":105,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":162848,"byte_end":162851,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ This will flush the underlying data stream, close off the compressed","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":162856,"byte_end":162928,"line_start":107,"line_end":107,"column_start":5,"column_end":77}},{"value":"/ stream and, if successful, return the contained writer.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":162933,"byte_end":162992,"line_start":108,"line_end":108,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":162997,"byte_end":163000,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ Note that this function may not be suitable to call in a situation where","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":163005,"byte_end":163081,"line_start":110,"line_end":110,"column_start":5,"column_end":81}},{"value":"/ the underlying stream is an asynchronous I/O stream. To finish a stream","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":163086,"byte_end":163161,"line_start":111,"line_end":111,"column_start":5,"column_end":80}},{"value":"/ the `try_finish` (or `shutdown`) method should be used instead. To","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":163166,"byte_end":163236,"line_start":112,"line_end":112,"column_start":5,"column_end":75}},{"value":"/ re-acquire ownership of a stream it is safe to call this method after","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":163241,"byte_end":163314,"line_start":113,"line_end":113,"column_start":5,"column_end":78}},{"value":"/ `try_finish` or `shutdown` has returned `Ok`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":163319,"byte_end":163368,"line_start":114,"line_end":114,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":163373,"byte_end":163376,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":163381,"byte_end":163393,"line_start":116,"line_end":116,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":163398,"byte_end":163401,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":163406,"byte_end":163477,"line_start":118,"line_end":118,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":163482,"byte_end":163541,"line_start":119,"line_end":119,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":717},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":164244,"byte_end":164256,"line_start":137,"line_end":137,"column_start":12,"column_end":24},"name":"flush_finish","qualname":"<ZlibEncoder<W>>::flush_finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[{"value":"/ Consumes this encoder, flushing the output stream.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":163666,"byte_end":163720,"line_start":125,"line_end":125,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":163725,"byte_end":163728,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ This will flush the underlying data stream and then return the contained","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":163733,"byte_end":163809,"line_start":127,"line_end":127,"column_start":5,"column_end":81}},{"value":"/ writer if the flush succeeded.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":163814,"byte_end":163848,"line_start":128,"line_end":128,"column_start":5,"column_end":39}},{"value":"/ The compressed stream will not closed but only flushed. This","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":163853,"byte_end":163917,"line_start":129,"line_end":129,"column_start":5,"column_end":69}},{"value":"/ means that obtained byte array can by extended by another deflated","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":163922,"byte_end":163992,"line_start":130,"line_end":130,"column_start":5,"column_end":75}},{"value":"/ stream. To close the stream add the two bytes 0x3 and 0x0.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":163997,"byte_end":164059,"line_start":131,"line_end":131,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":164064,"byte_end":164067,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":164072,"byte_end":164084,"line_start":133,"line_end":133,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":164089,"byte_end":164092,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":164097,"byte_end":164168,"line_start":135,"line_end":135,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":164173,"byte_end":164232,"line_start":136,"line_end":136,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":718},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":164582,"byte_end":164590,"line_start":146,"line_end":146,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibEncoder<W>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been written to this compresor.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that have been written to this compresor.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":164362,"byte_end":164435,"line_start":142,"line_end":142,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":164440,"byte_end":164443,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes written to this object may be accounted for,","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":164448,"byte_end":164520,"line_start":144,"line_end":144,"column_start":5,"column_end":77}},{"value":"/ there may still be some active buffering.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":164525,"byte_end":164570,"line_start":145,"line_end":145,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":719},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":164833,"byte_end":164842,"line_start":154,"line_end":154,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibEncoder<W>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the compressor has produced.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":164653,"byte_end":164718,"line_start":150,"line_end":150,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":164723,"byte_end":164726,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ Note that not all bytes may have been written yet, some may still be","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":164731,"byte_end":164803,"line_start":152,"line_end":152,"column_start":5,"column_end":77}},{"value":"/ buffered.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":164808,"byte_end":164821,"line_start":153,"line_end":153,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":1115},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":166720,"byte_end":166731,"line_start":222,"line_end":222,"column_start":12,"column_end":23},"name":"ZlibDecoder","qualname":"::zlib::write::ZlibDecoder","value":"ZlibDecoder {  }","parent":null,"children":[{"krate":0,"index":1117}],"decl_id":null,"docs":" A ZLIB decoder, or decompressor.","sig":null,"attributes":[{"value":"/ A ZLIB decoder, or decompressor.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":165566,"byte_end":165602,"line_start":186,"line_end":186,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":165603,"byte_end":165606,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ This structure implements a [`Write`] and will emit a stream of decompressed","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":165607,"byte_end":165687,"line_start":188,"line_end":188,"column_start":1,"column_end":81}},{"value":"/ data when fed a stream of compressed data.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":165688,"byte_end":165734,"line_start":189,"line_end":189,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":165735,"byte_end":165738,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":165739,"byte_end":165803,"line_start":191,"line_end":191,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":165804,"byte_end":165807,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":165808,"byte_end":165822,"line_start":193,"line_end":193,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":165823,"byte_end":165826,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":165827,"byte_end":165834,"line_start":195,"line_end":195,"column_start":1,"column_end":8}},{"value":"/ use std::io::prelude::*;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":165835,"byte_end":165863,"line_start":196,"line_end":196,"column_start":1,"column_end":29}},{"value":"/ use std::io;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":165864,"byte_end":165880,"line_start":197,"line_end":197,"column_start":1,"column_end":17}},{"value":"/ # use flate2::Compression;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":165881,"byte_end":165911,"line_start":198,"line_end":198,"column_start":1,"column_end":31}},{"value":"/ # use flate2::write::ZlibEncoder;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":165912,"byte_end":165949,"line_start":199,"line_end":199,"column_start":1,"column_end":38}},{"value":"/ use flate2::write::ZlibDecoder;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":165950,"byte_end":165985,"line_start":200,"line_end":200,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":165986,"byte_end":165989,"line_start":201,"line_end":201,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":165990,"byte_end":166007,"line_start":202,"line_end":202,"column_start":1,"column_end":18}},{"value":"/ #    let mut e = ZlibEncoder::new(Vec::new(), Compression::default());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":166008,"byte_end":166082,"line_start":203,"line_end":203,"column_start":1,"column_end":75}},{"value":"/ #    e.write_all(b\"Hello World\").unwrap();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":166083,"byte_end":166129,"line_start":204,"line_end":204,"column_start":1,"column_end":47}},{"value":"/ #    let bytes = e.finish().unwrap();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":166130,"byte_end":166171,"line_start":205,"line_end":205,"column_start":1,"column_end":42}},{"value":"/ #    println!(\"{}\", decode_reader(bytes).unwrap());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":166172,"byte_end":166227,"line_start":206,"line_end":206,"column_start":1,"column_end":56}},{"value":"/ # }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":166228,"byte_end":166235,"line_start":207,"line_end":207,"column_start":1,"column_end":8}},{"value":"/ #","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":166236,"byte_end":166241,"line_start":208,"line_end":208,"column_start":1,"column_end":6}},{"value":"/ // Uncompresses a Zlib Encoded vector of bytes and returns a string or error","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":166242,"byte_end":166322,"line_start":209,"line_end":209,"column_start":1,"column_end":81}},{"value":"/ // Here Vec<u8> implements Write","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":166323,"byte_end":166359,"line_start":210,"line_end":210,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":166360,"byte_end":166363,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ fn decode_reader(bytes: Vec<u8>) -> io::Result<String> {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":166364,"byte_end":166424,"line_start":212,"line_end":212,"column_start":1,"column_end":61}},{"value":"/    let mut writer = Vec::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":166425,"byte_end":166460,"line_start":213,"line_end":213,"column_start":1,"column_end":36}},{"value":"/    let mut z = ZlibDecoder::new(writer);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":166461,"byte_end":166505,"line_start":214,"line_end":214,"column_start":1,"column_end":45}},{"value":"/    z.write_all(&bytes[..])?;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":166506,"byte_end":166538,"line_start":215,"line_end":215,"column_start":1,"column_end":33}},{"value":"/    writer = z.finish()?;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":166539,"byte_end":166567,"line_start":216,"line_end":216,"column_start":1,"column_end":29}},{"value":"/    let return_string = String::from_utf8(writer).expect(\"String parsing error\");","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":166568,"byte_end":166652,"line_start":217,"line_end":217,"column_start":1,"column_end":85}},{"value":"/    Ok(return_string)","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":166653,"byte_end":166677,"line_start":218,"line_end":218,"column_start":1,"column_end":25}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":166678,"byte_end":166683,"line_start":219,"line_end":219,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":166684,"byte_end":166691,"line_start":220,"line_end":220,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":729},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":167017,"byte_end":167020,"line_start":231,"line_end":231,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibDecoder<W>>::new","value":"fn (w: W) -> ZlibDecoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will write uncompressed data to the stream.","sig":null,"attributes":[{"value":"/ Creates a new decoder which will write uncompressed data to the stream.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":166822,"byte_end":166897,"line_start":227,"line_end":227,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":166902,"byte_end":166905,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ When this decoder is dropped or unwrapped the final pieces of data will","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":166910,"byte_end":166985,"line_start":229,"line_end":229,"column_start":5,"column_end":80}},{"value":"/ be flushed.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":166990,"byte_end":167005,"line_start":230,"line_end":230,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":730},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":167215,"byte_end":167222,"line_start":238,"line_end":238,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibDecoder<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":167153,"byte_end":167203,"line_start":237,"line_end":237,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":731},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":167499,"byte_end":167506,"line_start":246,"line_end":246,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibDecoder<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":167278,"byte_end":167336,"line_start":242,"line_end":242,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":167341,"byte_end":167344,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ Note that mutating the output/input state of the stream may corrupt this","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":167349,"byte_end":167425,"line_start":244,"line_end":244,"column_start":5,"column_end":81}},{"value":"/ object, so care must be taken when using this method.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":167430,"byte_end":167487,"line_start":245,"line_end":245,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":732},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":168120,"byte_end":168125,"line_start":262,"line_end":262,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibDecoder<W>>::reset","value":"fn (&mut self, w: W) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the output\n stream for another.","sig":null,"attributes":[{"value":"/ Resets the state of this decoder entirely, swapping out the output","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":167570,"byte_end":167640,"line_start":250,"line_end":250,"column_start":5,"column_end":75}},{"value":"/ stream for another.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":167645,"byte_end":167668,"line_start":251,"line_end":251,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":167673,"byte_end":167676,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ This will reset the internal state of this decoder and replace the","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":167681,"byte_end":167751,"line_start":253,"line_end":253,"column_start":5,"column_end":75}},{"value":"/ output stream with the one provided, returning the previous output","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":167756,"byte_end":167826,"line_start":254,"line_end":254,"column_start":5,"column_end":75}},{"value":"/ stream. Future data written to this decoder will be decompressed into","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":167831,"byte_end":167904,"line_start":255,"line_end":255,"column_start":5,"column_end":78}},{"value":"/ the output stream `w`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":167909,"byte_end":167935,"line_start":256,"line_end":256,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":167940,"byte_end":167943,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":167948,"byte_end":167960,"line_start":258,"line_end":258,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":167965,"byte_end":167968,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":167973,"byte_end":168044,"line_start":260,"line_end":260,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":168049,"byte_end":168108,"line_start":261,"line_end":261,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":733},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":168901,"byte_end":168911,"line_start":283,"line_end":283,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<ZlibDecoder<W>>::try_finish","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[{"value":"/ Attempt to finish this output stream, writing out final chunks of data.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":168286,"byte_end":168361,"line_start":268,"line_end":268,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":168366,"byte_end":168369,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ Note that this function can only be used once data has finished being","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":168374,"byte_end":168447,"line_start":270,"line_end":270,"column_start":5,"column_end":78}},{"value":"/ written to the output stream. After this function is called then further","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":168452,"byte_end":168528,"line_start":271,"line_end":271,"column_start":5,"column_end":81}},{"value":"/ calls to `write` may result in a panic.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":168533,"byte_end":168576,"line_start":272,"line_end":272,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":168581,"byte_end":168584,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":168589,"byte_end":168601,"line_start":274,"line_end":274,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":168606,"byte_end":168609,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ Attempts to write data to this stream may result in a panic after this","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":168614,"byte_end":168688,"line_start":276,"line_end":276,"column_start":5,"column_end":79}},{"value":"/ function is called.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":168693,"byte_end":168716,"line_start":277,"line_end":277,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":168721,"byte_end":168724,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":168729,"byte_end":168741,"line_start":279,"line_end":279,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":168746,"byte_end":168749,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":168754,"byte_end":168825,"line_start":281,"line_end":281,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":168830,"byte_end":168889,"line_start":282,"line_end":282,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":734},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":169725,"byte_end":169731,"line_start":302,"line_end":302,"column_start":12,"column_end":18},"name":"finish","qualname":"<ZlibDecoder<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[{"value":"/ Consumes this encoder, flushing the output stream.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":168982,"byte_end":169036,"line_start":287,"line_end":287,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":169041,"byte_end":169044,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ This will flush the underlying data stream and then return the contained","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":169049,"byte_end":169125,"line_start":289,"line_end":289,"column_start":5,"column_end":81}},{"value":"/ writer if the flush succeeded.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":169130,"byte_end":169164,"line_start":290,"line_end":290,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":169169,"byte_end":169172,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ Note that this function may not be suitable to call in a situation where","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":169177,"byte_end":169253,"line_start":292,"line_end":292,"column_start":5,"column_end":81}},{"value":"/ the underlying stream is an asynchronous I/O stream. To finish a stream","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":169258,"byte_end":169333,"line_start":293,"line_end":293,"column_start":5,"column_end":80}},{"value":"/ the `try_finish` (or `shutdown`) method should be used instead. To","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":169338,"byte_end":169408,"line_start":294,"line_end":294,"column_start":5,"column_end":75}},{"value":"/ re-acquire ownership of a stream it is safe to call this method after","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":169413,"byte_end":169486,"line_start":295,"line_end":295,"column_start":5,"column_end":78}},{"value":"/ `try_finish` or `shutdown` has returned `Ok`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":169491,"byte_end":169540,"line_start":296,"line_end":296,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":169545,"byte_end":169548,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":169553,"byte_end":169565,"line_start":298,"line_end":298,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":169570,"byte_end":169573,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ This function will perform I/O to complete this stream, and any I/O","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":169578,"byte_end":169649,"line_start":300,"line_end":300,"column_start":5,"column_end":76}},{"value":"/ errors which occur will be returned from this function.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":169654,"byte_end":169713,"line_start":301,"line_end":301,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":735},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":170093,"byte_end":170101,"line_start":312,"line_end":312,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibDecoder<W>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed for\n decompression.","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has consumed for","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":169838,"byte_end":169908,"line_start":307,"line_end":307,"column_start":5,"column_end":75}},{"value":"/ decompression.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":169913,"byte_end":169931,"line_start":308,"line_end":308,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":169936,"byte_end":169939,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ Note that this will likely be smaller than the number of bytes","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":169944,"byte_end":170010,"line_start":310,"line_end":310,"column_start":5,"column_end":71}},{"value":"/ successfully written to this stream due to internal buffering.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":170015,"byte_end":170081,"line_start":311,"line_end":311,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":736},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":170271,"byte_end":170280,"line_start":318,"line_end":318,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibDecoder<W>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has written to its\n output stream.\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes that the decompressor has written to its","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":170164,"byte_end":170236,"line_start":316,"line_end":316,"column_start":5,"column_end":77}},{"value":"/ output stream.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":170241,"byte_end":170259,"line_start":317,"line_end":317,"column_start":5,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":744},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":5079,"byte_end":5083,"line_start":129,"line_end":129,"column_start":9,"column_end":13},"name":"read","qualname":"::read","value":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","parent":null,"children":[{"krate":0,"index":745},{"krate":0,"index":746},{"krate":0,"index":747},{"krate":0,"index":748},{"krate":0,"index":749},{"krate":0,"index":750},{"krate":0,"index":751}],"decl_id":null,"docs":" Types which operate over [`Read`] streams, both encoders and decoders for\n various formats.","sig":null,"attributes":[{"value":"/ Types which operate over [`Read`] streams, both encoders and decoders for","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":4905,"byte_end":4982,"line_start":125,"line_end":125,"column_start":1,"column_end":78}},{"value":"/ various formats.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":4983,"byte_end":5003,"line_start":126,"line_end":126,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":5004,"byte_end":5007,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ [`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":5008,"byte_end":5070,"line_start":128,"line_end":128,"column_start":1,"column_end":63}}]},{"kind":"Mod","id":{"krate":0,"index":752},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":5579,"byte_end":5584,"line_start":143,"line_end":143,"column_start":9,"column_end":14},"name":"write","qualname":"::write","value":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","parent":null,"children":[{"krate":0,"index":753},{"krate":0,"index":754},{"krate":0,"index":755},{"krate":0,"index":756},{"krate":0,"index":757},{"krate":0,"index":758}],"decl_id":null,"docs":" Types which operate over [`Write`] streams, both encoders and decoders for\n various formats.","sig":null,"attributes":[{"value":"/ Types which operate over [`Write`] streams, both encoders and decoders for","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":5402,"byte_end":5480,"line_start":139,"line_end":139,"column_start":1,"column_end":79}},{"value":"/ various formats.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":5481,"byte_end":5501,"line_start":140,"line_end":140,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":5502,"byte_end":5505,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ [`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":5506,"byte_end":5570,"line_start":142,"line_end":142,"column_start":1,"column_end":65}}]},{"kind":"Mod","id":{"krate":0,"index":759},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":6047,"byte_end":6054,"line_start":156,"line_end":156,"column_start":9,"column_end":16},"name":"bufread","qualname":"::bufread","value":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","parent":null,"children":[{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":763},{"krate":0,"index":764},{"krate":0,"index":765},{"krate":0,"index":766}],"decl_id":null,"docs":" Types which operate over [`BufRead`] streams, both encoders and decoders for\n various formats.","sig":null,"attributes":[{"value":"/ Types which operate over [`BufRead`] streams, both encoders and decoders for","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":5864,"byte_end":5944,"line_start":152,"line_end":152,"column_start":1,"column_end":81}},{"value":"/ various formats.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":5945,"byte_end":5965,"line_start":153,"line_end":153,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":5966,"byte_end":5969,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ [`BufRead`]: https://doc.rust-lang.org/std/io/trait.BufRead.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":5970,"byte_end":6038,"line_start":155,"line_end":155,"column_start":1,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":1121},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":7334,"byte_end":7345,"line_start":187,"line_end":187,"column_start":12,"column_end":23},"name":"Compression","qualname":"::Compression","value":"","parent":null,"children":[],"decl_id":null,"docs":" When compressing data, the compression level can be specified by a value in\n this enum.\n","sig":null,"attributes":[{"value":"/ When compressing data, the compression level can be specified by a value in","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":7183,"byte_end":7262,"line_start":184,"line_end":184,"column_start":1,"column_end":80}},{"value":"/ this enum.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":7263,"byte_end":7277,"line_start":185,"line_end":185,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":771},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":7633,"byte_end":7636,"line_start":195,"line_end":195,"column_start":12,"column_end":15},"name":"new","qualname":"<Compression>::new","value":"fn (level: u32) -> Compression","parent":null,"children":[],"decl_id":null,"docs":" Creates a new description of the compression level with an explicitly\n specified integer.","sig":null,"attributes":[{"value":"/ Creates a new description of the compression level with an explicitly","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":7376,"byte_end":7449,"line_start":190,"line_end":190,"column_start":5,"column_end":78}},{"value":"/ specified integer.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":7454,"byte_end":7476,"line_start":191,"line_end":191,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":7481,"byte_end":7484,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ The integer here is typically on a scale of 0-9 where 0 means \"no","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":7489,"byte_end":7558,"line_start":193,"line_end":193,"column_start":5,"column_end":74}},{"value":"/ compression\" and 9 means \"take as long as you'd like\".","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":7563,"byte_end":7621,"line_start":194,"line_end":194,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":7817,"byte_end":7821,"line_start":201,"line_end":201,"column_start":12,"column_end":16},"name":"none","qualname":"<Compression>::none","value":"fn () -> Compression","parent":null,"children":[],"decl_id":null,"docs":" No compression is to be performed, this may actually inflate data\n slightly when encoding.\n","sig":null,"attributes":[{"value":"/ No compression is to be performed, this may actually inflate data","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":7704,"byte_end":7773,"line_start":199,"line_end":199,"column_start":5,"column_end":74}},{"value":"/ slightly when encoding.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":7778,"byte_end":7805,"line_start":200,"line_end":200,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":773},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":7931,"byte_end":7935,"line_start":206,"line_end":206,"column_start":12,"column_end":16},"name":"fast","qualname":"<Compression>::fast","value":"fn () -> Compression","parent":null,"children":[],"decl_id":null,"docs":" Optimize for the best speed of encoding.\n","sig":null,"attributes":[{"value":"/ Optimize for the best speed of encoding.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":7875,"byte_end":7919,"line_start":205,"line_end":205,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":774},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":8049,"byte_end":8053,"line_start":211,"line_end":211,"column_start":12,"column_end":16},"name":"best","qualname":"<Compression>::best","value":"fn () -> Compression","parent":null,"children":[],"decl_id":null,"docs":" Optimize for the size of data being encoded.\n","sig":null,"attributes":[{"value":"/ Optimize for the size of data being encoded.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":7989,"byte_end":8037,"line_start":210,"line_end":210,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":775},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":8213,"byte_end":8218,"line_start":217,"line_end":217,"column_start":12,"column_end":17},"name":"level","qualname":"<Compression>::level","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns an integer representing the compression level, typically on a\n scale of 0-9\n","sig":null,"attributes":[{"value":"/ Returns an integer representing the compression level, typically on a","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":8107,"byte_end":8180,"line_start":215,"line_end":215,"column_start":5,"column_end":78}},{"value":"/ scale of 0-9","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":8185,"byte_end":8201,"line_start":216,"line_end":216,"column_start":5,"column_end":21}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/bufreader.rs","byte_start":9173,"byte_end":9182,"line_start":23,"line_end":23,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":31}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/bufreader.rs","byte_start":9568,"byte_end":9577,"line_start":38,"line_end":38,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":34},{"krate":0,"index":35}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/bufreader.rs","byte_start":9904,"byte_end":9913,"line_start":53,"line_end":53,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/bufreader.rs","byte_start":10280,"byte_end":10289,"line_start":73,"line_end":73,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":44}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/bufreader.rs","byte_start":10830,"byte_end":10839,"line_start":90,"line_end":90,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":11777,"byte_end":11780,"line_start":26,"line_end":26,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":12798,"byte_end":12807,"line_start":65,"line_end":65,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":12982,"byte_end":12991,"line_start":75,"line_end":75,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":13628,"byte_end":13637,"line_start":102,"line_end":102,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":13841,"byte_end":13850,"line_start":110,"line_end":110,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":75},{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":14336,"byte_end":14345,"line_start":131,"line_end":131,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":14974,"byte_end":14983,"line_start":158,"line_end":158,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":15175,"byte_end":15184,"line_start":168,"line_end":168,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":89},{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":22901,"byte_end":22915,"line_start":50,"line_end":50,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":23324,"byte_end":23338,"line_start":65,"line_end":65,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":24903,"byte_end":24917,"line_start":113,"line_end":113,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":115}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":25174,"byte_end":25188,"line_start":122,"line_end":122,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":26824,"byte_end":26838,"line_start":180,"line_end":180,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":27095,"byte_end":27109,"line_start":191,"line_end":191,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":28814,"byte_end":28828,"line_start":244,"line_end":244,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":29087,"byte_end":29101,"line_start":253,"line_end":253,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":139},{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":30695,"byte_end":30709,"line_start":45,"line_end":45,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":31039,"byte_end":31053,"line_start":55,"line_end":55,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":33055,"byte_end":33069,"line_start":110,"line_end":110,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":33288,"byte_end":33302,"line_start":119,"line_end":119,"column_start":33,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":162},{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":34837,"byte_end":34851,"line_start":172,"line_end":172,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":166},{"krate":0,"index":167}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":35468,"byte_end":35482,"line_start":190,"line_end":190,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":37377,"byte_end":37391,"line_start":242,"line_end":242,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":37612,"byte_end":37626,"line_start":251,"line_end":251,"column_start":33,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":181},{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":38982,"byte_end":38996,"line_start":39,"line_end":39,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":43636,"byte_end":43650,"line_start":159,"line_end":159,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":203},{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":44075,"byte_end":44089,"line_start":177,"line_end":177,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":207}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":45565,"byte_end":45579,"line_start":224,"line_end":224,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":49273,"byte_end":49287,"line_start":324,"line_end":324,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":220},{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":49712,"byte_end":49726,"line_start":342,"line_end":342,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/ffi/rust.rs","byte_start":8163740,"byte_end":8163747,"line_start":33,"line_end":33,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":854}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/ffi/rust.rs","byte_start":8164016,"byte_end":8164023,"line_start":43,"line_end":43,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":856},{"krate":0,"index":857},{"krate":0,"index":858}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/ffi/rust.rs","byte_start":8165516,"byte_end":8165523,"line_start":93,"line_end":93,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":860},{"krate":0,"index":861}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/ffi/rust.rs","byte_start":8165796,"byte_end":8165803,"line_start":111,"line_end":111,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":867}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/ffi/rust.rs","byte_start":8166072,"byte_end":8166079,"line_start":121,"line_end":121,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":869},{"krate":0,"index":870},{"krate":0,"index":871}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/ffi/rust.rs","byte_start":8167666,"byte_end":8167673,"line_start":173,"line_end":173,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":873},{"krate":0,"index":874}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":67018,"byte_end":67027,"line_start":168,"line_end":168,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":283},{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":68055,"byte_end":68064,"line_start":199,"line_end":199,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":69011,"byte_end":69020,"line_start":232,"line_end":232,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":294}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":69705,"byte_end":69714,"line_start":256,"line_end":256,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":297},{"krate":0,"index":298}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":71542,"byte_end":71548,"line_start":326,"line_end":326,"column_start":13,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":309}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":71785,"byte_end":71791,"line_start":337,"line_end":337,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":313}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":72204,"byte_end":72213,"line_start":351,"line_end":351,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":316},{"krate":0,"index":317}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":73183,"byte_end":73192,"line_start":386,"line_end":386,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":73953,"byte_end":73962,"line_start":411,"line_end":411,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":326}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":78098,"byte_end":78107,"line_start":523,"line_end":523,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":336},{"krate":0,"index":337}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":80067,"byte_end":80081,"line_start":583,"line_end":583,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":340}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":80382,"byte_end":80396,"line_start":592,"line_end":592,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":81110,"byte_end":81124,"line_start":617,"line_end":617,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":349}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":81354,"byte_end":81368,"line_start":626,"line_end":626,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":352},{"krate":0,"index":353}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":83031,"byte_end":83040,"line_start":49,"line_end":49,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":367}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":83496,"byte_end":83505,"line_start":62,"line_end":62,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":84102,"byte_end":84111,"line_start":82,"line_end":82,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":375}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":84251,"byte_end":84260,"line_start":88,"line_end":88,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":378},{"krate":0,"index":379}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":85553,"byte_end":85562,"line_start":137,"line_end":137,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":382}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":85815,"byte_end":85824,"line_start":147,"line_end":147,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":388}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":86579,"byte_end":86588,"line_start":172,"line_end":172,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":391}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":86804,"byte_end":86813,"line_start":181,"line_end":181,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":394},{"krate":0,"index":395}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":88801,"byte_end":88815,"line_start":243,"line_end":243,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":398}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":89165,"byte_end":89179,"line_start":254,"line_end":254,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":404}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":89940,"byte_end":89954,"line_start":279,"line_end":279,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":407}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":90175,"byte_end":90189,"line_start":288,"line_end":288,"column_start":33,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":410},{"krate":0,"index":411}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":91956,"byte_end":91965,"line_start":55,"line_end":55,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":95165,"byte_end":95174,"line_start":145,"line_end":145,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":443},{"krate":0,"index":444}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":95800,"byte_end":95809,"line_start":169,"line_end":169,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":447}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":96032,"byte_end":96041,"line_start":178,"line_end":178,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":450}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":97483,"byte_end":97492,"line_start":228,"line_end":228,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":460}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":100986,"byte_end":100993,"line_start":330,"line_end":330,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":467}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":101177,"byte_end":101186,"line_start":338,"line_end":338,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":470},{"krate":0,"index":471}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":103095,"byte_end":103104,"line_start":396,"line_end":396,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":474}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":51906,"byte_end":51914,"line_start":30,"line_end":30,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":476},{"krate":0,"index":478},{"krate":0,"index":480},{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":54935,"byte_end":54944,"line_start":120,"line_end":120,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":491},{"krate":0,"index":493},{"krate":0,"index":495},{"krate":0,"index":497},{"krate":0,"index":499},{"krate":0,"index":501}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":111347,"byte_end":111362,"line_start":127,"line_end":127,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":518}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":113256,"byte_end":113264,"line_start":183,"line_end":183,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":118845,"byte_end":118855,"line_start":330,"line_end":330,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":124473,"byte_end":124488,"line_start":473,"line_end":473,"column_start":16,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":124528,"byte_end":124533,"line_start":475,"line_end":475,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":537}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":124668,"byte_end":124683,"line_start":481,"line_end":481,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":539}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":124818,"byte_end":124831,"line_start":487,"line_end":487,"column_start":16,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":124869,"byte_end":124874,"line_start":489,"line_end":489,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":542}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":125007,"byte_end":125020,"line_start":495,"line_end":495,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":544}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zio.rs","byte_start":131248,"byte_end":131256,"line_start":32,"line_end":32,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":566},{"krate":0,"index":567}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zio.rs","byte_start":131876,"byte_end":131886,"line_start":58,"line_end":58,"column_start":14,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":569},{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":573}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zio.rs","byte_start":132584,"byte_end":132597,"line_start":90,"line_end":90,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":581}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zio.rs","byte_start":132798,"byte_end":132813,"line_start":104,"line_end":104,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":585}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zio.rs","byte_start":134409,"byte_end":134415,"line_start":159,"line_end":159,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":596},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zio.rs","byte_start":137429,"byte_end":137435,"line_start":254,"line_end":254,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":604},{"krate":0,"index":606}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zio.rs","byte_start":138463,"byte_end":138469,"line_start":284,"line_end":284,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":610}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":144782,"byte_end":144793,"line_start":46,"line_end":46,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":622}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":145191,"byte_end":145202,"line_start":61,"line_end":61,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":630},{"krate":0,"index":631},{"krate":0,"index":632}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":146767,"byte_end":146778,"line_start":109,"line_end":109,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":635}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":147032,"byte_end":147043,"line_start":118,"line_end":118,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":638},{"krate":0,"index":639}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":148548,"byte_end":148559,"line_start":174,"line_end":174,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":642}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":148909,"byte_end":148920,"line_start":189,"line_end":189,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":652}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":150378,"byte_end":150389,"line_start":234,"line_end":234,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":655}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":150645,"byte_end":150656,"line_start":243,"line_end":243,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":658},{"krate":0,"index":659}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":152124,"byte_end":152135,"line_start":42,"line_end":42,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":667}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":152456,"byte_end":152467,"line_start":52,"line_end":52,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":670},{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":675}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":154469,"byte_end":154480,"line_start":107,"line_end":107,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":154696,"byte_end":154707,"line_start":116,"line_end":116,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":681},{"krate":0,"index":682}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":156203,"byte_end":156214,"line_start":171,"line_end":171,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":685},{"krate":0,"index":686}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":156831,"byte_end":156842,"line_start":189,"line_end":189,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":689},{"krate":0,"index":690},{"krate":0,"index":691},{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":694}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":158737,"byte_end":158748,"line_start":241,"line_end":241,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":697}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":158966,"byte_end":158977,"line_start":250,"line_end":250,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":700},{"krate":0,"index":701}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":160348,"byte_end":160359,"line_start":40,"line_end":40,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":719}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":164929,"byte_end":164940,"line_start":159,"line_end":159,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":722},{"krate":0,"index":723}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":165354,"byte_end":165365,"line_start":177,"line_end":177,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":726}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":166801,"byte_end":166812,"line_start":226,"line_end":226,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":729},{"krate":0,"index":730},{"krate":0,"index":731},{"krate":0,"index":732},{"krate":0,"index":733},{"krate":0,"index":734},{"krate":0,"index":735},{"krate":0,"index":736}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":170367,"byte_end":170378,"line_start":323,"line_end":323,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":739},{"krate":0,"index":740}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":170800,"byte_end":170811,"line_start":341,"line_end":341,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":743}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":7358,"byte_end":7369,"line_start":189,"line_end":189,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":771},{"krate":0,"index":772},{"krate":0,"index":773},{"krate":0,"index":774},{"krate":0,"index":775}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":8276,"byte_end":8287,"line_start":222,"line_end":222,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":777}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/bufreader.rs","byte_start":9173,"byte_end":9182,"line_start":23,"line_end":23,"column_start":31,"column_end":40},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":23},"to":{"krate":2,"index":6176}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/bufreader.rs","byte_start":9568,"byte_end":9577,"line_start":38,"line_end":38,"column_start":15,"column_end":24},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":23},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/bufreader.rs","byte_start":9904,"byte_end":9913,"line_start":53,"line_end":53,"column_start":9,"column_end":18},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":23},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/bufreader.rs","byte_start":10280,"byte_end":10289,"line_start":73,"line_end":73,"column_start":24,"column_end":33},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":23},"to":{"krate":1,"index":2932}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/bufreader.rs","byte_start":10830,"byte_end":10839,"line_start":90,"line_end":90,"column_start":27,"column_end":36},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":23},"to":{"krate":1,"index":3015}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":11777,"byte_end":11780,"line_start":26,"line_end":26,"column_start":6,"column_end":9},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":778},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":12798,"byte_end":12807,"line_start":65,"line_end":65,"column_start":15,"column_end":24},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":783},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":12982,"byte_end":12991,"line_start":75,"line_end":75,"column_start":9,"column_end":18},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":783},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":13628,"byte_end":13637,"line_start":102,"line_end":102,"column_start":24,"column_end":33},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":783},"to":{"krate":1,"index":2932}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":13841,"byte_end":13850,"line_start":110,"line_end":110,"column_start":30,"column_end":39},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":783},"to":{"krate":1,"index":3015}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":14336,"byte_end":14345,"line_start":131,"line_end":131,"column_start":9,"column_end":18},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":790},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":14974,"byte_end":14983,"line_start":158,"line_end":158,"column_start":16,"column_end":25},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":790},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/crc.rs","byte_start":15175,"byte_end":15184,"line_start":168,"line_end":168,"column_start":26,"column_end":35},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":790},"to":{"krate":1,"index":2991}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":22901,"byte_end":22915,"line_start":50,"line_end":50,"column_start":18,"column_end":32},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":797},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":23324,"byte_end":23338,"line_start":65,"line_end":65,"column_start":9,"column_end":23},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":797},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":24903,"byte_end":24917,"line_start":113,"line_end":113,"column_start":27,"column_end":41},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":797},"to":{"krate":1,"index":2932}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":25174,"byte_end":25188,"line_start":122,"line_end":122,"column_start":36,"column_end":50},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":797},"to":{"krate":1,"index":2991}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":26824,"byte_end":26838,"line_start":180,"line_end":180,"column_start":18,"column_end":32},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":804},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":27095,"byte_end":27109,"line_start":191,"line_end":191,"column_start":9,"column_end":23},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":804},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":28814,"byte_end":28828,"line_start":244,"line_end":244,"column_start":27,"column_end":41},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":804},"to":{"krate":1,"index":2932}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/bufread.rs","byte_start":29087,"byte_end":29101,"line_start":253,"line_end":253,"column_start":36,"column_end":50},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":804},"to":{"krate":1,"index":2991}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":30695,"byte_end":30709,"line_start":45,"line_end":45,"column_start":15,"column_end":29},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":811},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":31039,"byte_end":31053,"line_start":55,"line_end":55,"column_start":9,"column_end":23},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":811},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":33055,"byte_end":33069,"line_start":110,"line_end":110,"column_start":24,"column_end":38},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":811},"to":{"krate":1,"index":2932}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":33288,"byte_end":33302,"line_start":119,"line_end":119,"column_start":33,"column_end":47},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":811},"to":{"krate":1,"index":2991}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":34837,"byte_end":34851,"line_start":172,"line_end":172,"column_start":15,"column_end":29},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":817},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":35468,"byte_end":35482,"line_start":190,"line_end":190,"column_start":9,"column_end":23},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":817},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":37377,"byte_end":37391,"line_start":242,"line_end":242,"column_start":24,"column_end":38},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":817},"to":{"krate":1,"index":2932}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/read.rs","byte_start":37612,"byte_end":37626,"line_start":251,"line_end":251,"column_start":33,"column_end":47},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":817},"to":{"krate":1,"index":2991}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":38982,"byte_end":38996,"line_start":39,"line_end":39,"column_start":16,"column_end":30},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":823},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":43636,"byte_end":43650,"line_start":159,"line_end":159,"column_start":26,"column_end":40},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":823},"to":{"krate":1,"index":2991}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":44075,"byte_end":44089,"line_start":177,"line_end":177,"column_start":32,"column_end":46},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":823},"to":{"krate":1,"index":2932}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":45565,"byte_end":45579,"line_start":224,"line_end":224,"column_start":16,"column_end":30},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":829},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":49273,"byte_end":49287,"line_start":324,"line_end":324,"column_start":26,"column_end":40},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":829},"to":{"krate":1,"index":2991}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/deflate/write.rs","byte_start":49712,"byte_end":49726,"line_start":342,"line_end":342,"column_start":32,"column_end":46},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":829},"to":{"krate":1,"index":2932}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/ffi/mod.rs","byte_start":50268,"byte_end":50272,"line_start":10,"line_end":10,"column_start":20,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":1915},"to":{"krate":0,"index":233}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/ffi/mod.rs","byte_start":50275,"byte_end":50279,"line_start":10,"line_end":10,"column_start":27,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":1903},"to":{"krate":0,"index":233}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/ffi/mod.rs","byte_start":50374,"byte_end":50381,"line_start":15,"line_end":15,"column_start":27,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":233},"to":{"krate":0,"index":236}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/ffi/mod.rs","byte_start":50675,"byte_end":50682,"line_start":26,"line_end":26,"column_start":27,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":233},"to":{"krate":0,"index":240}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/ffi/rust.rs","byte_start":8163740,"byte_end":8163747,"line_start":33,"line_end":33,"column_start":21,"column_end":28},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":849},"to":{"krate":2,"index":6176}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/ffi/rust.rs","byte_start":8164016,"byte_end":8164023,"line_start":43,"line_end":43,"column_start":25,"column_end":32},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":849},"to":{"krate":0,"index":236}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/ffi/rust.rs","byte_start":8165516,"byte_end":8165523,"line_start":93,"line_end":93,"column_start":18,"column_end":25},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":849},"to":{"krate":0,"index":233}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/ffi/rust.rs","byte_start":8165796,"byte_end":8165803,"line_start":111,"line_end":111,"column_start":21,"column_end":28},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":862},"to":{"krate":2,"index":6176}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/ffi/rust.rs","byte_start":8166072,"byte_end":8166079,"line_start":121,"line_end":121,"column_start":25,"column_end":32},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":862},"to":{"krate":0,"index":240}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/ffi/rust.rs","byte_start":8167666,"byte_end":8167673,"line_start":173,"line_end":173,"column_start":18,"column_end":25},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":862},"to":{"krate":0,"index":233}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":67018,"byte_end":67027,"line_start":168,"line_end":168,"column_start":18,"column_end":27},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":876},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":68055,"byte_end":68064,"line_start":199,"line_end":199,"column_start":9,"column_end":18},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":876},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":69011,"byte_end":69020,"line_start":232,"line_end":232,"column_start":27,"column_end":36},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":876},"to":{"krate":1,"index":2932}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":69705,"byte_end":69714,"line_start":256,"line_end":256,"column_start":36,"column_end":45},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":876},"to":{"krate":1,"index":2991}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":71542,"byte_end":71548,"line_start":326,"line_end":326,"column_start":13,"column_end":19},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":299},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":71785,"byte_end":71791,"line_start":337,"line_end":337,"column_start":28,"column_end":34},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":299},"to":{"krate":1,"index":2932}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":72204,"byte_end":72213,"line_start":351,"line_end":351,"column_start":18,"column_end":27},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":885},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":73183,"byte_end":73192,"line_start":386,"line_end":386,"column_start":9,"column_end":18},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":885},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":73953,"byte_end":73962,"line_start":411,"line_end":411,"column_start":27,"column_end":36},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":885},"to":{"krate":1,"index":2932}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":78098,"byte_end":78107,"line_start":523,"line_end":523,"column_start":36,"column_end":45},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":885},"to":{"krate":1,"index":2991}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":80067,"byte_end":80081,"line_start":583,"line_end":583,"column_start":18,"column_end":32},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":912},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":80382,"byte_end":80396,"line_start":592,"line_end":592,"column_start":9,"column_end":23},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":912},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":81110,"byte_end":81124,"line_start":617,"line_end":617,"column_start":27,"column_end":41},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":912},"to":{"krate":1,"index":2932}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/bufread.rs","byte_start":81354,"byte_end":81368,"line_start":626,"line_end":626,"column_start":36,"column_end":50},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":912},"to":{"krate":1,"index":2991}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":83031,"byte_end":83040,"line_start":49,"line_end":49,"column_start":15,"column_end":24},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":919},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":83496,"byte_end":83505,"line_start":62,"line_end":62,"column_start":9,"column_end":18},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":919},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":84102,"byte_end":84111,"line_start":82,"line_end":82,"column_start":24,"column_end":33},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":919},"to":{"krate":1,"index":2932}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":84251,"byte_end":84260,"line_start":88,"line_end":88,"column_start":33,"column_end":42},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":919},"to":{"krate":1,"index":2991}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":85553,"byte_end":85562,"line_start":137,"line_end":137,"column_start":15,"column_end":24},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":925},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":85815,"byte_end":85824,"line_start":147,"line_end":147,"column_start":9,"column_end":18},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":925},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":86579,"byte_end":86588,"line_start":172,"line_end":172,"column_start":24,"column_end":33},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":925},"to":{"krate":1,"index":2932}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":86804,"byte_end":86813,"line_start":181,"line_end":181,"column_start":33,"column_end":42},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":925},"to":{"krate":1,"index":2991}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":88801,"byte_end":88815,"line_start":243,"line_end":243,"column_start":15,"column_end":29},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":931},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":89165,"byte_end":89179,"line_start":254,"line_end":254,"column_start":9,"column_end":23},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":931},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":89940,"byte_end":89954,"line_start":279,"line_end":279,"column_start":24,"column_end":38},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":931},"to":{"krate":1,"index":2932}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/read.rs","byte_start":90175,"byte_end":90189,"line_start":288,"line_end":288,"column_start":33,"column_end":47},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":931},"to":{"krate":1,"index":2991}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":91956,"byte_end":91965,"line_start":55,"line_end":55,"column_start":16,"column_end":25},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":937},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":95165,"byte_end":95174,"line_start":145,"line_end":145,"column_start":26,"column_end":35},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":937},"to":{"krate":1,"index":2991}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":95800,"byte_end":95809,"line_start":169,"line_end":169,"column_start":32,"column_end":41},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":937},"to":{"krate":1,"index":2932}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":96032,"byte_end":96041,"line_start":178,"line_end":178,"column_start":25,"column_end":34},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":937},"to":{"krate":2,"index":2098}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":97483,"byte_end":97492,"line_start":228,"line_end":228,"column_start":16,"column_end":25},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":946},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":100986,"byte_end":100993,"line_start":330,"line_end":330,"column_start":24,"column_end":31},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":461},"to":{"krate":1,"index":2932}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":101177,"byte_end":101186,"line_start":338,"line_end":338,"column_start":26,"column_end":35},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":946},"to":{"krate":1,"index":2991}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/write.rs","byte_start":103095,"byte_end":103104,"line_start":396,"line_end":396,"column_start":32,"column_end":41},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":946},"to":{"krate":1,"index":2932}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":51906,"byte_end":51914,"line_start":30,"line_end":30,"column_start":6,"column_end":14},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":955},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/gz/mod.rs","byte_start":54935,"byte_end":54944,"line_start":120,"line_end":120,"column_start":6,"column_end":15},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":971},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":111347,"byte_end":111362,"line_start":127,"line_end":127,"column_start":6,"column_end":21},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1045},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":113256,"byte_end":113264,"line_start":183,"line_end":183,"column_start":6,"column_end":14},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":979},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":118845,"byte_end":118855,"line_start":330,"line_end":330,"column_start":6,"column_end":16},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":983},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":124473,"byte_end":124488,"line_start":473,"line_end":473,"column_start":16,"column_end":31},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1045},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":124528,"byte_end":124533,"line_start":475,"line_end":475,"column_start":36,"column_end":41},"kind":{"Impl":{"id":81}},"from":{"krate":1,"index":2532},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":124668,"byte_end":124683,"line_start":481,"line_end":481,"column_start":23,"column_end":38},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1045},"to":{"krate":2,"index":6181}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":124818,"byte_end":124831,"line_start":487,"line_end":487,"column_start":16,"column_end":29},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1050},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":124869,"byte_end":124874,"line_start":489,"line_end":489,"column_start":34,"column_end":39},"kind":{"Impl":{"id":84}},"from":{"krate":1,"index":2532},"to":{"krate":2,"index":1823}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/mem.rs","byte_start":125007,"byte_end":125020,"line_start":495,"line_end":495,"column_start":23,"column_end":36},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1050},"to":{"krate":2,"index":6181}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zio.rs","byte_start":131248,"byte_end":131256,"line_start":32,"line_end":32,"column_start":14,"column_end":22},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":979},"to":{"krate":0,"index":556}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zio.rs","byte_start":131876,"byte_end":131886,"line_start":58,"line_end":58,"column_start":14,"column_end":24},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":983},"to":{"krate":0,"index":556}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zio.rs","byte_start":132584,"byte_end":132597,"line_start":90,"line_end":90,"column_start":16,"column_end":29},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":987},"to":{"krate":0,"index":574}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zio.rs","byte_start":132798,"byte_end":132813,"line_start":104,"line_end":104,"column_start":16,"column_end":31},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1016},"to":{"krate":0,"index":574}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zio.rs","byte_start":134409,"byte_end":134415,"line_start":159,"line_end":159,"column_start":24,"column_end":30},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1073},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zio.rs","byte_start":137429,"byte_end":137435,"line_start":254,"line_end":254,"column_start":34,"column_end":40},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1073},"to":{"krate":1,"index":2991}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zio.rs","byte_start":138463,"byte_end":138469,"line_start":284,"line_end":284,"column_start":33,"column_end":39},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1073},"to":{"krate":2,"index":2098}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":144782,"byte_end":144793,"line_start":46,"line_end":46,"column_start":18,"column_end":29},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1083},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":145191,"byte_end":145202,"line_start":61,"line_end":61,"column_start":9,"column_end":20},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1083},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":146767,"byte_end":146778,"line_start":109,"line_end":109,"column_start":27,"column_end":38},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1083},"to":{"krate":1,"index":2932}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":147032,"byte_end":147043,"line_start":118,"line_end":118,"column_start":36,"column_end":47},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1083},"to":{"krate":1,"index":2991}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":148548,"byte_end":148559,"line_start":174,"line_end":174,"column_start":18,"column_end":29},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1090},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":148909,"byte_end":148920,"line_start":189,"line_end":189,"column_start":9,"column_end":20},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1090},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":150378,"byte_end":150389,"line_start":234,"line_end":234,"column_start":27,"column_end":38},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1090},"to":{"krate":1,"index":2932}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/bufread.rs","byte_start":150645,"byte_end":150656,"line_start":243,"line_end":243,"column_start":36,"column_end":47},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1090},"to":{"krate":1,"index":2991}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":152124,"byte_end":152135,"line_start":42,"line_end":42,"column_start":15,"column_end":26},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1097},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":152456,"byte_end":152467,"line_start":52,"line_end":52,"column_start":9,"column_end":20},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1097},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":154469,"byte_end":154480,"line_start":107,"line_end":107,"column_start":24,"column_end":35},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1097},"to":{"krate":1,"index":2932}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":154696,"byte_end":154707,"line_start":116,"line_end":116,"column_start":33,"column_end":44},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1097},"to":{"krate":1,"index":2991}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":156203,"byte_end":156214,"line_start":171,"line_end":171,"column_start":15,"column_end":26},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1103},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":156831,"byte_end":156842,"line_start":189,"line_end":189,"column_start":9,"column_end":20},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1103},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":158737,"byte_end":158748,"line_start":241,"line_end":241,"column_start":24,"column_end":35},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1103},"to":{"krate":1,"index":2932}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/read.rs","byte_start":158966,"byte_end":158977,"line_start":250,"line_end":250,"column_start":33,"column_end":44},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1103},"to":{"krate":1,"index":2991}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":160348,"byte_end":160359,"line_start":40,"line_end":40,"column_start":16,"column_end":27},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1109},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":164929,"byte_end":164940,"line_start":159,"line_end":159,"column_start":26,"column_end":37},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1109},"to":{"krate":1,"index":2991}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":165354,"byte_end":165365,"line_start":177,"line_end":177,"column_start":32,"column_end":43},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1109},"to":{"krate":1,"index":2932}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":166801,"byte_end":166812,"line_start":226,"line_end":226,"column_start":16,"column_end":27},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1115},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":170367,"byte_end":170378,"line_start":323,"line_end":323,"column_start":26,"column_end":37},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1115},"to":{"krate":1,"index":2991}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/zlib/write.rs","byte_start":170800,"byte_end":170811,"line_start":341,"line_end":341,"column_start":32,"column_end":43},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1115},"to":{"krate":1,"index":2932}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":7358,"byte_end":7369,"line_start":189,"line_end":189,"column_start":6,"column_end":17},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1121},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.16/src/lib.rs","byte_start":8276,"byte_end":8287,"line_start":222,"line_end":222,"column_start":18,"column_end":29},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1121},"to":{"krate":2,"index":1893}}]}