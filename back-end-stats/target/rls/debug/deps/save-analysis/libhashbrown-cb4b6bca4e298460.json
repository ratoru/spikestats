{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2","program":"/Users/raphael/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","hashbrown","--edition=2018","/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-Cembed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"raw\"","-C","metadata=cb4b6bca4e298460","-C","extra-filename=-cb4b6bca4e298460","--out-dir","/Users/raphael/programming/web-projects/roundnet-stats/back-end-stats/target/rls/debug/deps","-L","dependency=/Users/raphael/programming/web-projects/roundnet-stats/back-end-stats/target/rls/debug/deps","--cap-lints","allow","--cfg","has_extern_crate_alloc","--error-format=json","--sysroot","/Users/raphael/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/raphael/programming/web-projects/roundnet-stats/back-end-stats/target/rls/debug/deps/libhashbrown-cb4b6bca4e298460.rmeta"},"prelude":{"crate_id":{"name":"hashbrown","disambiguator":[15086962994778762558,11616353665451231447]},"crate_root":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src","external_crates":[{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[11611887195329836898,18391061204127126749]}},{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[8031993392717489033,4124505603786489705]}},{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[15271802224688203332,8792150453795694033]}},{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[7165577602573969849,9858108452520037846]}}],"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","byte_start":0,"byte_end":3410,"line_start":1,"line_end":124,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","byte_start":1618,"byte_end":1619,"line_start":60,"line_end":60,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"RawIntoIter, Bucket, RawTable, RawDrain, RawIter","parent":{"krate":0,"index":8}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","byte_start":1618,"byte_end":1619,"line_start":60,"line_end":60,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":1339}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","byte_start":1618,"byte_end":1619,"line_start":60,"line_end":60,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":1341}},{"kind":"Use","ref_id":{"krate":0,"index":325},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","byte_start":2948,"byte_end":2955,"line_start":109,"line_end":109,"column_start":21,"column_end":28},"alias_span":null,"name":"HashMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1019},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","byte_start":2977,"byte_end":2984,"line_start":110,"line_end":110,"column_start":21,"column_end":28},"alias_span":null,"name":"HashSet","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","byte_start":0,"byte_end":3410,"line_start":1,"line_end":124,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":969},{"krate":0,"index":994},{"krate":0,"index":1339},{"krate":0,"index":1341},{"krate":0,"index":1343},{"krate":0,"index":1344},{"krate":0,"index":1393},{"krate":0,"index":1407},{"krate":0,"index":1403},{"krate":0,"index":1404},{"krate":0,"index":1400},{"krate":0,"index":1401},{"krate":0,"index":1398}],"decl_id":null,"docs":" This crate is a Rust port of Google's high-performance [SwissTable] hash\n map, adapted to make it a drop-in replacement for Rust's standard `HashMap`\n and `HashSet` types.","sig":null,"attributes":[{"value":"! This crate is a Rust port of Google's high-performance [SwissTable] hash","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","byte_start":0,"byte_end":76,"line_start":1,"line_end":1,"column_start":1,"column_end":77}},{"value":"! map, adapted to make it a drop-in replacement for Rust's standard `HashMap`","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","byte_start":77,"byte_end":156,"line_start":2,"line_end":2,"column_start":1,"column_end":80}},{"value":"! and `HashSet` types.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","byte_start":157,"byte_end":181,"line_start":3,"line_end":3,"column_start":1,"column_end":25}},{"value":"!","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","byte_start":182,"byte_end":185,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! The original C++ version of [SwissTable] can be found [here], and this","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","byte_start":186,"byte_end":260,"line_start":5,"line_end":5,"column_start":1,"column_end":75}},{"value":"! [CppCon talk] gives an overview of how the algorithm works.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","byte_start":261,"byte_end":324,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"!","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","byte_start":325,"byte_end":328,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! [SwissTable]: https://abseil.io/blog/20180927-swisstables","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","byte_start":329,"byte_end":390,"line_start":8,"line_end":8,"column_start":1,"column_end":62}},{"value":"! [here]: https://github.com/abseil/abseil-cpp/blob/master/absl/container/internal/raw_hash_set.h","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","byte_start":391,"byte_end":490,"line_start":9,"line_end":9,"column_start":1,"column_end":100}},{"value":"! [CppCon talk]: https://www.youtube.com/watch?v=ncHmEUmJZf4","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","byte_start":491,"byte_end":553,"line_start":10,"line_end":10,"column_start":1,"column_end":63}},{"value":"no_std","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","byte_start":555,"byte_end":565,"line_start":12,"line_end":12,"column_start":1,"column_end":11}},{"value":"allow(clippy :: doc_markdown, clippy :: module_name_repetitions, clippy ::\n        must_use_candidate, clippy :: option_if_let_else)","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","byte_start":814,"byte_end":952,"line_start":26,"line_end":31,"column_start":1,"column_end":3}},{"value":"warn(missing_docs)","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","byte_start":953,"byte_end":975,"line_start":32,"line_end":32,"column_start":1,"column_end":23}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","byte_start":976,"byte_end":1002,"line_start":33,"line_end":33,"column_start":1,"column_end":27}}]},{"kind":"Mod","id":{"krate":0,"index":8},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","byte_start":1446,"byte_end":1449,"line_start":55,"line_end":55,"column_start":9,"column_end":12},"name":"raw","qualname":"::raw","value":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":9},{"krate":0,"index":300}],"decl_id":null,"docs":" Experimental and unsafe `RawTable` API. This module is only available if the\n `raw` feature is enabled.\n","sig":null,"attributes":[{"value":"cfg(feature = \"raw\")","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","byte_start":1303,"byte_end":1326,"line_start":52,"line_end":52,"column_start":1,"column_end":24}},{"value":"/ Experimental and unsafe `RawTable` API. This module is only available if the","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","byte_start":1327,"byte_end":1407,"line_start":53,"line_end":53,"column_start":1,"column_end":81}},{"value":"/ `raw` feature is enabled.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","byte_start":1408,"byte_end":1437,"line_start":54,"line_end":54,"column_start":1,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":76},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":14890,"byte_end":14896,"line_start":272,"line_end":272,"column_start":12,"column_end":18},"name":"Bucket","qualname":"::raw::inner::Bucket","value":"Bucket {  }","parent":null,"children":[{"krate":0,"index":78}],"decl_id":null,"docs":" A reference to a hash table bucket containing a `T`.","sig":null,"attributes":[{"value":"/ A reference to a hash table bucket containing a `T`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":14627,"byte_end":14683,"line_start":267,"line_end":267,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":14684,"byte_end":14687,"line_start":268,"line_end":268,"column_start":1,"column_end":4}},{"value":"/ This is usually just a pointer to the element itself. However if the element","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":14688,"byte_end":14768,"line_start":269,"line_end":269,"column_start":1,"column_end":81}},{"value":"/ is a ZST, then we instead track the index of the element in the table so","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":14769,"byte_end":14845,"line_start":270,"line_end":270,"column_start":1,"column_end":77}},{"value":"/ that `erase` works properly.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":14846,"byte_end":14878,"line_start":271,"line_end":271,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":16256,"byte_end":16262,"line_start":313,"line_end":313,"column_start":19,"column_end":25},"name":"as_ptr","qualname":"<Bucket<T>>::as_ptr","value":"fn (&self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":16935,"byte_end":16939,"line_start":333,"line_end":333,"column_start":19,"column_end":23},"name":"drop","qualname":"<Bucket<T>>::drop","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":17061,"byte_end":17065,"line_start":337,"line_end":337,"column_start":19,"column_end":23},"name":"read","qualname":"<Bucket<T>>::read","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":17182,"byte_end":17187,"line_start":341,"line_end":341,"column_start":19,"column_end":24},"name":"write","qualname":"<Bucket<T>>::write","value":"fn (&self, val: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":17312,"byte_end":17318,"line_start":345,"line_end":345,"column_start":19,"column_end":25},"name":"as_ref","qualname":"<Bucket<T>>::as_ref","value":"fn <'a> (&self) -> &'a T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":17438,"byte_end":17444,"line_start":349,"line_end":349,"column_start":19,"column_end":25},"name":"as_mut","qualname":"<Bucket<T>>::as_mut","value":"fn <'a> (&self) -> &'a mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":17572,"byte_end":17596,"line_start":353,"line_end":353,"column_start":19,"column_end":43},"name":"copy_from_nonoverlapping","qualname":"<Bucket<T>>::copy_from_nonoverlapping","value":"fn (&self, other: &Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":98},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":17748,"byte_end":17756,"line_start":359,"line_end":359,"column_start":12,"column_end":20},"name":"RawTable","qualname":"::raw::inner::RawTable","value":"RawTable {  }","parent":null,"children":[{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104}],"decl_id":null,"docs":" A raw hash table with an unsafe API.\n","sig":null,"attributes":[{"value":"/ A raw hash table with an unsafe API.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":17696,"byte_end":17736,"line_start":358,"line_end":358,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":18694,"byte_end":18697,"line_start":385,"line_end":385,"column_start":12,"column_end":15},"name":"new","qualname":"<RawTable<T>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty hash table without allocating any memory.","sig":null,"attributes":[{"value":"/ Creates a new empty hash table without allocating any memory.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":18324,"byte_end":18389,"line_start":379,"line_end":379,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":18394,"byte_end":18397,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ In effect this returns a table with exactly 1 bucket. However we can","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":18402,"byte_end":18474,"line_start":381,"line_end":381,"column_start":5,"column_end":77}},{"value":"/ leave the data pointer dangling since that bucket is never written to","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":18479,"byte_end":18552,"line_start":382,"line_end":382,"column_start":5,"column_end":78}},{"value":"/ due to our load factor forcing us to always have at least 1 free bucket.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":18557,"byte_end":18633,"line_start":383,"line_end":383,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":21116,"byte_end":21133,"line_start":451,"line_end":451,"column_start":12,"column_end":29},"name":"try_with_capacity","qualname":"<RawTable<T>>::try_with_capacity","value":"fn (capacity: usize) -> Result<Self, TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to allocate a new hash table with at least enough capacity\n for inserting the given number of elements without reallocating.\n","sig":null,"attributes":[{"value":"/ Attempts to allocate a new hash table with at least enough capacity","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":20932,"byte_end":21003,"line_start":448,"line_end":448,"column_start":5,"column_end":76}},{"value":"/ for inserting the given number of elements without reallocating.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":21008,"byte_end":21076,"line_start":449,"line_end":449,"column_start":5,"column_end":73}},{"value":"cfg(feature = \"raw\")","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":21081,"byte_end":21104,"line_start":450,"line_end":450,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":21412,"byte_end":21425,"line_start":457,"line_end":457,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<RawTable<T>>::with_capacity","value":"fn (capacity: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new hash table with at least enough capacity for inserting\n the given number of elements without reallocating.\n","sig":null,"attributes":[{"value":"/ Allocates a new hash table with at least enough capacity for inserting","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":21267,"byte_end":21341,"line_start":455,"line_end":455,"column_start":5,"column_end":79}},{"value":"/ the given number of elements without reallocating.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":21346,"byte_end":21400,"line_start":456,"line_end":456,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":22313,"byte_end":22321,"line_start":478,"line_end":478,"column_start":19,"column_end":27},"name":"data_end","qualname":"<RawTable<T>>::data_end","value":"fn (&self) -> NonNull<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns pointer to one past last element of data table.\n","sig":null,"attributes":[{"value":"/ Returns pointer to one past last element of data table.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":22186,"byte_end":22245,"line_start":476,"line_end":476,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":22781,"byte_end":22793,"line_start":491,"line_end":491,"column_start":19,"column_end":31},"name":"bucket_index","qualname":"<RawTable<T>>::bucket_index","value":"fn (&self, bucket: &Bucket<T>) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the index of a bucket from a `Bucket`.\n","sig":null,"attributes":[{"value":"/ Returns the index of a bucket from a `Bucket`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":22663,"byte_end":22713,"line_start":489,"line_end":489,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":23252,"byte_end":23258,"line_start":504,"line_end":504,"column_start":19,"column_end":25},"name":"bucket","qualname":"<RawTable<T>>::bucket","value":"fn (&self, index: usize) -> Bucket<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a pointer to an element in the table.\n","sig":null,"attributes":[{"value":"/ Returns a pointer to an element in the table.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":23135,"byte_end":23184,"line_start":502,"line_end":502,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":23654,"byte_end":23667,"line_start":513,"line_end":513,"column_start":19,"column_end":32},"name":"erase_no_drop","qualname":"<RawTable<T>>::erase_no_drop","value":"fn (&mut self, item: &Bucket<T>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Erases an element from the table without dropping it.\n","sig":null,"attributes":[{"value":"/ Erases an element from the table without dropping it.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":23456,"byte_end":23513,"line_start":510,"line_end":510,"column_start":5,"column_end":62}},{"value":"deprecated(since = \"0.8.1\", note = \"use erase or remove instead\")","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":23567,"byte_end":23635,"line_start":512,"line_end":512,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":24997,"byte_end":25002,"line_start":542,"line_end":542,"column_start":19,"column_end":24},"name":"erase","qualname":"<RawTable<T>>::erase","value":"fn (&mut self, item: Bucket<T>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Erases an element from the table, dropping it in place.\n","sig":null,"attributes":[{"value":"/ Erases an element from the table, dropping it in place.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":24800,"byte_end":24859,"line_start":538,"line_end":538,"column_start":5,"column_end":64}},{"value":"allow(clippy :: needless_pass_by_value)","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":24913,"byte_end":24953,"line_start":540,"line_end":540,"column_start":5,"column_end":45}},{"value":"allow(deprecated)","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":24958,"byte_end":24978,"line_start":541,"line_end":541,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":25364,"byte_end":25370,"line_start":552,"line_end":552,"column_start":19,"column_end":25},"name":"remove","qualname":"<RawTable<T>>::remove","value":"fn (&mut self, item: Bucket<T>) -> T","parent":null,"children":[],"decl_id":null,"docs":" Removes an element from the table, returning it.\n","sig":null,"attributes":[{"value":"/ Removes an element from the table, returning it.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":25174,"byte_end":25226,"line_start":548,"line_end":548,"column_start":5,"column_end":57}},{"value":"allow(clippy :: needless_pass_by_value)","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":25280,"byte_end":25320,"line_start":550,"line_end":550,"column_start":5,"column_end":45}},{"value":"allow(deprecated)","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":25325,"byte_end":25345,"line_start":551,"line_end":551,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":29263,"byte_end":29276,"line_start":639,"line_end":639,"column_start":12,"column_end":25},"name":"clear_no_drop","qualname":"<RawTable<T>>::clear_no_drop","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Marks all table buckets as empty without dropping their contents.\n","sig":null,"attributes":[{"value":"/ Marks all table buckets as empty without dropping their contents.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":29133,"byte_end":29202,"line_start":637,"line_end":637,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":29688,"byte_end":29693,"line_start":651,"line_end":651,"column_start":12,"column_end":17},"name":"clear","qualname":"<RawTable<T>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Removes all elements from the table without freeing the backing memory.\n","sig":null,"attributes":[{"value":"/ Removes all elements from the table without freeing the backing memory.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":29552,"byte_end":29627,"line_start":649,"line_end":649,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":30178,"byte_end":30187,"line_start":666,"line_end":666,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<RawTable<T>>::shrink_to","value":"fn (&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the table to fit `max(self.len(), min_size)` elements.\n","sig":null,"attributes":[{"value":"/ Shrinks the table to fit `max(self.len(), min_size)` elements.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":30051,"byte_end":30117,"line_start":664,"line_end":664,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":31588,"byte_end":31595,"line_start":701,"line_end":701,"column_start":12,"column_end":19},"name":"reserve","qualname":"<RawTable<T>>::reserve","value":"fn (&mut self, additional: usize, hasher: impl Fn(&T) -> u64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Ensures that at least `additional` items can be inserted into the table\n without reallocation.\n","sig":null,"attributes":[{"value":"/ Ensures that at least `additional` items can be inserted into the table","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":31422,"byte_end":31497,"line_start":698,"line_end":698,"column_start":5,"column_end":80}},{"value":"/ without reallocation.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":31502,"byte_end":31527,"line_start":699,"line_end":699,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":32129,"byte_end":32140,"line_start":713,"line_end":713,"column_start":12,"column_end":23},"name":"try_reserve","qualname":"<RawTable<T>>::try_reserve","value":"fn (&mut self, additional: usize, hasher: impl Fn(&T) -> u64) -> Result<(), TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to ensure that at least `additional` items can be inserted into\n the table without reallocation.\n","sig":null,"attributes":[{"value":"/ Tries to ensure that at least `additional` items can be inserted into","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":31955,"byte_end":32028,"line_start":710,"line_end":710,"column_start":5,"column_end":78}},{"value":"/ the table without reallocation.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":32033,"byte_end":32068,"line_start":711,"line_end":711,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":40566,"byte_end":40572,"line_start":911,"line_end":911,"column_start":12,"column_end":18},"name":"insert","qualname":"<RawTable<T>>::insert","value":"fn (&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a new element into the table.","sig":null,"attributes":[{"value":"/ Inserts a new element into the table.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":40378,"byte_end":40419,"line_start":907,"line_end":907,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":40424,"byte_end":40427,"line_start":908,"line_end":908,"column_start":5,"column_end":8}},{"value":"/ This does not check if the given element already exists in the table.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":40432,"byte_end":40505,"line_start":909,"line_end":909,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":41799,"byte_end":41813,"line_start":940,"line_end":940,"column_start":12,"column_end":26},"name":"insert_no_grow","qualname":"<RawTable<T>>::insert_no_grow","value":"fn (&mut self, hash: u64, value: T) -> Bucket<T>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a new element into the table, without growing the table.","sig":null,"attributes":[{"value":"/ Inserts a new element into the table, without growing the table.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":41436,"byte_end":41504,"line_start":933,"line_end":933,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":41509,"byte_end":41512,"line_start":934,"line_end":934,"column_start":5,"column_end":8}},{"value":"/ There must be enough space in the table to insert the new element.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":41517,"byte_end":41587,"line_start":935,"line_end":935,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":41592,"byte_end":41595,"line_start":936,"line_end":936,"column_start":5,"column_end":8}},{"value":"/ This does not check if the given element already exists in the table.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":41600,"byte_end":41673,"line_start":937,"line_end":937,"column_start":5,"column_end":78}},{"value":"cfg(any(feature = \"raw\", feature = \"rustc-internal-api\"))","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":41727,"byte_end":41787,"line_start":939,"line_end":939,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":42419,"byte_end":42423,"line_start":959,"line_end":959,"column_start":12,"column_end":16},"name":"find","qualname":"<RawTable<T>>::find","value":"fn (&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>>","parent":null,"children":[],"decl_id":null,"docs":" Searches for an element in the table.\n","sig":null,"attributes":[{"value":"/ Searches for an element in the table.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":42352,"byte_end":42393,"line_start":957,"line_end":957,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":42398,"byte_end":42407,"line_start":958,"line_end":958,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":43037,"byte_end":43045,"line_start":976,"line_end":976,"column_start":12,"column_end":20},"name":"capacity","qualname":"<RawTable<T>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the map can hold without reallocating.","sig":null,"attributes":[{"value":"/ Returns the number of elements the map can hold without reallocating.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":42754,"byte_end":42827,"line_start":971,"line_end":971,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":42832,"byte_end":42835,"line_start":972,"line_end":972,"column_start":5,"column_end":8}},{"value":"/ This number is a lower bound; the table might be able to hold","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":42840,"byte_end":42905,"line_start":973,"line_end":973,"column_start":5,"column_end":70}},{"value":"/ more, but is guaranteed to be able to hold at least this many.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":42910,"byte_end":42976,"line_start":974,"line_end":974,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":43222,"byte_end":43225,"line_start":982,"line_end":982,"column_start":12,"column_end":15},"name":"len","qualname":"<RawTable<T>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the table.\n","sig":null,"attributes":[{"value":"/ Returns the number of elements in the table.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":43113,"byte_end":43161,"line_start":980,"line_end":980,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":43382,"byte_end":43389,"line_start":988,"line_end":988,"column_start":12,"column_end":19},"name":"buckets","qualname":"<RawTable<T>>::buckets","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of buckets in the table.\n","sig":null,"attributes":[{"value":"/ Returns the number of buckets in the table.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":43274,"byte_end":43321,"line_start":986,"line_end":986,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":44210,"byte_end":44214,"line_start":1010,"line_end":1010,"column_start":19,"column_end":23},"name":"iter","qualname":"<RawTable<T>>::iter","value":"fn (&self) -> RawIter<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over every element in the table. It is up to\n the caller to ensure that the `RawTable` outlives the `RawIter`.\n Because we cannot make the `next` method unsafe on the `RawIter`\n struct, we have to make the `iter` method unsafe.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over every element in the table. It is up to","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":43870,"byte_end":43938,"line_start":1005,"line_end":1005,"column_start":5,"column_end":73}},{"value":"/ the caller to ensure that the `RawTable` outlives the `RawIter`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":43943,"byte_end":44011,"line_start":1006,"line_end":1006,"column_start":5,"column_end":73}},{"value":"/ Because we cannot make the `next` method unsafe on the `RawIter`","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":44016,"byte_end":44084,"line_start":1007,"line_end":1007,"column_start":5,"column_end":73}},{"value":"/ struct, we have to make the `iter` method unsafe.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":44089,"byte_end":44142,"line_start":1008,"line_end":1008,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":44919,"byte_end":44928,"line_start":1026,"line_end":1026,"column_start":19,"column_end":28},"name":"iter_hash","qualname":"<RawTable<T>>::iter_hash","value":"fn (&self, hash: u64) -> RawIterHash<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over occupied buckets that could match a given hash.","sig":null,"attributes":[{"value":"/ Returns an iterator over occupied buckets that could match a given hash.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":44451,"byte_end":44527,"line_start":1018,"line_end":1018,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":44532,"byte_end":44535,"line_start":1019,"line_end":1019,"column_start":5,"column_end":8}},{"value":"/ In rare cases, the iterator may return a bucket with a different hash.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":44540,"byte_end":44614,"line_start":1020,"line_end":1020,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":44619,"byte_end":44622,"line_start":1021,"line_end":1021,"column_start":5,"column_end":8}},{"value":"/ It is up to the caller to ensure that the `RawTable` outlives the","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":44627,"byte_end":44696,"line_start":1022,"line_end":1022,"column_start":5,"column_end":74}},{"value":"/ `RawIterHash`. Because we cannot make the `next` method unsafe on the","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":44701,"byte_end":44774,"line_start":1023,"line_end":1023,"column_start":5,"column_end":78}},{"value":"/ `RawIterHash` struct, we have to make the `iter_hash` method unsafe.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":44779,"byte_end":44851,"line_start":1024,"line_end":1024,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":45408,"byte_end":45413,"line_start":1037,"line_end":1037,"column_start":19,"column_end":24},"name":"drain","qualname":"<RawTable<T>>::drain","value":"fn (&mut self) -> RawDrain<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator which removes all elements from the table without\n freeing the memory.","sig":null,"attributes":[{"value":"/ Returns an iterator which removes all elements from the table without","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":45019,"byte_end":45092,"line_start":1030,"line_end":1030,"column_start":5,"column_end":78}},{"value":"/ freeing the memory.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":45097,"byte_end":45120,"line_start":1031,"line_end":1031,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":45125,"byte_end":45128,"line_start":1032,"line_end":1032,"column_start":5,"column_end":8}},{"value":"/ It is up to the caller to ensure that the `RawTable` outlives the `RawDrain`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":45133,"byte_end":45214,"line_start":1033,"line_end":1033,"column_start":5,"column_end":86}},{"value":"/ Because we cannot make the `next` method unsafe on the `RawDrain`,","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":45219,"byte_end":45289,"line_start":1034,"line_end":1034,"column_start":5,"column_end":75}},{"value":"/ we have to make the `drain` method unsafe.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":45294,"byte_end":45340,"line_start":1035,"line_end":1035,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":46076,"byte_end":46091,"line_start":1052,"line_end":1052,"column_start":19,"column_end":34},"name":"drain_iter_from","qualname":"<RawTable<T>>::drain_iter_from","value":"fn (&mut self, iter: RawIter<T>) -> RawDrain<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator which removes all elements from the table without\n freeing the memory.","sig":null,"attributes":[{"value":"/ Returns an iterator which removes all elements from the table without","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":45524,"byte_end":45597,"line_start":1042,"line_end":1042,"column_start":5,"column_end":78}},{"value":"/ freeing the memory.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":45602,"byte_end":45625,"line_start":1043,"line_end":1043,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":45630,"byte_end":45633,"line_start":1044,"line_end":1044,"column_start":5,"column_end":8}},{"value":"/ It is up to the caller to ensure that the `RawTable` outlives the `RawDrain`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":45638,"byte_end":45719,"line_start":1045,"line_end":1045,"column_start":5,"column_end":86}},{"value":"/ Because we cannot make the `next` method unsafe on the `RawDrain`,","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":45724,"byte_end":45794,"line_start":1046,"line_end":1046,"column_start":5,"column_end":75}},{"value":"/ we have to make the `drain` method unsafe.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":45799,"byte_end":45845,"line_start":1047,"line_end":1047,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":45850,"byte_end":45853,"line_start":1048,"line_end":1048,"column_start":5,"column_end":8}},{"value":"/ Iteration starts at the provided iterator's current location.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":45858,"byte_end":45923,"line_start":1049,"line_end":1049,"column_start":5,"column_end":70}},{"value":"/ You must ensure that the iterator covers all items that remain in the table.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":45928,"byte_end":46008,"line_start":1050,"line_end":1050,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":46883,"byte_end":46897,"line_start":1070,"line_end":1070,"column_start":19,"column_end":33},"name":"into_iter_from","qualname":"<RawTable<T>>::into_iter_from","value":"fn (self, iter: RawIter<T>) -> RawIntoIter<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator which consumes all elements from the table.","sig":null,"attributes":[{"value":"/ Returns an iterator which consumes all elements from the table.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":46399,"byte_end":46466,"line_start":1062,"line_end":1062,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":46471,"byte_end":46474,"line_start":1063,"line_end":1063,"column_start":5,"column_end":8}},{"value":"/ It is up to the caller to ensure that the `RawTable` outlives the `RawIntoIter`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":46479,"byte_end":46563,"line_start":1064,"line_end":1064,"column_start":5,"column_end":89}},{"value":"/ Because we cannot make the `next` method unsafe on the `RawIntoIter`,","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":46568,"byte_end":46641,"line_start":1065,"line_end":1065,"column_start":5,"column_end":78}},{"value":"/ we have to make the `into_iter_from` method unsafe.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":46646,"byte_end":46701,"line_start":1066,"line_end":1066,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":46706,"byte_end":46709,"line_start":1067,"line_end":1067,"column_start":5,"column_end":8}},{"value":"/ Iteration starts at the provided iterator's current location.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":46714,"byte_end":46779,"line_start":1068,"line_end":1068,"column_start":5,"column_end":70}},{"value":"/ You must ensure that the iterator covers all items that remain in the table.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":46784,"byte_end":46864,"line_start":1069,"line_end":1069,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":53045,"byte_end":53067,"line_start":1240,"line_end":1240,"column_start":12,"column_end":34},"name":"clone_from_with_hasher","qualname":"<RawTable<T>>::clone_from_with_hasher","value":"fn (&mut self, source: &Self, hasher: impl Fn(&T) -> u64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Variant of `clone_from` to use when a hasher is available.\n","sig":null,"attributes":[{"value":"/ Variant of `clone_from` to use when a hasher is available.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":52943,"byte_end":53005,"line_start":1238,"line_end":1238,"column_start":5,"column_end":67}},{"value":"cfg(feature = \"raw\")","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":53010,"byte_end":53033,"line_start":1239,"line_end":1239,"column_start":5,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":211},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":62095,"byte_end":62102,"line_start":1484,"line_end":1484,"column_start":12,"column_end":19},"name":"RawIter","qualname":"::raw::inner::RawIter","value":"RawIter {  }","parent":null,"children":[{"krate":0,"index":213},{"krate":0,"index":214}],"decl_id":null,"docs":" Iterator which returns a raw pointer to every full bucket in the table.","sig":null,"attributes":[{"value":"/ Iterator which returns a raw pointer to every full bucket in the table.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":61288,"byte_end":61363,"line_start":1472,"line_end":1472,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":61364,"byte_end":61367,"line_start":1473,"line_end":1473,"column_start":1,"column_end":4}},{"value":"/ For maximum flexibility this iterator is not bound by a lifetime, but you","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":61368,"byte_end":61445,"line_start":1474,"line_end":1474,"column_start":1,"column_end":78}},{"value":"/ must observe several rules when using it:","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":61446,"byte_end":61491,"line_start":1475,"line_end":1475,"column_start":1,"column_end":46}},{"value":"/ - You must not free the hash table while iterating (including via growing/shrinking).","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":61492,"byte_end":61581,"line_start":1476,"line_end":1476,"column_start":1,"column_end":90}},{"value":"/ - It is fine to erase a bucket that has been yielded by the iterator.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":61582,"byte_end":61655,"line_start":1477,"line_end":1477,"column_start":1,"column_end":74}},{"value":"/ - Erasing a bucket that has not yet been yielded by the iterator may still","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":61656,"byte_end":61734,"line_start":1478,"line_end":1478,"column_start":1,"column_end":79}},{"value":"/   result in the iterator yielding that bucket (unless `reflect_remove` is called).","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":61735,"byte_end":61821,"line_start":1479,"line_end":1479,"column_start":1,"column_end":87}},{"value":"/ - It is unspecified whether an element inserted after the iterator was","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":61822,"byte_end":61896,"line_start":1480,"line_end":1480,"column_start":1,"column_end":75}},{"value":"/   created will be yielded by that iterator (unless `reflect_insert` is called).","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":61897,"byte_end":61980,"line_start":1481,"line_end":1481,"column_start":1,"column_end":84}},{"value":"/ - The order in which the iterator yields bucket is unspecified and may","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":61981,"byte_end":62055,"line_start":1482,"line_end":1482,"column_start":1,"column_end":75}},{"value":"/   change in the future.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":62056,"byte_end":62083,"line_start":1483,"line_end":1483,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":62645,"byte_end":62659,"line_start":1498,"line_end":1498,"column_start":12,"column_end":26},"name":"reflect_remove","qualname":"<RawIter<T>>::reflect_remove","value":"fn (&mut self, b: &Bucket<T>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Refresh the iterator so that it reflects a removal from the given bucket.","sig":null,"attributes":[{"value":"/ Refresh the iterator so that it reflects a removal from the given bucket.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":62192,"byte_end":62269,"line_start":1490,"line_end":1490,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":62274,"byte_end":62277,"line_start":1491,"line_end":1491,"column_start":5,"column_end":8}},{"value":"/ For the iterator to remain valid, this method must be called once","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":62282,"byte_end":62351,"line_start":1492,"line_end":1492,"column_start":5,"column_end":74}},{"value":"/ for each removed bucket before `next` is called again.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":62356,"byte_end":62414,"line_start":1493,"line_end":1493,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":62419,"byte_end":62422,"line_start":1494,"line_end":1494,"column_start":5,"column_end":8}},{"value":"/ This method should be called _before_ the removal is made. It is not necessary to call this","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":62427,"byte_end":62522,"line_start":1495,"line_end":1495,"column_start":5,"column_end":100}},{"value":"/ method if you are removing an item that this iterator yielded in the past.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":62527,"byte_end":62605,"line_start":1496,"line_end":1496,"column_start":5,"column_end":83}},{"value":"cfg(feature = \"raw\")","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":62610,"byte_end":62633,"line_start":1497,"line_end":1497,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":63245,"byte_end":63259,"line_start":1512,"line_end":1512,"column_start":12,"column_end":26},"name":"reflect_insert","qualname":"<RawIter<T>>::reflect_insert","value":"fn (&mut self, b: &Bucket<T>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Refresh the iterator so that it reflects an insertion into the given bucket.","sig":null,"attributes":[{"value":"/ Refresh the iterator so that it reflects an insertion into the given bucket.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":62743,"byte_end":62823,"line_start":1502,"line_end":1502,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":62828,"byte_end":62831,"line_start":1503,"line_end":1503,"column_start":5,"column_end":8}},{"value":"/ For the iterator to remain valid, this method must be called once","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":62836,"byte_end":62905,"line_start":1504,"line_end":1504,"column_start":5,"column_end":74}},{"value":"/ for each insert before `next` is called again.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":62910,"byte_end":62960,"line_start":1505,"line_end":1505,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":62965,"byte_end":62968,"line_start":1506,"line_end":1506,"column_start":5,"column_end":8}},{"value":"/ This method does not guarantee that an insertion of a bucket witha greater","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":62973,"byte_end":63051,"line_start":1507,"line_end":1507,"column_start":5,"column_end":83}},{"value":"/ index than the last one yielded will be reflected in the iterator.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":63056,"byte_end":63126,"line_start":1508,"line_end":1508,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":63131,"byte_end":63134,"line_start":1509,"line_end":1509,"column_start":5,"column_end":8}},{"value":"/ This method should be called _after_ the given insert is made.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":63139,"byte_end":63205,"line_start":1510,"line_end":1510,"column_start":5,"column_end":71}},{"value":"cfg(feature = \"raw\")","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":63210,"byte_end":63233,"line_start":1511,"line_end":1511,"column_start":5,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":232},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":69152,"byte_end":69163,"line_start":1644,"line_end":1644,"column_start":12,"column_end":23},"name":"RawIntoIter","qualname":"::raw::inner::RawIntoIter","value":"RawIntoIter {  }","parent":null,"children":[{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236}],"decl_id":null,"docs":" Iterator which consumes a table and returns elements.\n","sig":null,"attributes":[{"value":"/ Iterator which consumes a table and returns elements.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":69083,"byte_end":69140,"line_start":1643,"line_end":1643,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":239},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":69349,"byte_end":69353,"line_start":1652,"line_end":1652,"column_start":12,"column_end":16},"name":"iter","qualname":"<RawIntoIter<T>>::iter","value":"fn (&self) -> RawIter<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":256},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":71164,"byte_end":71172,"line_start":1717,"line_end":1717,"column_start":12,"column_end":20},"name":"RawDrain","qualname":"::raw::inner::RawDrain","value":"RawDrain {  }","parent":null,"children":[{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262}],"decl_id":null,"docs":" Iterator which consumes elements without freeing the table storage.\n","sig":null,"attributes":[{"value":"/ Iterator which consumes elements without freeing the table storage.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":71081,"byte_end":71152,"line_start":1716,"line_end":1716,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":71691,"byte_end":71695,"line_start":1733,"line_end":1733,"column_start":12,"column_end":16},"name":"iter","qualname":"<RawDrain>::iter","value":"fn (&self) -> RawIter<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":282},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":73244,"byte_end":73255,"line_start":1787,"line_end":1787,"column_start":12,"column_end":23},"name":"RawIterHash","qualname":"::raw::inner::RawIterHash","value":"RawIterHash {  }","parent":null,"children":[{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290}],"decl_id":null,"docs":" Iterator over occupied buckets that could match a given hash.","sig":null,"attributes":[{"value":"/ Iterator over occupied buckets that could match a given hash.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":73088,"byte_end":73153,"line_start":1784,"line_end":1784,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":73154,"byte_end":73157,"line_start":1785,"line_end":1785,"column_start":1,"column_end":4}},{"value":"/ In rare cases, the iterator may return a bucket with a different hash.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":73158,"byte_end":73232,"line_start":1786,"line_end":1786,"column_start":1,"column_end":75}}]},{"kind":"Enum","id":{"krate":0,"index":324},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":79453,"byte_end":79471,"line_start":17,"line_end":17,"column_start":10,"column_end":28},"name":"DefaultHashBuilder","qualname":"::map::DefaultHashBuilder","value":"DefaultHashBuilder::{}","parent":null,"children":[],"decl_id":null,"docs":" Dummy default hasher for `HashMap`.\n","sig":null,"attributes":[{"value":"/ Dummy default hasher for `HashMap`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":79373,"byte_end":79412,"line_start":15,"line_end":15,"column_start":1,"column_end":40}},{"value":"cfg(not(feature = \"ahash\"))","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":79413,"byte_end":79443,"line_start":16,"line_end":16,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":325},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":85742,"byte_end":85749,"line_start":188,"line_end":188,"column_start":12,"column_end":19},"name":"HashMap","qualname":"::map::HashMap","value":"HashMap {  }","parent":null,"children":[{"krate":0,"index":329},{"krate":0,"index":330}],"decl_id":null,"docs":" A hash map implemented with quadratic probing and SIMD lookup.","sig":null,"attributes":[{"value":"/ A hash map implemented with quadratic probing and SIMD lookup.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":79476,"byte_end":79542,"line_start":19,"line_end":19,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":79543,"byte_end":79546,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ The default hashing algorithm is currently [`AHash`], though this is","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":79547,"byte_end":79619,"line_start":21,"line_end":21,"column_start":1,"column_end":73}},{"value":"/ subject to change at any point in the future. This hash function is very","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":79620,"byte_end":79696,"line_start":22,"line_end":22,"column_start":1,"column_end":77}},{"value":"/ fast for all types of keys, but this algorithm will typically *not* protect","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":79697,"byte_end":79776,"line_start":23,"line_end":23,"column_start":1,"column_end":80}},{"value":"/ against attacks such as HashDoS.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":79777,"byte_end":79813,"line_start":24,"line_end":24,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":79814,"byte_end":79817,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ The hashing algorithm can be replaced on a per-`HashMap` basis using the","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":79818,"byte_end":79894,"line_start":26,"line_end":26,"column_start":1,"column_end":77}},{"value":"/ [`default`], [`with_hasher`], and [`with_capacity_and_hasher`] methods. Many","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":79895,"byte_end":79975,"line_start":27,"line_end":27,"column_start":1,"column_end":81}},{"value":"/ alternative algorithms are available on crates.io, such as the [`fnv`] crate.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":79976,"byte_end":80057,"line_start":28,"line_end":28,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":80058,"byte_end":80061,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ It is required that the keys implement the [`Eq`] and [`Hash`] traits, although","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":80062,"byte_end":80145,"line_start":30,"line_end":30,"column_start":1,"column_end":84}},{"value":"/ this can frequently be achieved by using `#[derive(PartialEq, Eq, Hash)]`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":80146,"byte_end":80224,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/ If you implement these yourself, it is important that the following","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":80225,"byte_end":80296,"line_start":32,"line_end":32,"column_start":1,"column_end":72}},{"value":"/ property holds:","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":80297,"byte_end":80316,"line_start":33,"line_end":33,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":80317,"byte_end":80320,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":80321,"byte_end":80332,"line_start":35,"line_end":35,"column_start":1,"column_end":12}},{"value":"/ k1 == k2 -> hash(k1) == hash(k2)","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":80333,"byte_end":80369,"line_start":36,"line_end":36,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":80370,"byte_end":80377,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":80378,"byte_end":80381,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ In other words, if two keys are equal, their hashes must be equal.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":80382,"byte_end":80452,"line_start":39,"line_end":39,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":80453,"byte_end":80456,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ It is a logic error for a key to be modified in such a way that the key's","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":80457,"byte_end":80534,"line_start":41,"line_end":41,"column_start":1,"column_end":78}},{"value":"/ hash, as determined by the [`Hash`] trait, or its equality, as determined by","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":80535,"byte_end":80615,"line_start":42,"line_end":42,"column_start":1,"column_end":81}},{"value":"/ the [`Eq`] trait, changes while it is in the map. This is normally only","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":80616,"byte_end":80691,"line_start":43,"line_end":43,"column_start":1,"column_end":76}},{"value":"/ possible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":80692,"byte_end":80770,"line_start":44,"line_end":44,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":80771,"byte_end":80774,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ It is also a logic error for the [`Hash`] implementation of a key to panic.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":80775,"byte_end":80854,"line_start":46,"line_end":46,"column_start":1,"column_end":80}},{"value":"/ This is generally only possible if the trait is implemented manually. If a","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":80855,"byte_end":80933,"line_start":47,"line_end":47,"column_start":1,"column_end":79}},{"value":"/ panic does occur then the contents of the `HashMap` may become corrupted and","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":80934,"byte_end":81014,"line_start":48,"line_end":48,"column_start":1,"column_end":81}},{"value":"/ some items may be dropped from the table.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":81015,"byte_end":81060,"line_start":49,"line_end":49,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":81061,"byte_end":81064,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":81065,"byte_end":81079,"line_start":51,"line_end":51,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":81080,"byte_end":81083,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":81084,"byte_end":81091,"line_start":53,"line_end":53,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":81092,"byte_end":81119,"line_start":54,"line_end":54,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":81120,"byte_end":81123,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ // Type inference lets us omit an explicit type signature (which","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":81124,"byte_end":81192,"line_start":56,"line_end":56,"column_start":1,"column_end":69}},{"value":"/ // would be `HashMap<String, String>` in this example).","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":81193,"byte_end":81252,"line_start":57,"line_end":57,"column_start":1,"column_end":60}},{"value":"/ let mut book_reviews = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":81253,"byte_end":81295,"line_start":58,"line_end":58,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":81296,"byte_end":81299,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ // Review some books.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":81300,"byte_end":81325,"line_start":60,"line_end":60,"column_start":1,"column_end":26}},{"value":"/ book_reviews.insert(","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":81326,"byte_end":81350,"line_start":61,"line_end":61,"column_start":1,"column_end":25}},{"value":"/     \"Adventures of Huckleberry Finn\".to_string(),","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":81351,"byte_end":81404,"line_start":62,"line_end":62,"column_start":1,"column_end":54}},{"value":"/     \"My favorite book.\".to_string(),","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":81405,"byte_end":81445,"line_start":63,"line_end":63,"column_start":1,"column_end":41}},{"value":"/ );","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":81446,"byte_end":81452,"line_start":64,"line_end":64,"column_start":1,"column_end":7}},{"value":"/ book_reviews.insert(","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":81453,"byte_end":81477,"line_start":65,"line_end":65,"column_start":1,"column_end":25}},{"value":"/     \"Grimms' Fairy Tales\".to_string(),","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":81478,"byte_end":81520,"line_start":66,"line_end":66,"column_start":1,"column_end":43}},{"value":"/     \"Masterpiece.\".to_string(),","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":81521,"byte_end":81556,"line_start":67,"line_end":67,"column_start":1,"column_end":36}},{"value":"/ );","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":81557,"byte_end":81563,"line_start":68,"line_end":68,"column_start":1,"column_end":7}},{"value":"/ book_reviews.insert(","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":81564,"byte_end":81588,"line_start":69,"line_end":69,"column_start":1,"column_end":25}},{"value":"/     \"Pride and Prejudice\".to_string(),","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":81589,"byte_end":81631,"line_start":70,"line_end":70,"column_start":1,"column_end":43}},{"value":"/     \"Very enjoyable.\".to_string(),","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":81632,"byte_end":81670,"line_start":71,"line_end":71,"column_start":1,"column_end":39}},{"value":"/ );","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":81671,"byte_end":81677,"line_start":72,"line_end":72,"column_start":1,"column_end":7}},{"value":"/ book_reviews.insert(","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":81678,"byte_end":81702,"line_start":73,"line_end":73,"column_start":1,"column_end":25}},{"value":"/     \"The Adventures of Sherlock Holmes\".to_string(),","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":81703,"byte_end":81759,"line_start":74,"line_end":74,"column_start":1,"column_end":57}},{"value":"/     \"Eye lyked it alot.\".to_string(),","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":81760,"byte_end":81801,"line_start":75,"line_end":75,"column_start":1,"column_end":42}},{"value":"/ );","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":81802,"byte_end":81808,"line_start":76,"line_end":76,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":81809,"byte_end":81812,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ // Check for a specific one.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":81813,"byte_end":81845,"line_start":78,"line_end":78,"column_start":1,"column_end":33}},{"value":"/ // When collections store owned values (String), they can still be","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":81846,"byte_end":81916,"line_start":79,"line_end":79,"column_start":1,"column_end":71}},{"value":"/ // queried using references (&str).","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":81917,"byte_end":81956,"line_start":80,"line_end":80,"column_start":1,"column_end":40}},{"value":"/ if !book_reviews.contains_key(\"Les Misérables\") {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":81957,"byte_end":82011,"line_start":81,"line_end":81,"column_start":1,"column_end":54}},{"value":"/     println!(\"We've got {} reviews, but Les Misérables ain't one.\",","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":82012,"byte_end":82084,"line_start":82,"line_end":82,"column_start":1,"column_end":72}},{"value":"/              book_reviews.len());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":82085,"byte_end":82122,"line_start":83,"line_end":83,"column_start":1,"column_end":38}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":82123,"byte_end":82128,"line_start":84,"line_end":84,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":82129,"byte_end":82132,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ // oops, this review has a lot of spelling mistakes, let's delete it.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":82133,"byte_end":82206,"line_start":86,"line_end":86,"column_start":1,"column_end":74}},{"value":"/ book_reviews.remove(\"The Adventures of Sherlock Holmes\");","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":82207,"byte_end":82268,"line_start":87,"line_end":87,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":82269,"byte_end":82272,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ // Look up the values associated with some keys.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":82273,"byte_end":82325,"line_start":89,"line_end":89,"column_start":1,"column_end":53}},{"value":"/ let to_find = [\"Pride and Prejudice\", \"Alice's Adventure in Wonderland\"];","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":82326,"byte_end":82403,"line_start":90,"line_end":90,"column_start":1,"column_end":78}},{"value":"/ for &book in &to_find {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":82404,"byte_end":82431,"line_start":91,"line_end":91,"column_start":1,"column_end":28}},{"value":"/     match book_reviews.get(book) {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":82432,"byte_end":82470,"line_start":92,"line_end":92,"column_start":1,"column_end":39}},{"value":"/         Some(review) => println!(\"{}: {}\", book, review),","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":82471,"byte_end":82532,"line_start":93,"line_end":93,"column_start":1,"column_end":62}},{"value":"/         None => println!(\"{} is unreviewed.\", book)","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":82533,"byte_end":82588,"line_start":94,"line_end":94,"column_start":1,"column_end":56}},{"value":"/     }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":82589,"byte_end":82598,"line_start":95,"line_end":95,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":82599,"byte_end":82604,"line_start":96,"line_end":96,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":82605,"byte_end":82608,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ // Look up the value for a key (will panic if the key is not found).","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":82609,"byte_end":82681,"line_start":98,"line_end":98,"column_start":1,"column_end":73}},{"value":"/ println!(\"Review for Jane: {}\", book_reviews[\"Pride and Prejudice\"]);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":82682,"byte_end":82755,"line_start":99,"line_end":99,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":82756,"byte_end":82759,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ // Iterate over everything.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":82760,"byte_end":82791,"line_start":101,"line_end":101,"column_start":1,"column_end":32}},{"value":"/ for (book, review) in &book_reviews {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":82792,"byte_end":82833,"line_start":102,"line_end":102,"column_start":1,"column_end":42}},{"value":"/     println!(\"{}: \\\"{}\\\"\", book, review);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":82834,"byte_end":82879,"line_start":103,"line_end":103,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":82880,"byte_end":82885,"line_start":104,"line_end":104,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":82886,"byte_end":82893,"line_start":105,"line_end":105,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":82894,"byte_end":82897,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ `HashMap` also implements an [`Entry API`](#method.entry), which allows","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":82898,"byte_end":82973,"line_start":107,"line_end":107,"column_start":1,"column_end":76}},{"value":"/ for more complex methods of getting, setting, updating and removing keys and","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":82974,"byte_end":83054,"line_start":108,"line_end":108,"column_start":1,"column_end":81}},{"value":"/ their values:","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":83055,"byte_end":83072,"line_start":109,"line_end":109,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":83073,"byte_end":83076,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":83077,"byte_end":83084,"line_start":111,"line_end":111,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":83085,"byte_end":83112,"line_start":112,"line_end":112,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":83113,"byte_end":83116,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ // type inference lets us omit an explicit type signature (which","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":83117,"byte_end":83185,"line_start":114,"line_end":114,"column_start":1,"column_end":69}},{"value":"/ // would be `HashMap<&str, u8>` in this example).","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":83186,"byte_end":83239,"line_start":115,"line_end":115,"column_start":1,"column_end":54}},{"value":"/ let mut player_stats = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":83240,"byte_end":83282,"line_start":116,"line_end":116,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":83283,"byte_end":83286,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ fn random_stat_buff() -> u8 {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":83287,"byte_end":83320,"line_start":118,"line_end":118,"column_start":1,"column_end":34}},{"value":"/     // could actually return some random value here - let's just return","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":83321,"byte_end":83396,"line_start":119,"line_end":119,"column_start":1,"column_end":76}},{"value":"/     // some fixed value for now","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":83397,"byte_end":83432,"line_start":120,"line_end":120,"column_start":1,"column_end":36}},{"value":"/     42","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":83433,"byte_end":83443,"line_start":121,"line_end":121,"column_start":1,"column_end":11}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":83444,"byte_end":83449,"line_start":122,"line_end":122,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":83450,"byte_end":83453,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ // insert a key only if it doesn't already exist","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":83454,"byte_end":83506,"line_start":124,"line_end":124,"column_start":1,"column_end":53}},{"value":"/ player_stats.entry(\"health\").or_insert(100);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":83507,"byte_end":83555,"line_start":125,"line_end":125,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":83556,"byte_end":83559,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ // insert a key using a function that provides a new value only if it","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":83560,"byte_end":83633,"line_start":127,"line_end":127,"column_start":1,"column_end":74}},{"value":"/ // doesn't already exist","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":83634,"byte_end":83662,"line_start":128,"line_end":128,"column_start":1,"column_end":29}},{"value":"/ player_stats.entry(\"defence\").or_insert_with(random_stat_buff);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":83663,"byte_end":83730,"line_start":129,"line_end":129,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":83731,"byte_end":83734,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ // update a key, guarding against the key possibly not being set","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":83735,"byte_end":83803,"line_start":131,"line_end":131,"column_start":1,"column_end":69}},{"value":"/ let stat = player_stats.entry(\"attack\").or_insert(100);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":83804,"byte_end":83863,"line_start":132,"line_end":132,"column_start":1,"column_end":60}},{"value":"/ *stat += random_stat_buff();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":83864,"byte_end":83896,"line_start":133,"line_end":133,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":83897,"byte_end":83904,"line_start":134,"line_end":134,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":83905,"byte_end":83908,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ The easiest way to use `HashMap` with a custom key type is to derive [`Eq`] and [`Hash`].","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":83909,"byte_end":84002,"line_start":136,"line_end":136,"column_start":1,"column_end":94}},{"value":"/ We must also derive [`PartialEq`].","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":84003,"byte_end":84041,"line_start":137,"line_end":137,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":84042,"byte_end":84045,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":84046,"byte_end":84105,"line_start":139,"line_end":139,"column_start":1,"column_end":60}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":84106,"byte_end":84170,"line_start":140,"line_end":140,"column_start":1,"column_end":65}},{"value":"/ [`PartialEq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":84171,"byte_end":84244,"line_start":141,"line_end":141,"column_start":1,"column_end":74}},{"value":"/ [`RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":84245,"byte_end":84316,"line_start":142,"line_end":142,"column_start":1,"column_end":72}},{"value":"/ [`Cell`]: https://doc.rust-lang.org/std/cell/struct.Cell.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":84317,"byte_end":84382,"line_start":143,"line_end":143,"column_start":1,"column_end":66}},{"value":"/ [`default`]: #method.default","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":84383,"byte_end":84415,"line_start":144,"line_end":144,"column_start":1,"column_end":33}},{"value":"/ [`with_hasher`]: #method.with_hasher","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":84416,"byte_end":84456,"line_start":145,"line_end":145,"column_start":1,"column_end":41}},{"value":"/ [`with_capacity_and_hasher`]: #method.with_capacity_and_hasher","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":84457,"byte_end":84523,"line_start":146,"line_end":146,"column_start":1,"column_end":67}},{"value":"/ [`fnv`]: https://crates.io/crates/fnv","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":84524,"byte_end":84565,"line_start":147,"line_end":147,"column_start":1,"column_end":42}},{"value":"/ [`AHash`]: https://crates.io/crates/ahash","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":84566,"byte_end":84611,"line_start":148,"line_end":148,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":84612,"byte_end":84615,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":84616,"byte_end":84623,"line_start":150,"line_end":150,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":84624,"byte_end":84651,"line_start":151,"line_end":151,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":84652,"byte_end":84655,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ #[derive(Hash, Eq, PartialEq, Debug)]","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":84656,"byte_end":84697,"line_start":153,"line_end":153,"column_start":1,"column_end":42}},{"value":"/ struct Viking {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":84698,"byte_end":84717,"line_start":154,"line_end":154,"column_start":1,"column_end":20}},{"value":"/     name: String,","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":84718,"byte_end":84739,"line_start":155,"line_end":155,"column_start":1,"column_end":22}},{"value":"/     country: String,","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":84740,"byte_end":84764,"line_start":156,"line_end":156,"column_start":1,"column_end":25}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":84765,"byte_end":84770,"line_start":157,"line_end":157,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":84771,"byte_end":84774,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ impl Viking {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":84775,"byte_end":84792,"line_start":159,"line_end":159,"column_start":1,"column_end":18}},{"value":"/     /// Creates a new Viking.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":84793,"byte_end":84826,"line_start":160,"line_end":160,"column_start":1,"column_end":34}},{"value":"/     fn new(name: &str, country: &str) -> Viking {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":84827,"byte_end":84880,"line_start":161,"line_end":161,"column_start":1,"column_end":54}},{"value":"/         Viking { name: name.to_string(), country: country.to_string() }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":84881,"byte_end":84956,"line_start":162,"line_end":162,"column_start":1,"column_end":76}},{"value":"/     }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":84957,"byte_end":84966,"line_start":163,"line_end":163,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":84967,"byte_end":84972,"line_start":164,"line_end":164,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":84973,"byte_end":84976,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ // Use a HashMap to store the vikings' health points.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":84977,"byte_end":85034,"line_start":166,"line_end":166,"column_start":1,"column_end":58}},{"value":"/ let mut vikings = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":85035,"byte_end":85072,"line_start":167,"line_end":167,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":85073,"byte_end":85076,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ vikings.insert(Viking::new(\"Einar\", \"Norway\"), 25);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":85077,"byte_end":85132,"line_start":169,"line_end":169,"column_start":1,"column_end":56}},{"value":"/ vikings.insert(Viking::new(\"Olaf\", \"Denmark\"), 24);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":85133,"byte_end":85188,"line_start":170,"line_end":170,"column_start":1,"column_end":56}},{"value":"/ vikings.insert(Viking::new(\"Harald\", \"Iceland\"), 12);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":85189,"byte_end":85246,"line_start":171,"line_end":171,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":85247,"byte_end":85250,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ // Use derived implementation to print the status of the vikings.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":85251,"byte_end":85320,"line_start":173,"line_end":173,"column_start":1,"column_end":70}},{"value":"/ for (viking, health) in &vikings {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":85321,"byte_end":85359,"line_start":174,"line_end":174,"column_start":1,"column_end":39}},{"value":"/     println!(\"{:?} has {} hp\", viking, health);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":85360,"byte_end":85411,"line_start":175,"line_end":175,"column_start":1,"column_end":52}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":85412,"byte_end":85417,"line_start":176,"line_end":176,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":85418,"byte_end":85425,"line_start":177,"line_end":177,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":85426,"byte_end":85429,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ A `HashMap` with fixed list of elements can be initialized from an array:","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":85430,"byte_end":85507,"line_start":179,"line_end":179,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":85508,"byte_end":85511,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":85512,"byte_end":85519,"line_start":181,"line_end":181,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":85520,"byte_end":85547,"line_start":182,"line_end":182,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":85548,"byte_end":85551,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ let timber_resources: HashMap<&str, i32> = [(\"Norway\", 100), (\"Denmark\", 50), (\"Iceland\", 10)]","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":85552,"byte_end":85650,"line_start":184,"line_end":184,"column_start":1,"column_end":99}},{"value":"/     .iter().cloned().collect();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":85651,"byte_end":85686,"line_start":185,"line_end":185,"column_start":1,"column_end":36}},{"value":"/ // use the values stored in map","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":85687,"byte_end":85722,"line_start":186,"line_end":186,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":85723,"byte_end":85730,"line_start":187,"line_end":187,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":88667,"byte_end":88678,"line_start":278,"line_end":278,"column_start":12,"column_end":23},"name":"with_hasher","qualname":"<HashMap<K, V, S>>::with_hasher","value":"fn (hash_builder: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` which will use the given hash builder to hash\n keys.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap` which will use the given hash builder to hash","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":87666,"byte_end":87742,"line_start":252,"line_end":252,"column_start":5,"column_end":81}},{"value":"/ keys.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":87747,"byte_end":87756,"line_start":253,"line_end":253,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":87761,"byte_end":87764,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ The created map has the default initial capacity.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":87769,"byte_end":87822,"line_start":255,"line_end":255,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":87827,"byte_end":87830,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ Warning: `hash_builder` is normally randomly generated, and","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":87835,"byte_end":87898,"line_start":257,"line_end":257,"column_start":5,"column_end":68}},{"value":"/ is designed to allow HashMaps to be resistant to attacks that","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":87903,"byte_end":87968,"line_start":258,"line_end":258,"column_start":5,"column_end":70}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":87973,"byte_end":88036,"line_start":259,"line_end":259,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":88041,"byte_end":88105,"line_start":260,"line_end":260,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":88110,"byte_end":88113,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ The `hash_builder` passed should implement the [`BuildHasher`] trait for","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":88118,"byte_end":88194,"line_start":262,"line_end":262,"column_start":5,"column_end":81}},{"value":"/ the HashMap to be useful, see its documentation for details.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":88199,"byte_end":88263,"line_start":263,"line_end":263,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":88268,"byte_end":88271,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":88276,"byte_end":88290,"line_start":265,"line_end":265,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":88295,"byte_end":88298,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":88303,"byte_end":88310,"line_start":267,"line_end":267,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":88315,"byte_end":88342,"line_start":268,"line_end":268,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":88347,"byte_end":88395,"line_start":269,"line_end":269,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":88400,"byte_end":88403,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":88408,"byte_end":88450,"line_start":271,"line_end":271,"column_start":5,"column_end":47}},{"value":"/ let mut map = HashMap::with_hasher(s);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":88455,"byte_end":88497,"line_start":272,"line_end":272,"column_start":5,"column_end":47}},{"value":"/ map.insert(1, 2);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":88502,"byte_end":88523,"line_start":273,"line_end":273,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":88528,"byte_end":88535,"line_start":274,"line_end":274,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":88540,"byte_end":88543,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":88548,"byte_end":88606,"line_start":276,"line_end":276,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":89933,"byte_end":89957,"line_start":312,"line_end":312,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<HashMap<K, V, S>>::with_capacity_and_hasher","value":"fn (capacity: usize, hash_builder: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` with the specified capacity, using `hash_builder`\n to hash the keys.","sig":null,"attributes":[{"value":"/ Creates an empty `HashMap` with the specified capacity, using `hash_builder`","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":88804,"byte_end":88884,"line_start":285,"line_end":285,"column_start":5,"column_end":85}},{"value":"/ to hash the keys.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":88889,"byte_end":88910,"line_start":286,"line_end":286,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":88915,"byte_end":88918,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ The hash map will be able to hold at least `capacity` elements without","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":88923,"byte_end":88997,"line_start":288,"line_end":288,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash map will not allocate.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":89002,"byte_end":89071,"line_start":289,"line_end":289,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":89076,"byte_end":89079,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ Warning: `hash_builder` is normally randomly generated, and","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":89084,"byte_end":89147,"line_start":291,"line_end":291,"column_start":5,"column_end":68}},{"value":"/ is designed to allow HashMaps to be resistant to attacks that","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":89152,"byte_end":89217,"line_start":292,"line_end":292,"column_start":5,"column_end":70}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":89222,"byte_end":89285,"line_start":293,"line_end":293,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":89290,"byte_end":89354,"line_start":294,"line_end":294,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":89359,"byte_end":89362,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ The `hash_builder` passed should implement the [`BuildHasher`] trait for","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":89367,"byte_end":89443,"line_start":296,"line_end":296,"column_start":5,"column_end":81}},{"value":"/ the HashMap to be useful, see its documentation for details.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":89448,"byte_end":89512,"line_start":297,"line_end":297,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":89517,"byte_end":89520,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":89525,"byte_end":89539,"line_start":299,"line_end":299,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":89544,"byte_end":89547,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":89552,"byte_end":89559,"line_start":301,"line_end":301,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":89564,"byte_end":89591,"line_start":302,"line_end":302,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":89596,"byte_end":89644,"line_start":303,"line_end":303,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":89649,"byte_end":89652,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":89657,"byte_end":89699,"line_start":305,"line_end":305,"column_start":5,"column_end":47}},{"value":"/ let mut map = HashMap::with_capacity_and_hasher(10, s);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":89704,"byte_end":89763,"line_start":306,"line_end":306,"column_start":5,"column_end":64}},{"value":"/ map.insert(1, 2);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":89768,"byte_end":89789,"line_start":307,"line_end":307,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":89794,"byte_end":89801,"line_start":308,"line_end":308,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":89806,"byte_end":89809,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":89814,"byte_end":89872,"line_start":310,"line_end":310,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":90650,"byte_end":90656,"line_start":334,"line_end":334,"column_start":12,"column_end":18},"name":"hasher","qualname":"<HashMap<K, V, S>>::hasher","value":"fn (&self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the map's [`BuildHasher`].","sig":null,"attributes":[{"value":"/ Returns a reference to the map's [`BuildHasher`].","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":90118,"byte_end":90171,"line_start":319,"line_end":319,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":90176,"byte_end":90179,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":90184,"byte_end":90262,"line_start":321,"line_end":321,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":90267,"byte_end":90270,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":90275,"byte_end":90289,"line_start":323,"line_end":323,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":90294,"byte_end":90297,"line_start":324,"line_end":324,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":90302,"byte_end":90309,"line_start":325,"line_end":325,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":90314,"byte_end":90341,"line_start":326,"line_end":326,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":90346,"byte_end":90394,"line_start":327,"line_end":327,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":90399,"byte_end":90402,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ let hasher = DefaultHashBuilder::default();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":90407,"byte_end":90454,"line_start":329,"line_end":329,"column_start":5,"column_end":52}},{"value":"/ let map: HashMap<i32, i32> = HashMap::with_hasher(hasher);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":90459,"byte_end":90521,"line_start":330,"line_end":330,"column_start":5,"column_end":67}},{"value":"/ let hasher: &DefaultHashBuilder = map.hasher();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":90526,"byte_end":90577,"line_start":331,"line_end":331,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":90582,"byte_end":90589,"line_start":332,"line_end":332,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":347},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":91200,"byte_end":91208,"line_start":351,"line_end":351,"column_start":12,"column_end":20},"name":"capacity","qualname":"<HashMap<K, V, S>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the map can hold without reallocating.","sig":null,"attributes":[{"value":"/ Returns the number of elements the map can hold without reallocating.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":90710,"byte_end":90783,"line_start":338,"line_end":338,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":90788,"byte_end":90791,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ This number is a lower bound; the `HashMap<K, V>` might be able to hold","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":90796,"byte_end":90871,"line_start":340,"line_end":340,"column_start":5,"column_end":80}},{"value":"/ more, but is guaranteed to be able to hold at least this many.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":90876,"byte_end":90942,"line_start":341,"line_end":341,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":90947,"byte_end":90950,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":90955,"byte_end":90969,"line_start":343,"line_end":343,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":90974,"byte_end":90977,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":90982,"byte_end":90989,"line_start":345,"line_end":345,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":90994,"byte_end":91021,"line_start":346,"line_end":346,"column_start":5,"column_end":32}},{"value":"/ let map: HashMap<i32, i32> = HashMap::with_capacity(100);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":91026,"byte_end":91087,"line_start":347,"line_end":347,"column_start":5,"column_end":66}},{"value":"/ assert!(map.capacity() >= 100);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":91092,"byte_end":91127,"line_start":348,"line_end":348,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":91132,"byte_end":91139,"line_start":349,"line_end":349,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":91732,"byte_end":91736,"line_start":373,"line_end":373,"column_start":12,"column_end":16},"name":"keys","qualname":"<HashMap<K, V, S>>::keys","value":"fn (&self) -> Keys<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all keys in arbitrary order.\n The iterator element type is `&'a K`.","sig":null,"attributes":[{"value":"/ An iterator visiting all keys in arbitrary order.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":91268,"byte_end":91321,"line_start":355,"line_end":355,"column_start":5,"column_end":58}},{"value":"/ The iterator element type is `&'a K`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":91326,"byte_end":91367,"line_start":356,"line_end":356,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":91372,"byte_end":91375,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":91380,"byte_end":91394,"line_start":358,"line_end":358,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":91399,"byte_end":91402,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":91407,"byte_end":91414,"line_start":360,"line_end":360,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":91419,"byte_end":91446,"line_start":361,"line_end":361,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":91451,"byte_end":91454,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":91459,"byte_end":91492,"line_start":363,"line_end":363,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":91497,"byte_end":91520,"line_start":364,"line_end":364,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":91525,"byte_end":91548,"line_start":365,"line_end":365,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":91553,"byte_end":91576,"line_start":366,"line_end":366,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":91581,"byte_end":91584,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ for key in map.keys() {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":91589,"byte_end":91616,"line_start":368,"line_end":368,"column_start":5,"column_end":32}},{"value":"/     println!(\"{}\", key);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":91621,"byte_end":91649,"line_start":369,"line_end":369,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":91654,"byte_end":91659,"line_start":370,"line_end":370,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":91664,"byte_end":91671,"line_start":371,"line_end":371,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":349},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":92279,"byte_end":92285,"line_start":395,"line_end":395,"column_start":12,"column_end":18},"name":"values","qualname":"<HashMap<K, V, S>>::values","value":"fn (&self) -> Values<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all values in arbitrary order.\n The iterator element type is `&'a V`.","sig":null,"attributes":[{"value":"/ An iterator visiting all values in arbitrary order.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":91811,"byte_end":91866,"line_start":377,"line_end":377,"column_start":5,"column_end":60}},{"value":"/ The iterator element type is `&'a V`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":91871,"byte_end":91912,"line_start":378,"line_end":378,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":91917,"byte_end":91920,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":91925,"byte_end":91939,"line_start":380,"line_end":380,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":91944,"byte_end":91947,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":91952,"byte_end":91959,"line_start":382,"line_end":382,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":91964,"byte_end":91991,"line_start":383,"line_end":383,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":91996,"byte_end":91999,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":92004,"byte_end":92037,"line_start":385,"line_end":385,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":92042,"byte_end":92065,"line_start":386,"line_end":386,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":92070,"byte_end":92093,"line_start":387,"line_end":387,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":92098,"byte_end":92121,"line_start":388,"line_end":388,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":92126,"byte_end":92129,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ for val in map.values() {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":92134,"byte_end":92163,"line_start":390,"line_end":390,"column_start":5,"column_end":34}},{"value":"/     println!(\"{}\", val);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":92168,"byte_end":92196,"line_start":391,"line_end":391,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":92201,"byte_end":92206,"line_start":392,"line_end":392,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":92211,"byte_end":92218,"line_start":393,"line_end":393,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":92938,"byte_end":92948,"line_start":422,"line_end":422,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<HashMap<K, V, S>>::values_mut","value":"fn (&mut self) -> ValuesMut<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all values mutably in arbitrary order.\n The iterator element type is `&'a mut V`.","sig":null,"attributes":[{"value":"/ An iterator visiting all values mutably in arbitrary order.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":92364,"byte_end":92427,"line_start":399,"line_end":399,"column_start":5,"column_end":68}},{"value":"/ The iterator element type is `&'a mut V`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":92432,"byte_end":92477,"line_start":400,"line_end":400,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":92482,"byte_end":92485,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":92490,"byte_end":92504,"line_start":402,"line_end":402,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":92509,"byte_end":92512,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":92517,"byte_end":92524,"line_start":404,"line_end":404,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":92529,"byte_end":92556,"line_start":405,"line_end":405,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":92561,"byte_end":92564,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":92569,"byte_end":92602,"line_start":407,"line_end":407,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":92607,"byte_end":92610,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":92615,"byte_end":92638,"line_start":409,"line_end":409,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":92643,"byte_end":92666,"line_start":410,"line_end":410,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":92671,"byte_end":92694,"line_start":411,"line_end":411,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":92699,"byte_end":92702,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ for val in map.values_mut() {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":92707,"byte_end":92740,"line_start":413,"line_end":413,"column_start":5,"column_end":38}},{"value":"/     *val = *val + 10;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":92745,"byte_end":92770,"line_start":414,"line_end":414,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":92775,"byte_end":92780,"line_start":415,"line_end":415,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":92785,"byte_end":92788,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ for val in map.values() {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":92793,"byte_end":92822,"line_start":417,"line_end":417,"column_start":5,"column_end":34}},{"value":"/     println!(\"{}\", val);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":92827,"byte_end":92855,"line_start":418,"line_end":418,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":92860,"byte_end":92865,"line_start":419,"line_end":419,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":92870,"byte_end":92877,"line_start":420,"line_end":420,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":351},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":93571,"byte_end":93575,"line_start":446,"line_end":446,"column_start":12,"column_end":16},"name":"iter","qualname":"<HashMap<K, V, S>>::iter","value":"fn (&self) -> Iter<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order.\n The iterator element type is `(&'a K, &'a V)`.","sig":null,"attributes":[{"value":"/ An iterator visiting all key-value pairs in arbitrary order.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":93062,"byte_end":93126,"line_start":428,"line_end":428,"column_start":5,"column_end":69}},{"value":"/ The iterator element type is `(&'a K, &'a V)`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":93131,"byte_end":93181,"line_start":429,"line_end":429,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":93186,"byte_end":93189,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":93194,"byte_end":93208,"line_start":431,"line_end":431,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":93213,"byte_end":93216,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":93221,"byte_end":93228,"line_start":433,"line_end":433,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":93233,"byte_end":93260,"line_start":434,"line_end":434,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":93265,"byte_end":93268,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":93273,"byte_end":93306,"line_start":436,"line_end":436,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":93311,"byte_end":93334,"line_start":437,"line_end":437,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":93339,"byte_end":93362,"line_start":438,"line_end":438,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":93367,"byte_end":93390,"line_start":439,"line_end":439,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":93395,"byte_end":93398,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ for (key, val) in map.iter() {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":93403,"byte_end":93437,"line_start":441,"line_end":441,"column_start":5,"column_end":39}},{"value":"/     println!(\"key: {} val: {}\", key, val);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":93442,"byte_end":93488,"line_start":442,"line_end":442,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":93493,"byte_end":93498,"line_start":443,"line_end":443,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":93503,"byte_end":93510,"line_start":444,"line_end":444,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":94475,"byte_end":94483,"line_start":480,"line_end":480,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<HashMap<K, V, S>>::iter_mut","value":"fn (&mut self) -> IterMut<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order,\n with mutable references to the values.\n The iterator element type is `(&'a K, &'a mut V)`.","sig":null,"attributes":[{"value":"/ An iterator visiting all key-value pairs in arbitrary order,","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":93810,"byte_end":93874,"line_start":456,"line_end":456,"column_start":5,"column_end":69}},{"value":"/ with mutable references to the values.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":93879,"byte_end":93921,"line_start":457,"line_end":457,"column_start":5,"column_end":47}},{"value":"/ The iterator element type is `(&'a K, &'a mut V)`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":93926,"byte_end":93980,"line_start":458,"line_end":458,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":93985,"byte_end":93988,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":93993,"byte_end":94007,"line_start":460,"line_end":460,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":94012,"byte_end":94015,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":94020,"byte_end":94027,"line_start":462,"line_end":462,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":94032,"byte_end":94059,"line_start":463,"line_end":463,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":94064,"byte_end":94067,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":94072,"byte_end":94105,"line_start":465,"line_end":465,"column_start":5,"column_end":38}},{"value":"/ map.insert(\"a\", 1);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":94110,"byte_end":94133,"line_start":466,"line_end":466,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"b\", 2);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":94138,"byte_end":94161,"line_start":467,"line_end":467,"column_start":5,"column_end":28}},{"value":"/ map.insert(\"c\", 3);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":94166,"byte_end":94189,"line_start":468,"line_end":468,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":94194,"byte_end":94197,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ // Update all values","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":94202,"byte_end":94226,"line_start":470,"line_end":470,"column_start":5,"column_end":29}},{"value":"/ for (_, val) in map.iter_mut() {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":94231,"byte_end":94267,"line_start":471,"line_end":471,"column_start":5,"column_end":41}},{"value":"/     *val *= 2;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":94272,"byte_end":94290,"line_start":472,"line_end":472,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":94295,"byte_end":94300,"line_start":473,"line_end":473,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":94305,"byte_end":94308,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ for (key, val) in &map {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":94313,"byte_end":94341,"line_start":475,"line_end":475,"column_start":5,"column_end":33}},{"value":"/     println!(\"key: {} val: {}\", key, val);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":94346,"byte_end":94392,"line_start":476,"line_end":476,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":94397,"byte_end":94402,"line_start":477,"line_end":477,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":94407,"byte_end":94414,"line_start":478,"line_end":478,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":353},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":95200,"byte_end":95203,"line_start":509,"line_end":509,"column_start":12,"column_end":15},"name":"len","qualname":"<HashMap<K, V, S>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the map.","sig":null,"attributes":[{"value":"/ Returns the number of elements in the map.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":94868,"byte_end":94914,"line_start":496,"line_end":496,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":94919,"byte_end":94922,"line_start":497,"line_end":497,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":94927,"byte_end":94941,"line_start":498,"line_end":498,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":94946,"byte_end":94949,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":94954,"byte_end":94961,"line_start":500,"line_end":500,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":94966,"byte_end":94993,"line_start":501,"line_end":501,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":94998,"byte_end":95001,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":95006,"byte_end":95037,"line_start":503,"line_end":503,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(a.len(), 0);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":95042,"byte_end":95069,"line_start":504,"line_end":504,"column_start":5,"column_end":32}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":95074,"byte_end":95095,"line_start":505,"line_end":505,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(a.len(), 1);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":95100,"byte_end":95127,"line_start":506,"line_end":506,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":95132,"byte_end":95139,"line_start":507,"line_end":507,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":354},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":95594,"byte_end":95602,"line_start":526,"line_end":526,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<HashMap<K, V, S>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the map contains no elements.","sig":null,"attributes":[{"value":"/ Returns `true` if the map contains no elements.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":95258,"byte_end":95309,"line_start":513,"line_end":513,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":95314,"byte_end":95317,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":95322,"byte_end":95336,"line_start":515,"line_end":515,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":95341,"byte_end":95344,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":95349,"byte_end":95356,"line_start":517,"line_end":517,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":95361,"byte_end":95388,"line_start":518,"line_end":518,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":95393,"byte_end":95396,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":95401,"byte_end":95432,"line_start":520,"line_end":520,"column_start":5,"column_end":36}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":95437,"byte_end":95463,"line_start":521,"line_end":521,"column_start":5,"column_end":31}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":95468,"byte_end":95489,"line_start":522,"line_end":522,"column_start":5,"column_end":26}},{"value":"/ assert!(!a.is_empty());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":95494,"byte_end":95521,"line_start":523,"line_end":523,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":95526,"byte_end":95533,"line_start":524,"line_end":524,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":355},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":96195,"byte_end":96200,"line_start":550,"line_end":550,"column_start":12,"column_end":17},"name":"drain","qualname":"<HashMap<K, V, S>>::drain","value":"fn (&mut self) -> Drain<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Clears the map, returning all key-value pairs as an iterator. Keeps the\n allocated memory for reuse.","sig":null,"attributes":[{"value":"/ Clears the map, returning all key-value pairs as an iterator. Keeps the","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":95655,"byte_end":95730,"line_start":530,"line_end":530,"column_start":5,"column_end":80}},{"value":"/ allocated memory for reuse.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":95735,"byte_end":95766,"line_start":531,"line_end":531,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":95771,"byte_end":95774,"line_start":532,"line_end":532,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":95779,"byte_end":95793,"line_start":533,"line_end":533,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":95798,"byte_end":95801,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":95806,"byte_end":95813,"line_start":535,"line_end":535,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":95818,"byte_end":95845,"line_start":536,"line_end":536,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":95850,"byte_end":95853,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":95858,"byte_end":95889,"line_start":538,"line_end":538,"column_start":5,"column_end":36}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":95894,"byte_end":95915,"line_start":539,"line_end":539,"column_start":5,"column_end":26}},{"value":"/ a.insert(2, \"b\");","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":95920,"byte_end":95941,"line_start":540,"line_end":540,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":95946,"byte_end":95949,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ for (k, v) in a.drain().take(1) {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":95954,"byte_end":95991,"line_start":542,"line_end":542,"column_start":5,"column_end":42}},{"value":"/     assert!(k == 1 || k == 2);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":95996,"byte_end":96030,"line_start":543,"line_end":543,"column_start":5,"column_end":39}},{"value":"/     assert!(v == \"a\" || v == \"b\");","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":96035,"byte_end":96073,"line_start":544,"line_end":544,"column_start":5,"column_end":43}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":96078,"byte_end":96083,"line_start":545,"line_end":545,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":96088,"byte_end":96091,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":96096,"byte_end":96122,"line_start":547,"line_end":547,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":96127,"byte_end":96134,"line_start":548,"line_end":548,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":356},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":96824,"byte_end":96830,"line_start":572,"line_end":572,"column_start":12,"column_end":18},"name":"retain","qualname":"<HashMap<K, V, S>>::retain","value":"fn <F> (&mut self, mut f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Retains only the elements specified by the predicate.","sig":null,"attributes":[{"value":"/ Retains only the elements specified by the predicate.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":96405,"byte_end":96462,"line_start":559,"line_end":559,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":96467,"byte_end":96470,"line_start":560,"line_end":560,"column_start":5,"column_end":8}},{"value":"/ In other words, remove all pairs `(k, v)` such that `f(&k,&mut v)` returns `false`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":96475,"byte_end":96562,"line_start":561,"line_end":561,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":96567,"byte_end":96570,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":96575,"byte_end":96589,"line_start":563,"line_end":563,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":96594,"byte_end":96597,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":96602,"byte_end":96609,"line_start":565,"line_end":565,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":96614,"byte_end":96641,"line_start":566,"line_end":566,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":96646,"byte_end":96649,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<i32, i32> = (0..8).map(|x|(x, x*10)).collect();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":96654,"byte_end":96726,"line_start":568,"line_end":568,"column_start":5,"column_end":77}},{"value":"/ map.retain(|&k, _| k % 2 == 0);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":96731,"byte_end":96766,"line_start":569,"line_end":569,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(map.len(), 4);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":96771,"byte_end":96800,"line_start":570,"line_end":570,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":96805,"byte_end":96812,"line_start":571,"line_end":571,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":358},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":98010,"byte_end":98022,"line_start":607,"line_end":607,"column_start":12,"column_end":24},"name":"drain_filter","qualname":"<HashMap<K, V, S>>::drain_filter","value":"fn <F> (&mut self, f: F) -> DrainFilter<'_, K, V, F>","parent":null,"children":[],"decl_id":null,"docs":" Drains elements which are false under the given predicate,\n and returns an iterator over the removed items.","sig":null,"attributes":[{"value":"/ Drains elements which are false under the given predicate,","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":97247,"byte_end":97309,"line_start":587,"line_end":587,"column_start":5,"column_end":67}},{"value":"/ and returns an iterator over the removed items.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":97314,"byte_end":97365,"line_start":588,"line_end":588,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":97370,"byte_end":97373,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ In other words, move all pairs `(k, v)` such that `f(&k,&mut v)` returns `false` out","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":97378,"byte_end":97466,"line_start":590,"line_end":590,"column_start":5,"column_end":93}},{"value":"/ into another iterator.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":97471,"byte_end":97497,"line_start":591,"line_end":591,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":97502,"byte_end":97505,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ When the returned DrainedFilter is dropped, the elements that don't satisfy","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":97510,"byte_end":97589,"line_start":593,"line_end":593,"column_start":5,"column_end":84}},{"value":"/ the predicate are dropped from the table.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":97594,"byte_end":97639,"line_start":594,"line_end":594,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":97644,"byte_end":97647,"line_start":595,"line_end":595,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":97652,"byte_end":97666,"line_start":596,"line_end":596,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":97671,"byte_end":97674,"line_start":597,"line_end":597,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":97679,"byte_end":97686,"line_start":598,"line_end":598,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":97691,"byte_end":97718,"line_start":599,"line_end":599,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":97723,"byte_end":97726,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<i32, i32> = (0..8).map(|x|(x, x*10)).collect();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":97731,"byte_end":97803,"line_start":601,"line_end":601,"column_start":5,"column_end":77}},{"value":"/ let drained = map.drain_filter(|&k, _| k % 2 == 0);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":97808,"byte_end":97863,"line_start":602,"line_end":602,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(drained.count(), 4);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":97868,"byte_end":97903,"line_start":603,"line_end":603,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(map.len(), 4);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":97908,"byte_end":97937,"line_start":604,"line_end":604,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":97942,"byte_end":97949,"line_start":605,"line_end":605,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":98695,"byte_end":98700,"line_start":634,"line_end":634,"column_start":12,"column_end":17},"name":"clear","qualname":"<HashMap<K, V, S>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears the map, removing all key-value pairs. Keeps the allocated memory\n for reuse.","sig":null,"attributes":[{"value":"/ Clears the map, removing all key-value pairs. Keeps the allocated memory","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":98328,"byte_end":98404,"line_start":620,"line_end":620,"column_start":5,"column_end":81}},{"value":"/ for reuse.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":98409,"byte_end":98423,"line_start":621,"line_end":621,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":98428,"byte_end":98431,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":98436,"byte_end":98450,"line_start":623,"line_end":623,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":98455,"byte_end":98458,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":98463,"byte_end":98470,"line_start":625,"line_end":625,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":98475,"byte_end":98502,"line_start":626,"line_end":626,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":98507,"byte_end":98510,"line_start":627,"line_end":627,"column_start":5,"column_end":8}},{"value":"/ let mut a = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":98515,"byte_end":98546,"line_start":628,"line_end":628,"column_start":5,"column_end":36}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":98551,"byte_end":98572,"line_start":629,"line_end":629,"column_start":5,"column_end":26}},{"value":"/ a.clear();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":98577,"byte_end":98591,"line_start":630,"line_end":630,"column_start":5,"column_end":19}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":98596,"byte_end":98622,"line_start":631,"line_end":631,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":98627,"byte_end":98634,"line_start":632,"line_end":632,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":365},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":99422,"byte_end":99429,"line_start":662,"line_end":662,"column_start":12,"column_end":19},"name":"reserve","qualname":"<HashMap<K, V, S>>::reserve","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more elements to be inserted\n in the `HashMap`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more elements to be inserted","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":98832,"byte_end":98908,"line_start":644,"line_end":644,"column_start":5,"column_end":81}},{"value":"/ in the `HashMap`. The collection may reserve more space to avoid","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":98913,"byte_end":98981,"line_start":645,"line_end":645,"column_start":5,"column_end":73}},{"value":"/ frequent reallocations.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":98986,"byte_end":99013,"line_start":646,"line_end":646,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":99018,"byte_end":99021,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":99026,"byte_end":99038,"line_start":648,"line_end":648,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":99043,"byte_end":99046,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/ Panics if the new allocation size overflows [`usize`].","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":99051,"byte_end":99109,"line_start":650,"line_end":650,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":99114,"byte_end":99117,"line_start":651,"line_end":651,"column_start":5,"column_end":8}},{"value":"/ [`usize`]: https://doc.rust-lang.org/std/primitive.usize.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":99122,"byte_end":99187,"line_start":652,"line_end":652,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":99192,"byte_end":99195,"line_start":653,"line_end":653,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":99200,"byte_end":99214,"line_start":654,"line_end":654,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":99219,"byte_end":99222,"line_start":655,"line_end":655,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":99227,"byte_end":99234,"line_start":656,"line_end":656,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":99239,"byte_end":99266,"line_start":657,"line_end":657,"column_start":5,"column_end":32}},{"value":"/ let mut map: HashMap<&str, i32> = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":99271,"byte_end":99324,"line_start":658,"line_end":658,"column_start":5,"column_end":58}},{"value":"/ map.reserve(10);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":99329,"byte_end":99349,"line_start":659,"line_end":659,"column_start":5,"column_end":25}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":99354,"byte_end":99361,"line_start":660,"line_end":660,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":367},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":100242,"byte_end":100253,"line_start":685,"line_end":685,"column_start":12,"column_end":23},"name":"try_reserve","qualname":"<HashMap<K, V, S>>::try_reserve","value":"fn (&mut self, additional: usize) -> Result<(), TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to reserve capacity for at least `additional` more elements to be inserted\n in the given `HashMap<K,V>`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Tries to reserve capacity for at least `additional` more elements to be inserted","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":99608,"byte_end":99692,"line_start":668,"line_end":668,"column_start":5,"column_end":89}},{"value":"/ in the given `HashMap<K,V>`. The collection may reserve more space to avoid","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":99697,"byte_end":99776,"line_start":669,"line_end":669,"column_start":5,"column_end":84}},{"value":"/ frequent reallocations.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":99781,"byte_end":99808,"line_start":670,"line_end":670,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":99813,"byte_end":99816,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":99821,"byte_end":99833,"line_start":672,"line_end":672,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":99838,"byte_end":99841,"line_start":673,"line_end":673,"column_start":5,"column_end":8}},{"value":"/ If the capacity overflows, or the allocator reports a failure, then an error","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":99846,"byte_end":99926,"line_start":674,"line_end":674,"column_start":5,"column_end":85}},{"value":"/ is returned.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":99931,"byte_end":99947,"line_start":675,"line_end":675,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":99952,"byte_end":99955,"line_start":676,"line_end":676,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":99960,"byte_end":99974,"line_start":677,"line_end":677,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":99979,"byte_end":99982,"line_start":678,"line_end":678,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":99987,"byte_end":99994,"line_start":679,"line_end":679,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":99999,"byte_end":100026,"line_start":680,"line_end":680,"column_start":5,"column_end":32}},{"value":"/ let mut map: HashMap<&str, isize> = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":100031,"byte_end":100086,"line_start":681,"line_end":681,"column_start":5,"column_end":60}},{"value":"/ map.try_reserve(10).expect(\"why is the test harness OOMing on 10 bytes?\");","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":100091,"byte_end":100169,"line_start":682,"line_end":682,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":100174,"byte_end":100181,"line_start":683,"line_end":683,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":369},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":101072,"byte_end":101085,"line_start":708,"line_end":708,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<HashMap<K, V, S>>::shrink_to_fit","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the map as much as possible. It will drop\n down as much as possible while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the map as much as possible. It will drop","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":100466,"byte_end":100535,"line_start":691,"line_end":691,"column_start":5,"column_end":74}},{"value":"/ down as much as possible while maintaining the internal rules","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":100540,"byte_end":100605,"line_start":692,"line_end":692,"column_start":5,"column_end":70}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":100610,"byte_end":100683,"line_start":693,"line_end":693,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":100688,"byte_end":100691,"line_start":694,"line_end":694,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":100696,"byte_end":100710,"line_start":695,"line_end":695,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":100715,"byte_end":100718,"line_start":696,"line_end":696,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":100723,"byte_end":100730,"line_start":697,"line_end":697,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":100735,"byte_end":100762,"line_start":698,"line_end":698,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":100767,"byte_end":100770,"line_start":699,"line_end":699,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<i32, i32> = HashMap::with_capacity(100);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":100775,"byte_end":100840,"line_start":700,"line_end":700,"column_start":5,"column_end":70}},{"value":"/ map.insert(1, 2);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":100845,"byte_end":100866,"line_start":701,"line_end":701,"column_start":5,"column_end":26}},{"value":"/ map.insert(3, 4);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":100871,"byte_end":100892,"line_start":702,"line_end":702,"column_start":5,"column_end":26}},{"value":"/ assert!(map.capacity() >= 100);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":100897,"byte_end":100932,"line_start":703,"line_end":703,"column_start":5,"column_end":40}},{"value":"/ map.shrink_to_fit();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":100937,"byte_end":100961,"line_start":704,"line_end":704,"column_start":5,"column_end":29}},{"value":"/ assert!(map.capacity() >= 2);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":100966,"byte_end":100999,"line_start":705,"line_end":705,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":101004,"byte_end":101011,"line_start":706,"line_end":706,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":102093,"byte_end":102102,"line_start":737,"line_end":737,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<HashMap<K, V, S>>::shrink_to","value":"fn (&mut self, min_capacity: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the map with a lower limit. It will drop\n down no lower than the supplied limit while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the map with a lower limit. It will drop","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":101225,"byte_end":101293,"line_start":713,"line_end":713,"column_start":5,"column_end":73}},{"value":"/ down no lower than the supplied limit while maintaining the internal rules","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":101298,"byte_end":101376,"line_start":714,"line_end":714,"column_start":5,"column_end":83}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":101381,"byte_end":101454,"line_start":715,"line_end":715,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":101459,"byte_end":101462,"line_start":716,"line_end":716,"column_start":5,"column_end":8}},{"value":"/ This function does nothing if the current capacity is smaller than the","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":101467,"byte_end":101541,"line_start":717,"line_end":717,"column_start":5,"column_end":79}},{"value":"/ supplied minimum capacity.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":101546,"byte_end":101576,"line_start":718,"line_end":718,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":101581,"byte_end":101584,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":101589,"byte_end":101603,"line_start":720,"line_end":720,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":101608,"byte_end":101611,"line_start":721,"line_end":721,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":101616,"byte_end":101623,"line_start":722,"line_end":722,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":101628,"byte_end":101655,"line_start":723,"line_end":723,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":101660,"byte_end":101663,"line_start":724,"line_end":724,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<i32, i32> = HashMap::with_capacity(100);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":101668,"byte_end":101733,"line_start":725,"line_end":725,"column_start":5,"column_end":70}},{"value":"/ map.insert(1, 2);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":101738,"byte_end":101759,"line_start":726,"line_end":726,"column_start":5,"column_end":26}},{"value":"/ map.insert(3, 4);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":101764,"byte_end":101785,"line_start":727,"line_end":727,"column_start":5,"column_end":26}},{"value":"/ assert!(map.capacity() >= 100);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":101790,"byte_end":101825,"line_start":728,"line_end":728,"column_start":5,"column_end":40}},{"value":"/ map.shrink_to(10);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":101830,"byte_end":101852,"line_start":729,"line_end":729,"column_start":5,"column_end":27}},{"value":"/ assert!(map.capacity() >= 10);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":101857,"byte_end":101891,"line_start":730,"line_end":730,"column_start":5,"column_end":39}},{"value":"/ map.shrink_to(0);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":101896,"byte_end":101917,"line_start":731,"line_end":731,"column_start":5,"column_end":26}},{"value":"/ assert!(map.capacity() >= 2);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":101922,"byte_end":101955,"line_start":732,"line_end":732,"column_start":5,"column_end":38}},{"value":"/ map.shrink_to(10);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":101960,"byte_end":101982,"line_start":733,"line_end":733,"column_start":5,"column_end":27}},{"value":"/ assert!(map.capacity() >= 2);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":101987,"byte_end":102020,"line_start":734,"line_end":734,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":102025,"byte_end":102032,"line_start":735,"line_end":735,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":373},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":102897,"byte_end":102902,"line_start":763,"line_end":763,"column_start":12,"column_end":17},"name":"entry","qualname":"<HashMap<K, V, S>>::entry","value":"fn (&mut self, key: K) -> Entry<'_, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Gets the given key's corresponding entry in the map for in-place manipulation.","sig":null,"attributes":[{"value":"/ Gets the given key's corresponding entry in the map for in-place manipulation.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":102287,"byte_end":102369,"line_start":743,"line_end":743,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":102374,"byte_end":102377,"line_start":744,"line_end":744,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":102382,"byte_end":102396,"line_start":745,"line_end":745,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":102401,"byte_end":102404,"line_start":746,"line_end":746,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":102409,"byte_end":102416,"line_start":747,"line_end":747,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":102421,"byte_end":102448,"line_start":748,"line_end":748,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":102453,"byte_end":102456,"line_start":749,"line_end":749,"column_start":5,"column_end":8}},{"value":"/ let mut letters = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":102461,"byte_end":102498,"line_start":750,"line_end":750,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":102503,"byte_end":102506,"line_start":751,"line_end":751,"column_start":5,"column_end":8}},{"value":"/ for ch in \"a short treatise on fungi\".chars() {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":102511,"byte_end":102562,"line_start":752,"line_end":752,"column_start":5,"column_end":56}},{"value":"/     let counter = letters.entry(ch).or_insert(0);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":102567,"byte_end":102620,"line_start":753,"line_end":753,"column_start":5,"column_end":58}},{"value":"/     *counter += 1;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":102625,"byte_end":102647,"line_start":754,"line_end":754,"column_start":5,"column_end":27}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":102652,"byte_end":102657,"line_start":755,"line_end":755,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":102662,"byte_end":102665,"line_start":756,"line_end":756,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(letters[&'s'], 2);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":102670,"byte_end":102703,"line_start":757,"line_end":757,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(letters[&'t'], 3);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":102708,"byte_end":102741,"line_start":758,"line_end":758,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(letters[&'u'], 1);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":102746,"byte_end":102779,"line_start":759,"line_end":759,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(letters.get(&'y'), None);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":102784,"byte_end":102824,"line_start":760,"line_end":760,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":102829,"byte_end":102836,"line_start":761,"line_end":761,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":375},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":104027,"byte_end":104030,"line_start":800,"line_end":800,"column_start":12,"column_end":15},"name":"get","qualname":"<HashMap<K, V, S>>::get","value":"fn <Q> (&self, k: &Q) -> Option<&V>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a reference to the value corresponding to the key.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":103379,"byte_end":103441,"line_start":780,"line_end":780,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":103446,"byte_end":103449,"line_start":781,"line_end":781,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":103454,"byte_end":103517,"line_start":782,"line_end":782,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":103522,"byte_end":103589,"line_start":783,"line_end":783,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":103594,"byte_end":103611,"line_start":784,"line_end":784,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":103616,"byte_end":103619,"line_start":785,"line_end":785,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":103624,"byte_end":103683,"line_start":786,"line_end":786,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":103688,"byte_end":103752,"line_start":787,"line_end":787,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":103757,"byte_end":103760,"line_start":788,"line_end":788,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":103765,"byte_end":103779,"line_start":789,"line_end":789,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":103784,"byte_end":103787,"line_start":790,"line_end":790,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":103792,"byte_end":103799,"line_start":791,"line_end":791,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":103804,"byte_end":103831,"line_start":792,"line_end":792,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":103836,"byte_end":103839,"line_start":793,"line_end":793,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":103844,"byte_end":103877,"line_start":794,"line_end":794,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":103882,"byte_end":103905,"line_start":795,"line_end":795,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.get(&1), Some(&\"a\"));","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":103910,"byte_end":103950,"line_start":796,"line_end":796,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(map.get(&2), None);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":103955,"byte_end":103989,"line_start":797,"line_end":797,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":103994,"byte_end":104001,"line_start":798,"line_end":798,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":104006,"byte_end":104015,"line_start":799,"line_end":799,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":377},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":104996,"byte_end":105009,"line_start":832,"line_end":832,"column_start":12,"column_end":25},"name":"get_key_value","qualname":"<HashMap<K, V, S>>::get_key_value","value":"fn <Q> (&self, k: &Q) -> Option<(&K, &V)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the key-value pair corresponding to the supplied key.","sig":null,"attributes":[{"value":"/ Returns the key-value pair corresponding to the supplied key.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":104310,"byte_end":104375,"line_start":812,"line_end":812,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":104380,"byte_end":104383,"line_start":813,"line_end":813,"column_start":5,"column_end":8}},{"value":"/ The supplied key may be any borrowed form of the map's key type, but","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":104388,"byte_end":104460,"line_start":814,"line_end":814,"column_start":5,"column_end":77}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":104465,"byte_end":104532,"line_start":815,"line_end":815,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":104537,"byte_end":104554,"line_start":816,"line_end":816,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":104559,"byte_end":104562,"line_start":817,"line_end":817,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":104567,"byte_end":104626,"line_start":818,"line_end":818,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":104631,"byte_end":104695,"line_start":819,"line_end":819,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":104700,"byte_end":104703,"line_start":820,"line_end":820,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":104708,"byte_end":104722,"line_start":821,"line_end":821,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":104727,"byte_end":104730,"line_start":822,"line_end":822,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":104735,"byte_end":104742,"line_start":823,"line_end":823,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":104747,"byte_end":104774,"line_start":824,"line_end":824,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":104779,"byte_end":104782,"line_start":825,"line_end":825,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":104787,"byte_end":104820,"line_start":826,"line_end":826,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":104825,"byte_end":104848,"line_start":827,"line_end":827,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.get_key_value(&1), Some((&1, &\"a\")));","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":104853,"byte_end":104909,"line_start":828,"line_end":828,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(map.get_key_value(&2), None);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":104914,"byte_end":104958,"line_start":829,"line_end":829,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":104963,"byte_end":104970,"line_start":830,"line_end":830,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":104975,"byte_end":104984,"line_start":831,"line_end":831,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":106346,"byte_end":106363,"line_start":872,"line_end":872,"column_start":12,"column_end":29},"name":"get_key_value_mut","qualname":"<HashMap<K, V, S>>::get_key_value_mut","value":"fn <Q> (&mut self, k: &Q) -> Option<(&K, &mut V)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.","sig":null,"attributes":[{"value":"/ Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":105478,"byte_end":105578,"line_start":848,"line_end":848,"column_start":5,"column_end":105}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":105583,"byte_end":105586,"line_start":849,"line_end":849,"column_start":5,"column_end":8}},{"value":"/ The supplied key may be any borrowed form of the map's key type, but","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":105591,"byte_end":105663,"line_start":850,"line_end":850,"column_start":5,"column_end":77}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":105668,"byte_end":105735,"line_start":851,"line_end":851,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":105740,"byte_end":105757,"line_start":852,"line_end":852,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":105762,"byte_end":105765,"line_start":853,"line_end":853,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":105770,"byte_end":105829,"line_start":854,"line_end":854,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":105834,"byte_end":105898,"line_start":855,"line_end":855,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":105903,"byte_end":105906,"line_start":856,"line_end":856,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":105911,"byte_end":105925,"line_start":857,"line_end":857,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":105930,"byte_end":105933,"line_start":858,"line_end":858,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":105938,"byte_end":105945,"line_start":859,"line_end":859,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":105950,"byte_end":105977,"line_start":860,"line_end":860,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":105982,"byte_end":105985,"line_start":861,"line_end":861,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":105990,"byte_end":106023,"line_start":862,"line_end":862,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":106028,"byte_end":106051,"line_start":863,"line_end":863,"column_start":5,"column_end":28}},{"value":"/ let (k, v) = map.get_key_value_mut(&1).unwrap();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":106056,"byte_end":106108,"line_start":864,"line_end":864,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(k, &1);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":106113,"byte_end":106135,"line_start":865,"line_end":865,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(v, &mut \"a\");","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":106140,"byte_end":106168,"line_start":866,"line_end":866,"column_start":5,"column_end":33}},{"value":"/ *v = \"b\";","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":106173,"byte_end":106186,"line_start":867,"line_end":867,"column_start":5,"column_end":18}},{"value":"/ assert_eq!(map.get_key_value_mut(&1), Some((&1, &mut \"b\")));","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":106191,"byte_end":106255,"line_start":868,"line_end":868,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(map.get_key_value_mut(&2), None);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":106260,"byte_end":106308,"line_start":869,"line_end":869,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":106313,"byte_end":106320,"line_start":870,"line_end":870,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":106325,"byte_end":106334,"line_start":871,"line_end":871,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":383},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":107551,"byte_end":107563,"line_start":908,"line_end":908,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<HashMap<K, V, S>>::contains_key","value":"fn <Q> (&self, k: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the map contains a value for the specified key.","sig":null,"attributes":[{"value":"/ Returns `true` if the map contains a value for the specified key.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":106848,"byte_end":106917,"line_start":888,"line_end":888,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":106922,"byte_end":106925,"line_start":889,"line_end":889,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":106930,"byte_end":106993,"line_start":890,"line_end":890,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":106998,"byte_end":107065,"line_start":891,"line_end":891,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":107070,"byte_end":107087,"line_start":892,"line_end":892,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":107092,"byte_end":107095,"line_start":893,"line_end":893,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":107100,"byte_end":107159,"line_start":894,"line_end":894,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":107164,"byte_end":107228,"line_start":895,"line_end":895,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":107233,"byte_end":107236,"line_start":896,"line_end":896,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":107241,"byte_end":107255,"line_start":897,"line_end":897,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":107260,"byte_end":107263,"line_start":898,"line_end":898,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":107268,"byte_end":107275,"line_start":899,"line_end":899,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":107280,"byte_end":107307,"line_start":900,"line_end":900,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":107312,"byte_end":107315,"line_start":901,"line_end":901,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":107320,"byte_end":107353,"line_start":902,"line_end":902,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":107358,"byte_end":107381,"line_start":903,"line_end":903,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.contains_key(&1), true);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":107386,"byte_end":107429,"line_start":904,"line_end":904,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(map.contains_key(&2), false);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":107434,"byte_end":107478,"line_start":905,"line_end":905,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":107483,"byte_end":107490,"line_start":906,"line_end":906,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":385},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":108414,"byte_end":108421,"line_start":938,"line_end":938,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<HashMap<K, V, S>>::get_mut","value":"fn <Q> (&mut self, k: &Q) -> Option<&mut V>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the value corresponding to the key.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":107698,"byte_end":107768,"line_start":916,"line_end":916,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":107773,"byte_end":107776,"line_start":917,"line_end":917,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":107781,"byte_end":107844,"line_start":918,"line_end":918,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":107849,"byte_end":107916,"line_start":919,"line_end":919,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":107921,"byte_end":107938,"line_start":920,"line_end":920,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":107943,"byte_end":107946,"line_start":921,"line_end":921,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":107951,"byte_end":108010,"line_start":922,"line_end":922,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":108015,"byte_end":108079,"line_start":923,"line_end":923,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":108084,"byte_end":108087,"line_start":924,"line_end":924,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":108092,"byte_end":108106,"line_start":925,"line_end":925,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":108111,"byte_end":108114,"line_start":926,"line_end":926,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":108119,"byte_end":108126,"line_start":927,"line_end":927,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":108131,"byte_end":108158,"line_start":928,"line_end":928,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":108163,"byte_end":108166,"line_start":929,"line_end":929,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":108171,"byte_end":108204,"line_start":930,"line_end":930,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":108209,"byte_end":108232,"line_start":931,"line_end":931,"column_start":5,"column_end":28}},{"value":"/ if let Some(x) = map.get_mut(&1) {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":108237,"byte_end":108275,"line_start":932,"line_end":932,"column_start":5,"column_end":43}},{"value":"/     *x = \"b\";","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":108280,"byte_end":108297,"line_start":933,"line_end":933,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":108302,"byte_end":108307,"line_start":934,"line_end":934,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[&1], \"b\");","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":108312,"byte_end":108341,"line_start":935,"line_end":935,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":108346,"byte_end":108353,"line_start":936,"line_end":936,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":109789,"byte_end":109795,"line_start":977,"line_end":977,"column_start":12,"column_end":18},"name":"insert","qualname":"<HashMap<K, V, S>>::insert","value":"fn (&mut self, k: K, v: V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a key-value pair into the map.","sig":null,"attributes":[{"value":"/ Inserts a key-value pair into the map.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":108814,"byte_end":108856,"line_start":951,"line_end":951,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":108861,"byte_end":108864,"line_start":952,"line_end":952,"column_start":5,"column_end":8}},{"value":"/ If the map did not have this key present, [`None`] is returned.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":108869,"byte_end":108936,"line_start":953,"line_end":953,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":108941,"byte_end":108944,"line_start":954,"line_end":954,"column_start":5,"column_end":8}},{"value":"/ If the map did have this key present, the value is updated, and the old","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":108949,"byte_end":109024,"line_start":955,"line_end":955,"column_start":5,"column_end":80}},{"value":"/ value is returned. The key is not updated, though; this matters for","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":109029,"byte_end":109100,"line_start":956,"line_end":956,"column_start":5,"column_end":76}},{"value":"/ types that can be `==` without being identical. See the [module-level","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":109105,"byte_end":109178,"line_start":957,"line_end":957,"column_start":5,"column_end":78}},{"value":"/ documentation] for more.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":109183,"byte_end":109211,"line_start":958,"line_end":958,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":109216,"byte_end":109219,"line_start":959,"line_end":959,"column_start":5,"column_end":8}},{"value":"/ [`None`]: https://doc.rust-lang.org/std/option/enum.Option.html#variant.None","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":109224,"byte_end":109304,"line_start":960,"line_end":960,"column_start":5,"column_end":85}},{"value":"/ [module-level documentation]: index.html#insert-and-complex-keys","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":109309,"byte_end":109377,"line_start":961,"line_end":961,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":109382,"byte_end":109385,"line_start":962,"line_end":962,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":109390,"byte_end":109404,"line_start":963,"line_end":963,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":109409,"byte_end":109412,"line_start":964,"line_end":964,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":109417,"byte_end":109424,"line_start":965,"line_end":965,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":109429,"byte_end":109456,"line_start":966,"line_end":966,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":109461,"byte_end":109464,"line_start":967,"line_end":967,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":109469,"byte_end":109502,"line_start":968,"line_end":968,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(map.insert(37, \"a\"), None);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":109507,"byte_end":109549,"line_start":969,"line_end":969,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(map.is_empty(), false);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":109554,"byte_end":109592,"line_start":970,"line_end":970,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":109597,"byte_end":109600,"line_start":971,"line_end":971,"column_start":5,"column_end":8}},{"value":"/ map.insert(37, \"b\");","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":109605,"byte_end":109629,"line_start":972,"line_end":972,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(map.insert(37, \"c\"), Some(\"b\"));","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":109634,"byte_end":109681,"line_start":973,"line_end":973,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(map[&37], \"c\");","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":109686,"byte_end":109716,"line_start":974,"line_end":974,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":109721,"byte_end":109728,"line_start":975,"line_end":975,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":111012,"byte_end":111018,"line_start":1012,"line_end":1012,"column_start":12,"column_end":18},"name":"remove","qualname":"<HashMap<K, V, S>>::remove","value":"fn <Q> (&mut self, k: &Q) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Removes a key from the map, returning the value at the key if the key\n was previously in the map.","sig":null,"attributes":[{"value":"/ Removes a key from the map, returning the value at the key if the key","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":110278,"byte_end":110351,"line_start":991,"line_end":991,"column_start":5,"column_end":78}},{"value":"/ was previously in the map.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":110356,"byte_end":110386,"line_start":992,"line_end":992,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":110391,"byte_end":110394,"line_start":993,"line_end":993,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":110399,"byte_end":110462,"line_start":994,"line_end":994,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":110467,"byte_end":110534,"line_start":995,"line_end":995,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":110539,"byte_end":110556,"line_start":996,"line_end":996,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":110561,"byte_end":110564,"line_start":997,"line_end":997,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":110569,"byte_end":110628,"line_start":998,"line_end":998,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":110633,"byte_end":110697,"line_start":999,"line_end":999,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":110702,"byte_end":110705,"line_start":1000,"line_end":1000,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":110710,"byte_end":110724,"line_start":1001,"line_end":1001,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":110729,"byte_end":110732,"line_start":1002,"line_end":1002,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":110737,"byte_end":110744,"line_start":1003,"line_end":1003,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":110749,"byte_end":110776,"line_start":1004,"line_end":1004,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":110781,"byte_end":110784,"line_start":1005,"line_end":1005,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":110789,"byte_end":110822,"line_start":1006,"line_end":1006,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":110827,"byte_end":110850,"line_start":1007,"line_end":1007,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.remove(&1), Some(\"a\"));","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":110855,"byte_end":110897,"line_start":1008,"line_end":1008,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(map.remove(&1), None);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":110902,"byte_end":110939,"line_start":1009,"line_end":1009,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":110944,"byte_end":110951,"line_start":1010,"line_end":1010,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":112049,"byte_end":112061,"line_start":1045,"line_end":1045,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<HashMap<K, V, S>>::remove_entry","value":"fn <Q> (&mut self, k: &Q) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Removes a key from the map, returning the stored key and value if the\n key was previously in the map.","sig":null,"attributes":[{"value":"/ Removes a key from the map, returning the stored key and value if the","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":111300,"byte_end":111373,"line_start":1024,"line_end":1024,"column_start":5,"column_end":78}},{"value":"/ key was previously in the map.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":111378,"byte_end":111412,"line_start":1025,"line_end":1025,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":111417,"byte_end":111420,"line_start":1026,"line_end":1026,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":111425,"byte_end":111488,"line_start":1027,"line_end":1027,"column_start":5,"column_end":68}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":111493,"byte_end":111560,"line_start":1028,"line_end":1028,"column_start":5,"column_end":72}},{"value":"/ the key type.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":111565,"byte_end":111582,"line_start":1029,"line_end":1029,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":111587,"byte_end":111590,"line_start":1030,"line_end":1030,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":111595,"byte_end":111654,"line_start":1031,"line_end":1031,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":111659,"byte_end":111723,"line_start":1032,"line_end":1032,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":111728,"byte_end":111731,"line_start":1033,"line_end":1033,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":111736,"byte_end":111750,"line_start":1034,"line_end":1034,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":111755,"byte_end":111758,"line_start":1035,"line_end":1035,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":111763,"byte_end":111770,"line_start":1036,"line_end":1036,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":111775,"byte_end":111802,"line_start":1037,"line_end":1037,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":111807,"byte_end":111810,"line_start":1038,"line_end":1038,"column_start":5,"column_end":8}},{"value":"/ let mut map = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":111815,"byte_end":111848,"line_start":1039,"line_end":1039,"column_start":5,"column_end":38}},{"value":"/ map.insert(1, \"a\");","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":111853,"byte_end":111876,"line_start":1040,"line_end":1040,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(map.remove_entry(&1), Some((1, \"a\")));","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":111881,"byte_end":111934,"line_start":1041,"line_end":1041,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(map.remove(&1), None);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":111939,"byte_end":111976,"line_start":1042,"line_end":1042,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":111981,"byte_end":111988,"line_start":1043,"line_end":1043,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":114422,"byte_end":114435,"line_start":1094,"line_end":1094,"column_start":12,"column_end":25},"name":"raw_entry_mut","qualname":"<HashMap<K, V, S>>::raw_entry_mut","value":"fn (&mut self) -> RawEntryBuilderMut<'_, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Creates a raw entry builder for the HashMap.","sig":null,"attributes":[{"value":"/ Creates a raw entry builder for the HashMap.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":112482,"byte_end":112530,"line_start":1062,"line_end":1062,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":112535,"byte_end":112538,"line_start":1063,"line_end":1063,"column_start":5,"column_end":8}},{"value":"/ Raw entries provide the lowest level of control for searching and","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":112543,"byte_end":112612,"line_start":1064,"line_end":1064,"column_start":5,"column_end":74}},{"value":"/ manipulating a map. They must be manually initialized with a hash and","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":112617,"byte_end":112690,"line_start":1065,"line_end":1065,"column_start":5,"column_end":78}},{"value":"/ then manually searched. After this, insertions into a vacant entry","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":112695,"byte_end":112765,"line_start":1066,"line_end":1066,"column_start":5,"column_end":75}},{"value":"/ still require an owned key to be provided.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":112770,"byte_end":112816,"line_start":1067,"line_end":1067,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":112821,"byte_end":112824,"line_start":1068,"line_end":1068,"column_start":5,"column_end":8}},{"value":"/ Raw entries are useful for such exotic situations as:","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":112829,"byte_end":112886,"line_start":1069,"line_end":1069,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":112891,"byte_end":112894,"line_start":1070,"line_end":1070,"column_start":5,"column_end":8}},{"value":"/ * Hash memoization","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":112899,"byte_end":112921,"line_start":1071,"line_end":1071,"column_start":5,"column_end":27}},{"value":"/ * Deferring the creation of an owned key until it is known to be required","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":112926,"byte_end":113003,"line_start":1072,"line_end":1072,"column_start":5,"column_end":82}},{"value":"/ * Using a search key that doesn't work with the Borrow trait","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":113008,"byte_end":113072,"line_start":1073,"line_end":1073,"column_start":5,"column_end":69}},{"value":"/ * Using custom comparison logic without newtype wrappers","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":113077,"byte_end":113137,"line_start":1074,"line_end":1074,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":113142,"byte_end":113145,"line_start":1075,"line_end":1075,"column_start":5,"column_end":8}},{"value":"/ Because raw entries provide much more low-level control, it's much easier","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":113150,"byte_end":113227,"line_start":1076,"line_end":1076,"column_start":5,"column_end":82}},{"value":"/ to put the HashMap into an inconsistent state which, while memory-safe,","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":113232,"byte_end":113307,"line_start":1077,"line_end":1077,"column_start":5,"column_end":80}},{"value":"/ will cause the map to produce seemingly random results. Higher-level and","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":113312,"byte_end":113388,"line_start":1078,"line_end":1078,"column_start":5,"column_end":81}},{"value":"/ more foolproof APIs like `entry` should be preferred when possible.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":113393,"byte_end":113464,"line_start":1079,"line_end":1079,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":113469,"byte_end":113472,"line_start":1080,"line_end":1080,"column_start":5,"column_end":8}},{"value":"/ In particular, the hash used to initialized the raw entry must still be","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":113477,"byte_end":113552,"line_start":1081,"line_end":1081,"column_start":5,"column_end":80}},{"value":"/ consistent with the hash of the key that is ultimately stored in the entry.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":113557,"byte_end":113636,"line_start":1082,"line_end":1082,"column_start":5,"column_end":84}},{"value":"/ This is because implementations of HashMap may need to recompute hashes","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":113641,"byte_end":113716,"line_start":1083,"line_end":1083,"column_start":5,"column_end":80}},{"value":"/ when resizing, at which point only the keys are available.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":113721,"byte_end":113783,"line_start":1084,"line_end":1084,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":113788,"byte_end":113791,"line_start":1085,"line_end":1085,"column_start":5,"column_end":8}},{"value":"/ Raw entries give mutable access to the keys. This must not be used","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":113796,"byte_end":113866,"line_start":1086,"line_end":1086,"column_start":5,"column_end":75}},{"value":"/ to modify how the key would compare or hash, as the map will not re-evaluate","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":113871,"byte_end":113951,"line_start":1087,"line_end":1087,"column_start":5,"column_end":85}},{"value":"/ where the key should go, meaning the keys may become \"lost\" if their","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":113956,"byte_end":114028,"line_start":1088,"line_end":1088,"column_start":5,"column_end":77}},{"value":"/ location does not reflect their state. For instance, if you change a key","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":114033,"byte_end":114109,"line_start":1089,"line_end":1089,"column_start":5,"column_end":81}},{"value":"/ so that the map now contains keys which compare equal, search may start","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":114114,"byte_end":114189,"line_start":1090,"line_end":1090,"column_start":5,"column_end":80}},{"value":"/ acting erratically, with two keys randomly masking each other. Implementations","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":114194,"byte_end":114276,"line_start":1091,"line_end":1091,"column_start":5,"column_end":87}},{"value":"/ are free to assume this doesn't happen (within the limits of memory-safety).","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":114281,"byte_end":114361,"line_start":1092,"line_end":1092,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":115273,"byte_end":115282,"line_start":1114,"line_end":1114,"column_start":12,"column_end":21},"name":"raw_entry","qualname":"<HashMap<K, V, S>>::raw_entry","value":"fn (&self) -> RawEntryBuilder<'_, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Creates a raw immutable entry builder for the HashMap.","sig":null,"attributes":[{"value":"/ Creates a raw immutable entry builder for the HashMap.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":114536,"byte_end":114594,"line_start":1098,"line_end":1098,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":114599,"byte_end":114602,"line_start":1099,"line_end":1099,"column_start":5,"column_end":8}},{"value":"/ Raw entries provide the lowest level of control for searching and","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":114607,"byte_end":114676,"line_start":1100,"line_end":1100,"column_start":5,"column_end":74}},{"value":"/ manipulating a map. They must be manually initialized with a hash and","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":114681,"byte_end":114754,"line_start":1101,"line_end":1101,"column_start":5,"column_end":78}},{"value":"/ then manually searched.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":114759,"byte_end":114786,"line_start":1102,"line_end":1102,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":114791,"byte_end":114794,"line_start":1103,"line_end":1103,"column_start":5,"column_end":8}},{"value":"/ This is useful for","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":114799,"byte_end":114821,"line_start":1104,"line_end":1104,"column_start":5,"column_end":27}},{"value":"/ * Hash memoization","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":114826,"byte_end":114848,"line_start":1105,"line_end":1105,"column_start":5,"column_end":27}},{"value":"/ * Using a search key that doesn't work with the Borrow trait","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":114853,"byte_end":114917,"line_start":1106,"line_end":1106,"column_start":5,"column_end":69}},{"value":"/ * Using custom comparison logic without newtype wrappers","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":114922,"byte_end":114982,"line_start":1107,"line_end":1107,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":114987,"byte_end":114990,"line_start":1108,"line_end":1108,"column_start":5,"column_end":8}},{"value":"/ Unless you are in such a situation, higher-level and more foolproof APIs like","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":114995,"byte_end":115076,"line_start":1109,"line_end":1109,"column_start":5,"column_end":86}},{"value":"/ `get` should be preferred.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":115081,"byte_end":115111,"line_start":1110,"line_end":1110,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":115116,"byte_end":115119,"line_start":1111,"line_end":1111,"column_start":5,"column_end":8}},{"value":"/ Immutable raw entries have very limited use; you might instead want `raw_entry_mut`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":115124,"byte_end":115212,"line_start":1112,"line_end":1112,"column_start":5,"column_end":93}}]},{"kind":"Struct","id":{"krate":0,"index":430},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":117016,"byte_end":117020,"line_start":1190,"line_end":1190,"column_start":12,"column_end":16},"name":"Iter","qualname":"::map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":434},{"krate":0,"index":435}],"decl_id":null,"docs":" An iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ An iterator over the entries of a `HashMap`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":116761,"byte_end":116809,"line_start":1183,"line_end":1183,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":116810,"byte_end":116813,"line_start":1184,"line_end":1184,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`HashMap`]. See its","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":116814,"byte_end":116889,"line_start":1185,"line_end":1185,"column_start":1,"column_end":76}},{"value":"/ documentation for more.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":116890,"byte_end":116917,"line_start":1186,"line_end":1186,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":116918,"byte_end":116921,"line_start":1187,"line_end":1187,"column_start":1,"column_end":4}},{"value":"/ [`iter`]: struct.HashMap.html#method.iter","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":116922,"byte_end":116967,"line_start":1188,"line_end":1188,"column_start":1,"column_end":46}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":116968,"byte_end":117004,"line_start":1189,"line_end":1189,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":444},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":117840,"byte_end":117847,"line_start":1219,"line_end":1219,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":448},{"krate":0,"index":449}],"decl_id":null,"docs":" A mutable iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the entries of a `HashMap`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":117566,"byte_end":117621,"line_start":1212,"line_end":1212,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":117622,"byte_end":117625,"line_start":1213,"line_end":1213,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter_mut`] method on [`HashMap`]. See its","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":117626,"byte_end":117705,"line_start":1214,"line_end":1214,"column_start":1,"column_end":80}},{"value":"/ documentation for more.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":117706,"byte_end":117733,"line_start":1215,"line_end":1215,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":117734,"byte_end":117737,"line_start":1216,"line_end":1216,"column_start":1,"column_end":4}},{"value":"/ [`iter_mut`]: struct.HashMap.html#method.iter_mut","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":117738,"byte_end":117791,"line_start":1217,"line_end":1217,"column_start":1,"column_end":54}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":117792,"byte_end":117828,"line_start":1218,"line_end":1218,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":457},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":118846,"byte_end":118854,"line_start":1248,"line_end":1248,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":460}],"decl_id":null,"docs":" An owning iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ An owning iterator over the entries of a `HashMap`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":118530,"byte_end":118585,"line_start":1241,"line_end":1241,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":118586,"byte_end":118589,"line_start":1242,"line_end":1242,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`HashMap`]","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":118590,"byte_end":118661,"line_start":1243,"line_end":1243,"column_start":1,"column_end":72}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":118662,"byte_end":118737,"line_start":1244,"line_end":1244,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":118738,"byte_end":118741,"line_start":1245,"line_end":1245,"column_start":1,"column_end":4}},{"value":"/ [`into_iter`]: struct.HashMap.html#method.into_iter","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":118742,"byte_end":118797,"line_start":1246,"line_end":1246,"column_start":1,"column_end":56}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":118798,"byte_end":118834,"line_start":1247,"line_end":1247,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":465},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":119449,"byte_end":119453,"line_start":1270,"line_end":1270,"column_start":12,"column_end":16},"name":"Keys","qualname":"::map::Keys","value":"Keys {  }","parent":null,"children":[{"krate":0,"index":469}],"decl_id":null,"docs":" An iterator over the keys of a `HashMap`.","sig":null,"attributes":[{"value":"/ An iterator over the keys of a `HashMap`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":119197,"byte_end":119242,"line_start":1263,"line_end":1263,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":119243,"byte_end":119246,"line_start":1264,"line_end":1264,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`keys`] method on [`HashMap`]. See its","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":119247,"byte_end":119322,"line_start":1265,"line_end":1265,"column_start":1,"column_end":76}},{"value":"/ documentation for more.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":119323,"byte_end":119350,"line_start":1266,"line_end":1266,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":119351,"byte_end":119354,"line_start":1267,"line_end":1267,"column_start":1,"column_end":4}},{"value":"/ [`keys`]: struct.HashMap.html#method.keys","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":119355,"byte_end":119400,"line_start":1268,"line_end":1268,"column_start":1,"column_end":46}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":119401,"byte_end":119437,"line_start":1269,"line_end":1269,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":478},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":120177,"byte_end":120183,"line_start":1297,"line_end":1297,"column_start":12,"column_end":18},"name":"Values","qualname":"::map::Values","value":"Values {  }","parent":null,"children":[{"krate":0,"index":482}],"decl_id":null,"docs":" An iterator over the values of a `HashMap`.","sig":null,"attributes":[{"value":"/ An iterator over the values of a `HashMap`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":119917,"byte_end":119964,"line_start":1290,"line_end":1290,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":119965,"byte_end":119968,"line_start":1291,"line_end":1291,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values`] method on [`HashMap`]. See its","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":119969,"byte_end":120046,"line_start":1292,"line_end":1292,"column_start":1,"column_end":78}},{"value":"/ documentation for more.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":120047,"byte_end":120074,"line_start":1293,"line_end":1293,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":120075,"byte_end":120078,"line_start":1294,"line_end":1294,"column_start":1,"column_end":4}},{"value":"/ [`values`]: struct.HashMap.html#method.values","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":120079,"byte_end":120128,"line_start":1295,"line_end":1295,"column_start":1,"column_end":50}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":120129,"byte_end":120165,"line_start":1296,"line_end":1296,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":491},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":120919,"byte_end":120924,"line_start":1324,"line_end":1324,"column_start":12,"column_end":17},"name":"Drain","qualname":"::map::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":495}],"decl_id":null,"docs":" A draining iterator over the entries of a `HashMap`.","sig":null,"attributes":[{"value":"/ A draining iterator over the entries of a `HashMap`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":120653,"byte_end":120709,"line_start":1317,"line_end":1317,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":120710,"byte_end":120713,"line_start":1318,"line_end":1318,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`HashMap`]. See its","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":120714,"byte_end":120790,"line_start":1319,"line_end":1319,"column_start":1,"column_end":77}},{"value":"/ documentation for more.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":120791,"byte_end":120818,"line_start":1320,"line_end":1320,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":120819,"byte_end":120822,"line_start":1321,"line_end":1321,"column_start":1,"column_end":4}},{"value":"/ [`drain`]: struct.HashMap.html#method.drain","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":120823,"byte_end":120870,"line_start":1322,"line_end":1322,"column_start":1,"column_end":48}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":120871,"byte_end":120907,"line_start":1323,"line_end":1323,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":500},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":121594,"byte_end":121605,"line_start":1346,"line_end":1346,"column_start":12,"column_end":23},"name":"DrainFilter","qualname":"::map::DrainFilter","value":"DrainFilter {  }","parent":null,"children":[{"krate":0,"index":505},{"krate":0,"index":506}],"decl_id":null,"docs":" A draining iterator over entries of a `HashMap` which don't satisfy the predicate `f`.","sig":null,"attributes":[{"value":"/ A draining iterator over entries of a `HashMap` which don't satisfy the predicate `f`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":121273,"byte_end":121363,"line_start":1339,"line_end":1339,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":121364,"byte_end":121367,"line_start":1340,"line_end":1340,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain_filter`] method on [`HashMap`]. See its","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":121368,"byte_end":121451,"line_start":1341,"line_end":1341,"column_start":1,"column_end":84}},{"value":"/ documentation for more.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":121452,"byte_end":121479,"line_start":1342,"line_end":1342,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":121480,"byte_end":121483,"line_start":1343,"line_end":1343,"column_start":1,"column_end":4}},{"value":"/ [`drain_filter`]: struct.HashMap.html#method.drain_filter","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":121484,"byte_end":121545,"line_start":1344,"line_end":1344,"column_start":1,"column_end":62}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":121546,"byte_end":121582,"line_start":1345,"line_end":1345,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":538},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":123512,"byte_end":123521,"line_start":1420,"line_end":1420,"column_start":12,"column_end":21},"name":"ValuesMut","qualname":"::map::ValuesMut","value":"ValuesMut {  }","parent":null,"children":[{"krate":0,"index":542}],"decl_id":null,"docs":" A mutable iterator over the values of a `HashMap`.","sig":null,"attributes":[{"value":"/ A mutable iterator over the values of a `HashMap`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":123233,"byte_end":123287,"line_start":1413,"line_end":1413,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":123288,"byte_end":123291,"line_start":1414,"line_end":1414,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`values_mut`] method on [`HashMap`]. See its","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":123292,"byte_end":123373,"line_start":1415,"line_end":1415,"column_start":1,"column_end":82}},{"value":"/ documentation for more.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":123374,"byte_end":123401,"line_start":1416,"line_end":1416,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":123402,"byte_end":123405,"line_start":1417,"line_end":1417,"column_start":1,"column_end":4}},{"value":"/ [`values_mut`]: struct.HashMap.html#method.values_mut","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":123406,"byte_end":123463,"line_start":1418,"line_end":1418,"column_start":1,"column_end":58}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":123464,"byte_end":123500,"line_start":1419,"line_end":1419,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":543},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":123808,"byte_end":123826,"line_start":1429,"line_end":1429,"column_start":12,"column_end":30},"name":"RawEntryBuilderMut","qualname":"::map::RawEntryBuilderMut","value":"RawEntryBuilderMut {  }","parent":null,"children":[{"krate":0,"index":548}],"decl_id":null,"docs":" A builder for computing where in a [`HashMap`] a key-value pair would be stored.","sig":null,"attributes":[{"value":"/ A builder for computing where in a [`HashMap`] a key-value pair would be stored.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":123567,"byte_end":123651,"line_start":1424,"line_end":1424,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":123652,"byte_end":123655,"line_start":1425,"line_end":1425,"column_start":1,"column_end":4}},{"value":"/ See the [`HashMap::raw_entry_mut`] docs for usage examples.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":123656,"byte_end":123719,"line_start":1426,"line_end":1426,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":123720,"byte_end":123723,"line_start":1427,"line_end":1427,"column_start":1,"column_end":4}},{"value":"/ [`HashMap::raw_entry_mut`]: struct.HashMap.html#method.raw_entry_mut","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":123724,"byte_end":123796,"line_start":1428,"line_end":1428,"column_start":1,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":554},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":124431,"byte_end":124439,"line_start":1446,"line_end":1446,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::map::RawEntryMut::Occupied","value":"RawEntryMut::Occupied(RawOccupiedEntryMut<'a, K, V>)","parent":{"krate":0,"index":549},"children":[],"decl_id":null,"docs":" An occupied entry.\n","sig":null,"attributes":[{"value":"/ An occupied entry.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":124404,"byte_end":124426,"line_start":1445,"line_end":1445,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":557},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":124500,"byte_end":124506,"line_start":1448,"line_end":1448,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::map::RawEntryMut::Vacant","value":"RawEntryMut::Vacant(RawVacantEntryMut<'a, K, V, S>)","parent":{"krate":0,"index":549},"children":[],"decl_id":null,"docs":" A vacant entry.\n","sig":null,"attributes":[{"value":"/ A vacant entry.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":124476,"byte_end":124495,"line_start":1447,"line_end":1447,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":549},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":124373,"byte_end":124384,"line_start":1444,"line_end":1444,"column_start":10,"column_end":21},"name":"RawEntryMut","qualname":"::map::RawEntryMut","value":"RawEntryMut::{Occupied, Vacant}","parent":null,"children":[{"krate":0,"index":554},{"krate":0,"index":557}],"decl_id":null,"docs":" A view into a single entry in a map, which may either be vacant or occupied.","sig":null,"attributes":[{"value":"/ A view into a single entry in a map, which may either be vacant or occupied.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":123880,"byte_end":123960,"line_start":1433,"line_end":1433,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":123961,"byte_end":123964,"line_start":1434,"line_end":1434,"column_start":1,"column_end":4}},{"value":"/ This is a lower-level version of [`Entry`].","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":123965,"byte_end":124012,"line_start":1435,"line_end":1435,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":124013,"byte_end":124016,"line_start":1436,"line_end":1436,"column_start":1,"column_end":4}},{"value":"/ This `enum` is constructed through the [`raw_entry_mut`] method on [`HashMap`],","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":124017,"byte_end":124100,"line_start":1437,"line_end":1437,"column_start":1,"column_end":84}},{"value":"/ then calling one of the methods of that [`RawEntryBuilderMut`].","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":124101,"byte_end":124168,"line_start":1438,"line_end":1438,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":124169,"byte_end":124172,"line_start":1439,"line_end":1439,"column_start":1,"column_end":4}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":124173,"byte_end":124209,"line_start":1440,"line_end":1440,"column_start":1,"column_end":37}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":124210,"byte_end":124240,"line_start":1441,"line_end":1441,"column_start":1,"column_end":31}},{"value":"/ [`raw_entry_mut`]: struct.HashMap.html#method.raw_entry_mut","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":124241,"byte_end":124304,"line_start":1442,"line_end":1442,"column_start":1,"column_end":64}},{"value":"/ [`RawEntryBuilderMut`]: struct.RawEntryBuilderMut.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":124305,"byte_end":124363,"line_start":1443,"line_end":1443,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":560},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":124695,"byte_end":124714,"line_start":1455,"line_end":1455,"column_start":12,"column_end":31},"name":"RawOccupiedEntryMut","qualname":"::map::RawOccupiedEntryMut","value":"RawOccupiedEntryMut {  }","parent":null,"children":[{"krate":0,"index":564},{"krate":0,"index":565}],"decl_id":null,"docs":" A view into an occupied entry in a `HashMap`.\n It is part of the [`RawEntryMut`] enum.","sig":null,"attributes":[{"value":"/ A view into an occupied entry in a `HashMap`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":124543,"byte_end":124592,"line_start":1451,"line_end":1451,"column_start":1,"column_end":50}},{"value":"/ It is part of the [`RawEntryMut`] enum.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":124593,"byte_end":124636,"line_start":1452,"line_end":1452,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":124637,"byte_end":124640,"line_start":1453,"line_end":1453,"column_start":1,"column_end":4}},{"value":"/ [`RawEntryMut`]: enum.RawEntryMut.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":124641,"byte_end":124683,"line_start":1454,"line_end":1454,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":572},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":125129,"byte_end":125146,"line_start":1477,"line_end":1477,"column_start":12,"column_end":29},"name":"RawVacantEntryMut","qualname":"::map::RawVacantEntryMut","value":"RawVacantEntryMut {  }","parent":null,"children":[{"krate":0,"index":577},{"krate":0,"index":578}],"decl_id":null,"docs":" A view into a vacant entry in a `HashMap`.\n It is part of the [`RawEntryMut`] enum.","sig":null,"attributes":[{"value":"/ A view into a vacant entry in a `HashMap`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":124980,"byte_end":125026,"line_start":1473,"line_end":1473,"column_start":1,"column_end":47}},{"value":"/ It is part of the [`RawEntryMut`] enum.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":125027,"byte_end":125070,"line_start":1474,"line_end":1474,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":125071,"byte_end":125074,"line_start":1475,"line_end":1475,"column_start":1,"column_end":4}},{"value":"/ [`RawEntryMut`]: enum.RawEntryMut.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":125075,"byte_end":125117,"line_start":1476,"line_end":1476,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":579},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":125456,"byte_end":125471,"line_start":1487,"line_end":1487,"column_start":12,"column_end":27},"name":"RawEntryBuilder","qualname":"::map::RawEntryBuilder","value":"RawEntryBuilder {  }","parent":null,"children":[{"krate":0,"index":584}],"decl_id":null,"docs":" A builder for computing where in a [`HashMap`] a key-value pair would be stored.","sig":null,"attributes":[{"value":"/ A builder for computing where in a [`HashMap`] a key-value pair would be stored.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":125227,"byte_end":125311,"line_start":1482,"line_end":1482,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":125312,"byte_end":125315,"line_start":1483,"line_end":1483,"column_start":1,"column_end":4}},{"value":"/ See the [`HashMap::raw_entry`] docs for usage examples.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":125316,"byte_end":125375,"line_start":1484,"line_end":1484,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":125376,"byte_end":125379,"line_start":1485,"line_end":1485,"column_start":1,"column_end":4}},{"value":"/ [`HashMap::raw_entry`]: struct.HashMap.html#method.raw_entry","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":125380,"byte_end":125444,"line_start":1486,"line_end":1486,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":125729,"byte_end":125737,"line_start":1495,"line_end":1495,"column_start":12,"column_end":20},"name":"from_key","qualname":"<RawEntryBuilderMut>::from_key","value":"fn <Q> (self, k: &Q) -> RawEntryMut<'a, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `RawEntryMut` from the given key.\n","sig":null,"attributes":[{"value":"/ Creates a `RawEntryMut` from the given key.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":125577,"byte_end":125624,"line_start":1492,"line_end":1492,"column_start":5,"column_end":52}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":125678,"byte_end":125717,"line_start":1494,"line_end":1494,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":126164,"byte_end":126187,"line_start":1509,"line_end":1509,"column_start":12,"column_end":35},"name":"from_key_hashed_nocheck","qualname":"<RawEntryBuilderMut>::from_key_hashed_nocheck","value":"fn <Q> (self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `RawEntryMut` from the given key and its hash.\n","sig":null,"attributes":[{"value":"/ Creates a `RawEntryMut` from the given key and its hash.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":126034,"byte_end":126094,"line_start":1506,"line_end":1506,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":126099,"byte_end":126108,"line_start":1507,"line_end":1507,"column_start":5,"column_end":14}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":126113,"byte_end":126152,"line_start":1508,"line_end":1508,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":126573,"byte_end":126582,"line_start":1522,"line_end":1522,"column_start":12,"column_end":21},"name":"from_hash","qualname":"<RawEntryBuilderMut>::from_hash","value":"fn <F> (self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `RawEntryMut` from the given hash.\n","sig":null,"attributes":[{"value":"/ Creates a `RawEntryMut` from the given hash.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":126420,"byte_end":126468,"line_start":1519,"line_end":1519,"column_start":5,"column_end":53}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":126522,"byte_end":126561,"line_start":1521,"line_end":1521,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":127523,"byte_end":127531,"line_start":1551,"line_end":1551,"column_start":12,"column_end":20},"name":"from_key","qualname":"<RawEntryBuilder>::from_key","value":"fn <Q> (self, k: &Q) -> Option<(&'a K, &'a V)>","parent":null,"children":[],"decl_id":null,"docs":" Access an entry by key.\n","sig":null,"attributes":[{"value":"/ Access an entry by key.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":127391,"byte_end":127418,"line_start":1548,"line_end":1548,"column_start":5,"column_end":32}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":127472,"byte_end":127511,"line_start":1550,"line_end":1550,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":614},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":127973,"byte_end":127996,"line_start":1565,"line_end":1565,"column_start":12,"column_end":35},"name":"from_key_hashed_nocheck","qualname":"<RawEntryBuilder>::from_key_hashed_nocheck","value":"fn <Q> (self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>","parent":null,"children":[],"decl_id":null,"docs":" Access an entry by a key and its hash.\n","sig":null,"attributes":[{"value":"/ Access an entry by a key and its hash.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":127826,"byte_end":127868,"line_start":1562,"line_end":1562,"column_start":5,"column_end":47}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":127922,"byte_end":127961,"line_start":1564,"line_end":1564,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":128735,"byte_end":128744,"line_start":1590,"line_end":1590,"column_start":12,"column_end":21},"name":"from_hash","qualname":"<RawEntryBuilder>::from_hash","value":"fn <F> (self, hash: u64, is_match: F) -> Option<(&'a K, &'a V)>","parent":null,"children":[],"decl_id":null,"docs":" Access an entry by hash.\n","sig":null,"attributes":[{"value":"/ Access an entry by hash.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":128602,"byte_end":128630,"line_start":1587,"line_end":1587,"column_start":5,"column_end":33}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":128684,"byte_end":128723,"line_start":1589,"line_end":1589,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":129388,"byte_end":129394,"line_start":1612,"line_end":1612,"column_start":12,"column_end":18},"name":"insert","qualname":"<RawEntryMut>::insert","value":"fn (self, key: K, value: V) -> RawOccupiedEntryMut<'a, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns a RawOccupiedEntryMut.","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns a RawOccupiedEntryMut.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":128944,"byte_end":129011,"line_start":1599,"line_end":1599,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":129016,"byte_end":129019,"line_start":1600,"line_end":1600,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":129024,"byte_end":129038,"line_start":1601,"line_end":1601,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":129043,"byte_end":129046,"line_start":1602,"line_end":1602,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":129051,"byte_end":129058,"line_start":1603,"line_end":1603,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":129063,"byte_end":129090,"line_start":1604,"line_end":1604,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":129095,"byte_end":129098,"line_start":1605,"line_end":1605,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":129103,"byte_end":129156,"line_start":1606,"line_end":1606,"column_start":5,"column_end":58}},{"value":"/ let entry = map.raw_entry_mut().from_key(\"horseyland\").insert(\"horseyland\", 37);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":129161,"byte_end":129245,"line_start":1607,"line_end":1607,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":129250,"byte_end":129253,"line_start":1608,"line_end":1608,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(entry.remove_entry(), (\"horseyland\", 37));","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":129258,"byte_end":129315,"line_start":1609,"line_end":1609,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":129320,"byte_end":129327,"line_start":1610,"line_end":1610,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":130371,"byte_end":130380,"line_start":1643,"line_end":1643,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<RawEntryMut>::or_insert","value":"fn (self, default_key: K, default_val: V) -> (&'a mut K, &'a mut V)","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default if empty, and returns\n mutable references to the key and value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default if empty, and returns","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":129748,"byte_end":129830,"line_start":1626,"line_end":1626,"column_start":5,"column_end":87}},{"value":"/ mutable references to the key and value in the entry.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":129835,"byte_end":129892,"line_start":1627,"line_end":1627,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":129897,"byte_end":129900,"line_start":1628,"line_end":1628,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":129905,"byte_end":129919,"line_start":1629,"line_end":1629,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":129924,"byte_end":129927,"line_start":1630,"line_end":1630,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":129932,"byte_end":129939,"line_start":1631,"line_end":1631,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":129944,"byte_end":129971,"line_start":1632,"line_end":1632,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":129976,"byte_end":129979,"line_start":1633,"line_end":1633,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":129984,"byte_end":130037,"line_start":1634,"line_end":1634,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":130042,"byte_end":130045,"line_start":1635,"line_end":1635,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut().from_key(\"poneyland\").or_insert(\"poneyland\", 3);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":130050,"byte_end":130122,"line_start":1636,"line_end":1636,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(map[\"poneyland\"], 3);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":130127,"byte_end":130163,"line_start":1637,"line_end":1637,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":130168,"byte_end":130171,"line_start":1638,"line_end":1638,"column_start":5,"column_end":8}},{"value":"/ *map.raw_entry_mut().from_key(\"poneyland\").or_insert(\"poneyland\", 10).1 *= 2;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":130176,"byte_end":130257,"line_start":1639,"line_end":1639,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(map[\"poneyland\"], 6);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":130262,"byte_end":130298,"line_start":1640,"line_end":1640,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":130303,"byte_end":130310,"line_start":1641,"line_end":1641,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":629},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":131284,"byte_end":131298,"line_start":1671,"line_end":1671,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<RawEntryMut>::or_insert_with","value":"fn <F> (self, default: F) -> (&'a mut K, &'a mut V)","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the result of the default function if empty,\n and returns mutable references to the key and value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the result of the default function if empty,","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":130694,"byte_end":130787,"line_start":1654,"line_end":1654,"column_start":5,"column_end":98}},{"value":"/ and returns mutable references to the key and value in the entry.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":130792,"byte_end":130861,"line_start":1655,"line_end":1655,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":130866,"byte_end":130869,"line_start":1656,"line_end":1656,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":130874,"byte_end":130888,"line_start":1657,"line_end":1657,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":130893,"byte_end":130896,"line_start":1658,"line_end":1658,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":130901,"byte_end":130908,"line_start":1659,"line_end":1659,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":130913,"byte_end":130940,"line_start":1660,"line_end":1660,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":130945,"byte_end":130948,"line_start":1661,"line_end":1661,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, String> = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":130953,"byte_end":131009,"line_start":1662,"line_end":1662,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":131014,"byte_end":131017,"line_start":1663,"line_end":1663,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut().from_key(\"poneyland\").or_insert_with(|| {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":131022,"byte_end":131087,"line_start":1664,"line_end":1664,"column_start":5,"column_end":70}},{"value":"/     (\"poneyland\", \"hoho\".to_string())","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":131092,"byte_end":131133,"line_start":1665,"line_end":1665,"column_start":5,"column_end":46}},{"value":"/ });","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":131138,"byte_end":131145,"line_start":1666,"line_end":1666,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":131150,"byte_end":131153,"line_start":1667,"line_end":1667,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], \"hoho\".to_string());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":131158,"byte_end":131211,"line_start":1668,"line_end":1668,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":131216,"byte_end":131223,"line_start":1669,"line_end":1669,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":631},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":132394,"byte_end":132404,"line_start":1709,"line_end":1709,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<RawEntryMut>::and_modify","value":"fn <F> (self, f: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Provides in-place mutable access to an occupied entry before any\n potential inserts into the map.","sig":null,"attributes":[{"value":"/ Provides in-place mutable access to an occupied entry before any","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":131677,"byte_end":131745,"line_start":1686,"line_end":1686,"column_start":5,"column_end":73}},{"value":"/ potential inserts into the map.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":131750,"byte_end":131785,"line_start":1687,"line_end":1687,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":131790,"byte_end":131793,"line_start":1688,"line_end":1688,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":131798,"byte_end":131812,"line_start":1689,"line_end":1689,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":131817,"byte_end":131820,"line_start":1690,"line_end":1690,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":131825,"byte_end":131832,"line_start":1691,"line_end":1691,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":131837,"byte_end":131864,"line_start":1692,"line_end":1692,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":131869,"byte_end":131872,"line_start":1693,"line_end":1693,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":131877,"byte_end":131930,"line_start":1694,"line_end":1694,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":131935,"byte_end":131938,"line_start":1695,"line_end":1695,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut()","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":131943,"byte_end":131966,"line_start":1696,"line_end":1696,"column_start":5,"column_end":28}},{"value":"/    .from_key(\"poneyland\")","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":131971,"byte_end":132000,"line_start":1697,"line_end":1697,"column_start":5,"column_end":34}},{"value":"/    .and_modify(|_k, v| { *v += 1 })","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":132005,"byte_end":132044,"line_start":1698,"line_end":1698,"column_start":5,"column_end":44}},{"value":"/    .or_insert(\"poneyland\", 42);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":132049,"byte_end":132084,"line_start":1699,"line_end":1699,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(map[\"poneyland\"], 42);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":132089,"byte_end":132126,"line_start":1700,"line_end":1700,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":132131,"byte_end":132134,"line_start":1701,"line_end":1701,"column_start":5,"column_end":8}},{"value":"/ map.raw_entry_mut()","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":132139,"byte_end":132162,"line_start":1702,"line_end":1702,"column_start":5,"column_end":28}},{"value":"/    .from_key(\"poneyland\")","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":132167,"byte_end":132196,"line_start":1703,"line_end":1703,"column_start":5,"column_end":34}},{"value":"/    .and_modify(|_k, v| { *v += 1 })","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":132201,"byte_end":132240,"line_start":1704,"line_end":1704,"column_start":5,"column_end":44}},{"value":"/    .or_insert(\"poneyland\", 0);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":132245,"byte_end":132279,"line_start":1705,"line_end":1705,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":132284,"byte_end":132321,"line_start":1706,"line_end":1706,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":132326,"byte_end":132333,"line_start":1707,"line_end":1707,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":637},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":132980,"byte_end":132983,"line_start":1729,"line_end":1729,"column_start":12,"column_end":15},"name":"key","qualname":"<RawOccupiedEntryMut>::key","value":"fn (&self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the key in the entry.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":132874,"byte_end":132919,"line_start":1727,"line_end":1727,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":638},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":133165,"byte_end":133172,"line_start":1735,"line_end":1735,"column_start":12,"column_end":19},"name":"key_mut","qualname":"<RawOccupiedEntryMut>::key_mut","value":"fn (&mut self) -> &mut K","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the key in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the key in the entry.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":133051,"byte_end":133104,"line_start":1733,"line_end":1733,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":639},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":133433,"byte_end":133441,"line_start":1742,"line_end":1742,"column_start":12,"column_end":20},"name":"into_key","qualname":"<RawOccupiedEntryMut>::into_key","value":"fn (self) -> &'a mut K","parent":null,"children":[],"decl_id":null,"docs":" Converts the entry into a mutable reference to the key in the entry\n with a lifetime bound to the map itself.\n","sig":null,"attributes":[{"value":"/ Converts the entry into a mutable reference to the key in the entry","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":133252,"byte_end":133323,"line_start":1739,"line_end":1739,"column_start":5,"column_end":76}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":133328,"byte_end":133372,"line_start":1740,"line_end":1740,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":640},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":133627,"byte_end":133630,"line_start":1748,"line_end":1748,"column_start":12,"column_end":15},"name":"get","qualname":"<RawOccupiedEntryMut>::get","value":"fn (&self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the value in the entry.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":133519,"byte_end":133566,"line_start":1746,"line_end":1746,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":641},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":133889,"byte_end":133897,"line_start":1755,"line_end":1755,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<RawOccupiedEntryMut>::into_mut","value":"fn (self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntry into a mutable reference to the value in the entry\n with a lifetime bound to the map itself.\n","sig":null,"attributes":[{"value":"/ Converts the OccupiedEntry into a mutable reference to the value in the entry","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":133698,"byte_end":133779,"line_start":1752,"line_end":1752,"column_start":5,"column_end":86}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":133784,"byte_end":133828,"line_start":1753,"line_end":1753,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":642},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":134091,"byte_end":134098,"line_start":1761,"line_end":1761,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RawOccupiedEntryMut>::get_mut","value":"fn (&mut self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the value in the entry.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":133975,"byte_end":134030,"line_start":1759,"line_end":1759,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":643},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":134294,"byte_end":134307,"line_start":1767,"line_end":1767,"column_start":12,"column_end":25},"name":"get_key_value","qualname":"<RawOccupiedEntryMut>::get_key_value","value":"fn (&mut self) -> (&K, &V)","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key and value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the key and value in the entry.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":134178,"byte_end":134233,"line_start":1765,"line_end":1765,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":644},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":134580,"byte_end":134597,"line_start":1776,"line_end":1776,"column_start":12,"column_end":29},"name":"get_key_value_mut","qualname":"<RawOccupiedEntryMut>::get_key_value_mut","value":"fn (&mut self) -> (&mut K, &mut V)","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the key and value in the entry.\n","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the key and value in the entry.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":134456,"byte_end":134519,"line_start":1774,"line_end":1774,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":645},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":134965,"byte_end":134979,"line_start":1786,"line_end":1786,"column_start":12,"column_end":26},"name":"into_key_value","qualname":"<RawOccupiedEntryMut>::into_key_value","value":"fn (self) -> (&'a mut K, &'a mut V)","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntry into a mutable reference to the key and value in the entry\n with a lifetime bound to the map itself.\n","sig":null,"attributes":[{"value":"/ Converts the OccupiedEntry into a mutable reference to the key and value in the entry","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":134766,"byte_end":134855,"line_start":1783,"line_end":1783,"column_start":5,"column_end":94}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":134860,"byte_end":134904,"line_start":1784,"line_end":1784,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":646},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":135277,"byte_end":135283,"line_start":1795,"line_end":1795,"column_start":12,"column_end":18},"name":"insert","qualname":"<RawOccupiedEntryMut>::insert","value":"fn (&mut self, value: V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns the entry's old value.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns the entry's old value.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":135149,"byte_end":135216,"line_start":1793,"line_end":1793,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":647},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":135495,"byte_end":135505,"line_start":1801,"line_end":1801,"column_start":12,"column_end":22},"name":"insert_key","qualname":"<RawOccupiedEntryMut>::insert_key","value":"fn (&mut self, key: K) -> K","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns the entry's old value.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns the entry's old value.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":135367,"byte_end":135434,"line_start":1799,"line_end":1799,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":648},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":135699,"byte_end":135705,"line_start":1807,"line_end":1807,"column_start":12,"column_end":18},"name":"remove","qualname":"<RawOccupiedEntryMut>::remove","value":"fn (self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Takes the value out of the entry, and returns it.\n","sig":null,"attributes":[{"value":"/ Takes the value out of the entry, and returns it.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":135585,"byte_end":135638,"line_start":1805,"line_end":1805,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":649},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":135878,"byte_end":135890,"line_start":1813,"line_end":1813,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<RawOccupiedEntryMut>::remove_entry","value":"fn (self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Take the ownership of the key and value from the map.\n","sig":null,"attributes":[{"value":"/ Take the ownership of the key and value from the map.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":135760,"byte_end":135817,"line_start":1811,"line_end":1811,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":655},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":136188,"byte_end":136194,"line_start":1822,"line_end":1822,"column_start":12,"column_end":18},"name":"insert","qualname":"<RawVacantEntryMut>::insert","value":"fn (self, key: K, value: V) -> (&'a mut K, &'a mut V)","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the VacantEntry's key,\n and returns a mutable reference to it.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the VacantEntry's key,","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":136021,"byte_end":136080,"line_start":1819,"line_end":1819,"column_start":5,"column_end":64}},{"value":"/ and returns a mutable reference to it.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":136085,"byte_end":136127,"line_start":1820,"line_end":1820,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":136673,"byte_end":136694,"line_start":1836,"line_end":1836,"column_start":12,"column_end":33},"name":"insert_hashed_nocheck","qualname":"<RawVacantEntryMut>::insert_hashed_nocheck","value":"fn (self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the VacantEntry's key,\n and returns a mutable reference to it.\n","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the VacantEntry's key,","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":136467,"byte_end":136526,"line_start":1832,"line_end":1832,"column_start":5,"column_end":64}},{"value":"/ and returns a mutable reference to it.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":136531,"byte_end":136573,"line_start":1833,"line_end":1833,"column_start":5,"column_end":47}},{"value":"allow(clippy :: shadow_unrelated)","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":136627,"byte_end":136661,"line_start":1835,"line_end":1835,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":658},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":137073,"byte_end":137091,"line_start":1847,"line_end":1847,"column_start":12,"column_end":30},"name":"insert_with_hasher","qualname":"<RawVacantEntryMut>::insert_with_hasher","value":"fn <H> (self, hash: u64, key: K, value: V, hasher: H) -> (&'a mut K, &'a mut V)","parent":null,"children":[],"decl_id":null,"docs":" Set the value of an entry with a custom hasher function.\n","sig":null,"attributes":[{"value":"/ Set the value of an entry with a custom hasher function.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":136952,"byte_end":137012,"line_start":1845,"line_end":1845,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":692},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":139475,"byte_end":139483,"line_start":1928,"line_end":1928,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::map::Entry::Occupied","value":"Entry::Occupied(OccupiedEntry<'a, K, V, S>)","parent":{"krate":0,"index":687},"children":[],"decl_id":null,"docs":" An occupied entry.\n","sig":null,"attributes":[{"value":"/ An occupied entry.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":139448,"byte_end":139470,"line_start":1927,"line_end":1927,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":695},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":139542,"byte_end":139548,"line_start":1931,"line_end":1931,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::map::Entry::Vacant","value":"Entry::Vacant(VacantEntry<'a, K, V, S>)","parent":{"krate":0,"index":687},"children":[],"decl_id":null,"docs":" A vacant entry.\n","sig":null,"attributes":[{"value":"/ A vacant entry.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":139518,"byte_end":139537,"line_start":1930,"line_end":1930,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":687},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":139423,"byte_end":139428,"line_start":1926,"line_end":1926,"column_start":10,"column_end":15},"name":"Entry","qualname":"::map::Entry","value":"Entry::{Occupied, Vacant}","parent":null,"children":[{"krate":0,"index":692},{"krate":0,"index":695}],"decl_id":null,"docs":" A view into a single entry in a map, which may either be vacant or occupied.","sig":null,"attributes":[{"value":"/ A view into a single entry in a map, which may either be vacant or occupied.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":139167,"byte_end":139247,"line_start":1920,"line_end":1920,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":139248,"byte_end":139251,"line_start":1921,"line_end":1921,"column_start":1,"column_end":4}},{"value":"/ This `enum` is constructed from the [`entry`] method on [`HashMap`].","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":139252,"byte_end":139324,"line_start":1922,"line_end":1922,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":139325,"byte_end":139328,"line_start":1923,"line_end":1923,"column_start":1,"column_end":4}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":139329,"byte_end":139365,"line_start":1924,"line_end":1924,"column_start":1,"column_end":37}},{"value":"/ [`entry`]: struct.HashMap.html#method.entry","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":139366,"byte_end":139413,"line_start":1925,"line_end":1925,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":703},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":140034,"byte_end":140047,"line_start":1947,"line_end":1947,"column_start":12,"column_end":25},"name":"OccupiedEntry","qualname":"::map::OccupiedEntry","value":"OccupiedEntry {  }","parent":null,"children":[{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710}],"decl_id":null,"docs":" A view into an occupied entry in a `HashMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into an occupied entry in a `HashMap`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":139900,"byte_end":139949,"line_start":1943,"line_end":1943,"column_start":1,"column_end":50}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":139950,"byte_end":139987,"line_start":1944,"line_end":1944,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":139988,"byte_end":139991,"line_start":1945,"line_end":1945,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":139992,"byte_end":140022,"line_start":1946,"line_end":1946,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":724},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":140772,"byte_end":140783,"line_start":1981,"line_end":1981,"column_start":12,"column_end":23},"name":"VacantEntry","qualname":"::map::VacantEntry","value":"VacantEntry {  }","parent":null,"children":[{"krate":0,"index":729},{"krate":0,"index":730},{"krate":0,"index":731}],"decl_id":null,"docs":" A view into a vacant entry in a `HashMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[{"value":"/ A view into a vacant entry in a `HashMap`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":140641,"byte_end":140687,"line_start":1977,"line_end":1977,"column_start":1,"column_end":47}},{"value":"/ It is part of the [`Entry`] enum.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":140688,"byte_end":140725,"line_start":1978,"line_end":1978,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":140726,"byte_end":140729,"line_start":1979,"line_end":1979,"column_start":1,"column_end":4}},{"value":"/ [`Entry`]: enum.Entry.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":140730,"byte_end":140760,"line_start":1980,"line_end":1980,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":878},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":148363,"byte_end":148369,"line_start":2259,"line_end":2259,"column_start":12,"column_end":18},"name":"insert","qualname":"<Entry>::insert","value":"fn (self, value: V) -> OccupiedEntry<'a, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns an OccupiedEntry.","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns an OccupiedEntry.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":147971,"byte_end":148033,"line_start":2246,"line_end":2246,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":148038,"byte_end":148041,"line_start":2247,"line_end":2247,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":148046,"byte_end":148060,"line_start":2248,"line_end":2248,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":148065,"byte_end":148068,"line_start":2249,"line_end":2249,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":148073,"byte_end":148080,"line_start":2250,"line_end":2250,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":148085,"byte_end":148112,"line_start":2251,"line_end":2251,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":148117,"byte_end":148120,"line_start":2252,"line_end":2252,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":148125,"byte_end":148178,"line_start":2253,"line_end":2253,"column_start":5,"column_end":58}},{"value":"/ let entry = map.entry(\"horseyland\").insert(37);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":148183,"byte_end":148234,"line_start":2254,"line_end":2254,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":148239,"byte_end":148242,"line_start":2255,"line_end":2255,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(entry.key(), &\"horseyland\");","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":148247,"byte_end":148290,"line_start":2256,"line_end":2256,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":148295,"byte_end":148302,"line_start":2257,"line_end":2257,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":879},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":149245,"byte_end":149254,"line_start":2290,"line_end":2290,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<Entry>::or_insert","value":"fn (self, default: V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default if empty, and returns\n a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default if empty, and returns","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":148695,"byte_end":148777,"line_start":2273,"line_end":2273,"column_start":5,"column_end":87}},{"value":"/ a mutable reference to the value in the entry.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":148782,"byte_end":148832,"line_start":2274,"line_end":2274,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":148837,"byte_end":148840,"line_start":2275,"line_end":2275,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":148845,"byte_end":148859,"line_start":2276,"line_end":2276,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":148864,"byte_end":148867,"line_start":2277,"line_end":2277,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":148872,"byte_end":148879,"line_start":2278,"line_end":2278,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":148884,"byte_end":148911,"line_start":2279,"line_end":2279,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":148916,"byte_end":148919,"line_start":2280,"line_end":2280,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":148924,"byte_end":148977,"line_start":2281,"line_end":2281,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":148982,"byte_end":148985,"line_start":2282,"line_end":2282,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\").or_insert(3);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":148990,"byte_end":149030,"line_start":2283,"line_end":2283,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(map[\"poneyland\"], 3);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":149035,"byte_end":149071,"line_start":2284,"line_end":2284,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":149076,"byte_end":149079,"line_start":2285,"line_end":2285,"column_start":5,"column_end":8}},{"value":"/ *map.entry(\"poneyland\").or_insert(10) *= 2;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":149084,"byte_end":149131,"line_start":2286,"line_end":2286,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(map[\"poneyland\"], 6);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":149136,"byte_end":149172,"line_start":2287,"line_end":2287,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":149177,"byte_end":149184,"line_start":2288,"line_end":2288,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":880},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":150044,"byte_end":150058,"line_start":2317,"line_end":2317,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<Entry>::or_insert_with","value":"fn <F> (self, default: F) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the result of the default function if empty,\n and returns a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the result of the default function if empty,","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":149500,"byte_end":149593,"line_start":2301,"line_end":2301,"column_start":5,"column_end":98}},{"value":"/ and returns a mutable reference to the value in the entry.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":149598,"byte_end":149660,"line_start":2302,"line_end":2302,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":149665,"byte_end":149668,"line_start":2303,"line_end":2303,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":149673,"byte_end":149687,"line_start":2304,"line_end":2304,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":149692,"byte_end":149695,"line_start":2305,"line_end":2305,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":149700,"byte_end":149707,"line_start":2306,"line_end":2306,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":149712,"byte_end":149739,"line_start":2307,"line_end":2307,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":149744,"byte_end":149747,"line_start":2308,"line_end":2308,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, String> = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":149752,"byte_end":149808,"line_start":2309,"line_end":2309,"column_start":5,"column_end":61}},{"value":"/ let s = \"hoho\".to_string();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":149813,"byte_end":149844,"line_start":2310,"line_end":2310,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":149849,"byte_end":149852,"line_start":2311,"line_end":2311,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\").or_insert_with(|| s);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":149857,"byte_end":149905,"line_start":2312,"line_end":2312,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":149910,"byte_end":149913,"line_start":2313,"line_end":2313,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], \"hoho\".to_string());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":149918,"byte_end":149971,"line_start":2314,"line_end":2314,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":149976,"byte_end":149983,"line_start":2315,"line_end":2315,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":882},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":150886,"byte_end":150904,"line_start":2344,"line_end":2344,"column_start":12,"column_end":30},"name":"or_insert_with_key","qualname":"<Entry>::or_insert_with_key","value":"fn <F> (self, default: F) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting, if empty, the result of the default function,\n which takes the key as its argument, and returns a mutable reference to the value in the\n entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting, if empty, the result of the default function,","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":150324,"byte_end":150419,"line_start":2328,"line_end":2328,"column_start":5,"column_end":100}},{"value":"/ which takes the key as its argument, and returns a mutable reference to the value in the","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":150424,"byte_end":150516,"line_start":2329,"line_end":2329,"column_start":5,"column_end":97}},{"value":"/ entry.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":150521,"byte_end":150531,"line_start":2330,"line_end":2330,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":150536,"byte_end":150539,"line_start":2331,"line_end":2331,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":150544,"byte_end":150558,"line_start":2332,"line_end":2332,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":150563,"byte_end":150566,"line_start":2333,"line_end":2333,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":150571,"byte_end":150578,"line_start":2334,"line_end":2334,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":150583,"byte_end":150610,"line_start":2335,"line_end":2335,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":150615,"byte_end":150618,"line_start":2336,"line_end":2336,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, usize> = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":150623,"byte_end":150678,"line_start":2337,"line_end":2337,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":150683,"byte_end":150686,"line_start":2338,"line_end":2338,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\").or_insert_with_key(|key| key.chars().count());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":150691,"byte_end":150764,"line_start":2339,"line_end":2339,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":150769,"byte_end":150772,"line_start":2340,"line_end":2340,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 9);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":150777,"byte_end":150813,"line_start":2341,"line_end":2341,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":150818,"byte_end":150825,"line_start":2342,"line_end":2342,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":884},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":151575,"byte_end":151578,"line_start":2369,"line_end":2369,"column_start":12,"column_end":15},"name":"key","qualname":"<Entry>::key","value":"fn (&self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to this entry's key.","sig":null,"attributes":[{"value":"/ Returns a reference to this entry's key.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":151249,"byte_end":151293,"line_start":2358,"line_end":2358,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":151298,"byte_end":151301,"line_start":2359,"line_end":2359,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":151306,"byte_end":151320,"line_start":2360,"line_end":2360,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":151325,"byte_end":151328,"line_start":2361,"line_end":2361,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":151333,"byte_end":151340,"line_start":2362,"line_end":2362,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":151345,"byte_end":151372,"line_start":2363,"line_end":2363,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":151377,"byte_end":151380,"line_start":2364,"line_end":2364,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":151385,"byte_end":151438,"line_start":2365,"line_end":2365,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":151443,"byte_end":151502,"line_start":2366,"line_end":2366,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":151507,"byte_end":151514,"line_start":2367,"line_end":2367,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":885},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":152367,"byte_end":152377,"line_start":2397,"line_end":2397,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<Entry>::and_modify","value":"fn <F> (self, f: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Provides in-place mutable access to an occupied entry before any\n potential inserts into the map.","sig":null,"attributes":[{"value":"/ Provides in-place mutable access to an occupied entry before any","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":151745,"byte_end":151813,"line_start":2376,"line_end":2376,"column_start":5,"column_end":73}},{"value":"/ potential inserts into the map.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":151818,"byte_end":151853,"line_start":2377,"line_end":2377,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":151858,"byte_end":151861,"line_start":2378,"line_end":2378,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":151866,"byte_end":151880,"line_start":2379,"line_end":2379,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":151885,"byte_end":151888,"line_start":2380,"line_end":2380,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":151893,"byte_end":151900,"line_start":2381,"line_end":2381,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":151905,"byte_end":151932,"line_start":2382,"line_end":2382,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":151937,"byte_end":151940,"line_start":2383,"line_end":2383,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":151945,"byte_end":151998,"line_start":2384,"line_end":2384,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":152003,"byte_end":152006,"line_start":2385,"line_end":2385,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\")","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":152011,"byte_end":152037,"line_start":2386,"line_end":2386,"column_start":5,"column_end":31}},{"value":"/    .and_modify(|e| { *e += 1 })","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":152042,"byte_end":152077,"line_start":2387,"line_end":2387,"column_start":5,"column_end":40}},{"value":"/    .or_insert(42);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":152082,"byte_end":152104,"line_start":2388,"line_end":2388,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(map[\"poneyland\"], 42);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":152109,"byte_end":152146,"line_start":2389,"line_end":2389,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":152151,"byte_end":152154,"line_start":2390,"line_end":2390,"column_start":5,"column_end":8}},{"value":"/ map.entry(\"poneyland\")","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":152159,"byte_end":152185,"line_start":2391,"line_end":2391,"column_start":5,"column_end":31}},{"value":"/    .and_modify(|e| { *e += 1 })","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":152190,"byte_end":152225,"line_start":2392,"line_end":2392,"column_start":5,"column_end":40}},{"value":"/    .or_insert(42);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":152230,"byte_end":152252,"line_start":2393,"line_end":2393,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(map[\"poneyland\"], 43);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":152257,"byte_end":152294,"line_start":2394,"line_end":2394,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":152299,"byte_end":152306,"line_start":2395,"line_end":2395,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":892},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":153193,"byte_end":153203,"line_start":2426,"line_end":2426,"column_start":12,"column_end":22},"name":"or_default","qualname":"<Entry>::or_default","value":"fn (self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default value if empty,\n and returns a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Ensures a value is in the entry by inserting the default value if empty,","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":152727,"byte_end":152803,"line_start":2412,"line_end":2412,"column_start":5,"column_end":81}},{"value":"/ and returns a mutable reference to the value in the entry.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":152808,"byte_end":152870,"line_start":2413,"line_end":2413,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":152875,"byte_end":152878,"line_start":2414,"line_end":2414,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":152883,"byte_end":152897,"line_start":2415,"line_end":2415,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":152902,"byte_end":152905,"line_start":2416,"line_end":2416,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":152910,"byte_end":152917,"line_start":2417,"line_end":2417,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":152922,"byte_end":152949,"line_start":2418,"line_end":2418,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":152954,"byte_end":152957,"line_start":2419,"line_end":2419,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, Option<u32>> = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":152962,"byte_end":153023,"line_start":2420,"line_end":2420,"column_start":5,"column_end":66}},{"value":"/ map.entry(\"poneyland\").or_default();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":153028,"byte_end":153068,"line_start":2421,"line_end":2421,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":153073,"byte_end":153076,"line_start":2422,"line_end":2422,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], None);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":153081,"byte_end":153120,"line_start":2423,"line_end":2423,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":153125,"byte_end":153132,"line_start":2424,"line_end":2424,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":898},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":153870,"byte_end":153873,"line_start":2451,"line_end":2451,"column_start":12,"column_end":15},"name":"key","qualname":"<OccupiedEntry>::key","value":"fn (&self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key in the entry.","sig":null,"attributes":[{"value":"/ Gets a reference to the key in the entry.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":153497,"byte_end":153542,"line_start":2439,"line_end":2439,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":153547,"byte_end":153550,"line_start":2440,"line_end":2440,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":153555,"byte_end":153569,"line_start":2441,"line_end":2441,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":153574,"byte_end":153577,"line_start":2442,"line_end":2442,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":153582,"byte_end":153589,"line_start":2443,"line_end":2443,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":153594,"byte_end":153621,"line_start":2444,"line_end":2444,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":153626,"byte_end":153629,"line_start":2445,"line_end":2445,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":153634,"byte_end":153687,"line_start":2446,"line_end":2446,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":153692,"byte_end":153733,"line_start":2447,"line_end":2447,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":153738,"byte_end":153797,"line_start":2448,"line_end":2448,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":153802,"byte_end":153809,"line_start":2449,"line_end":2449,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":899},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":154526,"byte_end":154538,"line_start":2474,"line_end":2474,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<OccupiedEntry>::remove_entry","value":"fn (self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Take the ownership of the key and value from the map.","sig":null,"attributes":[{"value":"/ Take the ownership of the key and value from the map.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":153941,"byte_end":153998,"line_start":2455,"line_end":2455,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":154003,"byte_end":154006,"line_start":2456,"line_end":2456,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":154011,"byte_end":154025,"line_start":2457,"line_end":2457,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":154030,"byte_end":154033,"line_start":2458,"line_end":2458,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":154038,"byte_end":154045,"line_start":2459,"line_end":2459,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":154050,"byte_end":154077,"line_start":2460,"line_end":2460,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":154082,"byte_end":154117,"line_start":2461,"line_end":2461,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":154122,"byte_end":154125,"line_start":2462,"line_end":2462,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":154130,"byte_end":154183,"line_start":2463,"line_end":2463,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":154188,"byte_end":154229,"line_start":2464,"line_end":2464,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":154234,"byte_end":154237,"line_start":2465,"line_end":2465,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":154242,"byte_end":154298,"line_start":2466,"line_end":2466,"column_start":5,"column_end":61}},{"value":"/     // We delete the entry from the map.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":154303,"byte_end":154347,"line_start":2467,"line_end":2467,"column_start":5,"column_end":49}},{"value":"/     o.remove_entry();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":154352,"byte_end":154377,"line_start":2468,"line_end":2468,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":154382,"byte_end":154387,"line_start":2469,"line_end":2469,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":154392,"byte_end":154395,"line_start":2470,"line_end":2470,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map.contains_key(\"poneyland\"), false);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":154400,"byte_end":154453,"line_start":2471,"line_end":2471,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":154458,"byte_end":154465,"line_start":2472,"line_end":2472,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":900},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":155090,"byte_end":155093,"line_start":2494,"line_end":2494,"column_start":12,"column_end":15},"name":"get","qualname":"<OccupiedEntry>::get","value":"fn (&self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Gets a reference to the value in the entry.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":154622,"byte_end":154669,"line_start":2478,"line_end":2478,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":154674,"byte_end":154677,"line_start":2479,"line_end":2479,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":154682,"byte_end":154696,"line_start":2480,"line_end":2480,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":154701,"byte_end":154704,"line_start":2481,"line_end":2481,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":154709,"byte_end":154716,"line_start":2482,"line_end":2482,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":154721,"byte_end":154748,"line_start":2483,"line_end":2483,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":154753,"byte_end":154788,"line_start":2484,"line_end":2484,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":154793,"byte_end":154796,"line_start":2485,"line_end":2485,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":154801,"byte_end":154854,"line_start":2486,"line_end":2486,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":154859,"byte_end":154900,"line_start":2487,"line_end":2487,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":154905,"byte_end":154908,"line_start":2488,"line_end":2488,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":154913,"byte_end":154969,"line_start":2489,"line_end":2489,"column_start":5,"column_end":61}},{"value":"/     assert_eq!(o.get(), &12);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":154974,"byte_end":155007,"line_start":2490,"line_end":2490,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":155012,"byte_end":155017,"line_start":2491,"line_end":2491,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":155022,"byte_end":155029,"line_start":2492,"line_end":2492,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":901},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":156053,"byte_end":156060,"line_start":2526,"line_end":2526,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<OccupiedEntry>::get_mut","value":"fn (&mut self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the value in the entry.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":155161,"byte_end":155216,"line_start":2498,"line_end":2498,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":155221,"byte_end":155224,"line_start":2499,"line_end":2499,"column_start":5,"column_end":8}},{"value":"/ If you need a reference to the `OccupiedEntry` which may outlive the","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":155229,"byte_end":155301,"line_start":2500,"line_end":2500,"column_start":5,"column_end":77}},{"value":"/ destruction of the `Entry` value, see [`into_mut`].","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":155306,"byte_end":155361,"line_start":2501,"line_end":2501,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":155366,"byte_end":155369,"line_start":2502,"line_end":2502,"column_start":5,"column_end":8}},{"value":"/ [`into_mut`]: #method.into_mut","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":155374,"byte_end":155408,"line_start":2503,"line_end":2503,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":155413,"byte_end":155416,"line_start":2504,"line_end":2504,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":155421,"byte_end":155435,"line_start":2505,"line_end":2505,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":155440,"byte_end":155443,"line_start":2506,"line_end":2506,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":155448,"byte_end":155455,"line_start":2507,"line_end":2507,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":155460,"byte_end":155487,"line_start":2508,"line_end":2508,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":155492,"byte_end":155527,"line_start":2509,"line_end":2509,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":155532,"byte_end":155535,"line_start":2510,"line_end":2510,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":155540,"byte_end":155593,"line_start":2511,"line_end":2511,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":155598,"byte_end":155639,"line_start":2512,"line_end":2512,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":155644,"byte_end":155647,"line_start":2513,"line_end":2513,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 12);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":155652,"byte_end":155689,"line_start":2514,"line_end":2514,"column_start":5,"column_end":42}},{"value":"/ if let Entry::Occupied(mut o) = map.entry(\"poneyland\") {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":155694,"byte_end":155754,"line_start":2515,"line_end":2515,"column_start":5,"column_end":65}},{"value":"/     *o.get_mut() += 10;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":155759,"byte_end":155786,"line_start":2516,"line_end":2516,"column_start":5,"column_end":32}},{"value":"/     assert_eq!(*o.get(), 22);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":155791,"byte_end":155824,"line_start":2517,"line_end":2517,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":155829,"byte_end":155832,"line_start":2518,"line_end":2518,"column_start":5,"column_end":8}},{"value":"/     // We can use the same Entry multiple times.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":155837,"byte_end":155889,"line_start":2519,"line_end":2519,"column_start":5,"column_end":57}},{"value":"/     *o.get_mut() += 2;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":155894,"byte_end":155920,"line_start":2520,"line_end":2520,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":155925,"byte_end":155930,"line_start":2521,"line_end":2521,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":155935,"byte_end":155938,"line_start":2522,"line_end":2522,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 24);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":155943,"byte_end":155980,"line_start":2523,"line_end":2523,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":155985,"byte_end":155992,"line_start":2524,"line_end":2524,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":902},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":156912,"byte_end":156920,"line_start":2554,"line_end":2554,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<OccupiedEntry>::into_mut","value":"fn (self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntry into a mutable reference to the value in the entry\n with a lifetime bound to the map itself.","sig":null,"attributes":[{"value":"/ Converts the OccupiedEntry into a mutable reference to the value in the entry","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":156140,"byte_end":156221,"line_start":2530,"line_end":2530,"column_start":5,"column_end":86}},{"value":"/ with a lifetime bound to the map itself.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":156226,"byte_end":156270,"line_start":2531,"line_end":2531,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":156275,"byte_end":156278,"line_start":2532,"line_end":2532,"column_start":5,"column_end":8}},{"value":"/ If you need multiple references to the `OccupiedEntry`, see [`get_mut`].","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":156283,"byte_end":156359,"line_start":2533,"line_end":2533,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":156364,"byte_end":156367,"line_start":2534,"line_end":2534,"column_start":5,"column_end":8}},{"value":"/ [`get_mut`]: #method.get_mut","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":156372,"byte_end":156404,"line_start":2535,"line_end":2535,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":156409,"byte_end":156412,"line_start":2536,"line_end":2536,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":156417,"byte_end":156431,"line_start":2537,"line_end":2537,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":156436,"byte_end":156439,"line_start":2538,"line_end":2538,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":156444,"byte_end":156451,"line_start":2539,"line_end":2539,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":156456,"byte_end":156483,"line_start":2540,"line_end":2540,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":156488,"byte_end":156523,"line_start":2541,"line_end":2541,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":156528,"byte_end":156531,"line_start":2542,"line_end":2542,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":156536,"byte_end":156589,"line_start":2543,"line_end":2543,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":156594,"byte_end":156635,"line_start":2544,"line_end":2544,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":156640,"byte_end":156643,"line_start":2545,"line_end":2545,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 12);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":156648,"byte_end":156685,"line_start":2546,"line_end":2546,"column_start":5,"column_end":42}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":156690,"byte_end":156746,"line_start":2547,"line_end":2547,"column_start":5,"column_end":61}},{"value":"/     *o.into_mut() += 10;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":156751,"byte_end":156779,"line_start":2548,"line_end":2548,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":156784,"byte_end":156789,"line_start":2549,"line_end":2549,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":156794,"byte_end":156797,"line_start":2550,"line_end":2550,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 22);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":156802,"byte_end":156839,"line_start":2551,"line_end":2551,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":156844,"byte_end":156851,"line_start":2552,"line_end":2552,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":903},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":157544,"byte_end":157550,"line_start":2576,"line_end":2576,"column_start":12,"column_end":18},"name":"insert","qualname":"<OccupiedEntry>::insert","value":"fn (&mut self, mut value: V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns the entry's old value.","sig":null,"attributes":[{"value":"/ Sets the value of the entry, and returns the entry's old value.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":156998,"byte_end":157065,"line_start":2558,"line_end":2558,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":157070,"byte_end":157073,"line_start":2559,"line_end":2559,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":157078,"byte_end":157092,"line_start":2560,"line_end":2560,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":157097,"byte_end":157100,"line_start":2561,"line_end":2561,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":157105,"byte_end":157112,"line_start":2562,"line_end":2562,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":157117,"byte_end":157144,"line_start":2563,"line_end":2563,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":157149,"byte_end":157184,"line_start":2564,"line_end":2564,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":157189,"byte_end":157192,"line_start":2565,"line_end":2565,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":157197,"byte_end":157250,"line_start":2566,"line_end":2566,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":157255,"byte_end":157296,"line_start":2567,"line_end":2567,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":157301,"byte_end":157304,"line_start":2568,"line_end":2568,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(mut o) = map.entry(\"poneyland\") {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":157309,"byte_end":157369,"line_start":2569,"line_end":2569,"column_start":5,"column_end":65}},{"value":"/     assert_eq!(o.insert(15), 12);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":157374,"byte_end":157411,"line_start":2570,"line_end":2570,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":157416,"byte_end":157421,"line_start":2571,"line_end":2571,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":157426,"byte_end":157429,"line_start":2572,"line_end":2572,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map[\"poneyland\"], 15);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":157434,"byte_end":157471,"line_start":2573,"line_end":2573,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":157476,"byte_end":157483,"line_start":2574,"line_end":2574,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":904},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":158232,"byte_end":158238,"line_start":2600,"line_end":2600,"column_start":12,"column_end":18},"name":"remove","qualname":"<OccupiedEntry>::remove","value":"fn (self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Takes the value out of the entry, and returns it.","sig":null,"attributes":[{"value":"/ Takes the value out of the entry, and returns it.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":157690,"byte_end":157743,"line_start":2582,"line_end":2582,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":157748,"byte_end":157751,"line_start":2583,"line_end":2583,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":157756,"byte_end":157770,"line_start":2584,"line_end":2584,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":157775,"byte_end":157778,"line_start":2585,"line_end":2585,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":157783,"byte_end":157790,"line_start":2586,"line_end":2586,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":157795,"byte_end":157822,"line_start":2587,"line_end":2587,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":157827,"byte_end":157862,"line_start":2588,"line_end":2588,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":157867,"byte_end":157870,"line_start":2589,"line_end":2589,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":157875,"byte_end":157928,"line_start":2590,"line_end":2590,"column_start":5,"column_end":58}},{"value":"/ map.entry(\"poneyland\").or_insert(12);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":157933,"byte_end":157974,"line_start":2591,"line_end":2591,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":157979,"byte_end":157982,"line_start":2592,"line_end":2592,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(o) = map.entry(\"poneyland\") {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":157987,"byte_end":158043,"line_start":2593,"line_end":2593,"column_start":5,"column_end":61}},{"value":"/     assert_eq!(o.remove(), 12);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":158048,"byte_end":158083,"line_start":2594,"line_end":2594,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":158088,"byte_end":158093,"line_start":2595,"line_end":2595,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":158098,"byte_end":158101,"line_start":2596,"line_end":2596,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(map.contains_key(\"poneyland\"), false);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":158106,"byte_end":158159,"line_start":2597,"line_end":2597,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":158164,"byte_end":158171,"line_start":2598,"line_end":2598,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":905},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":159058,"byte_end":159071,"line_start":2625,"line_end":2625,"column_start":12,"column_end":25},"name":"replace_entry","qualname":"<OccupiedEntry>::replace_entry","value":"fn (self, value: V) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Replaces the entry, returning the old key and value. The new key in the hash map will be\n the key used to create this entry.","sig":null,"attributes":[{"value":"/ Replaces the entry, returning the old key and value. The new key in the hash map will be","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":158293,"byte_end":158385,"line_start":2604,"line_end":2604,"column_start":5,"column_end":97}},{"value":"/ the key used to create this entry.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":158390,"byte_end":158428,"line_start":2605,"line_end":2605,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":158433,"byte_end":158436,"line_start":2606,"line_end":2606,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":158441,"byte_end":158455,"line_start":2607,"line_end":2607,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":158460,"byte_end":158463,"line_start":2608,"line_end":2608,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":158468,"byte_end":158475,"line_start":2609,"line_end":2609,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::hash_map::{Entry, HashMap};","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":158480,"byte_end":158526,"line_start":2610,"line_end":2610,"column_start":5,"column_end":51}},{"value":"/ use std::rc::Rc;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":158531,"byte_end":158551,"line_start":2611,"line_end":2611,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":158556,"byte_end":158559,"line_start":2612,"line_end":2612,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<Rc<String>, u32> = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":158564,"byte_end":158623,"line_start":2613,"line_end":2613,"column_start":5,"column_end":64}},{"value":"/ map.insert(Rc::new(\"Stringthing\".to_string()), 15);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":158628,"byte_end":158683,"line_start":2614,"line_end":2614,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":158688,"byte_end":158691,"line_start":2615,"line_end":2615,"column_start":5,"column_end":8}},{"value":"/ let my_key = Rc::new(\"Stringthing\".to_string());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":158696,"byte_end":158748,"line_start":2616,"line_end":2616,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":158753,"byte_end":158756,"line_start":2617,"line_end":2617,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Occupied(entry) = map.entry(my_key) {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":158761,"byte_end":158816,"line_start":2618,"line_end":2618,"column_start":5,"column_end":60}},{"value":"/     // Also replace the key with a handle to our other key.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":158821,"byte_end":158884,"line_start":2619,"line_end":2619,"column_start":5,"column_end":68}},{"value":"/     let (old_key, old_value): (Rc<String>, u32) = entry.replace_entry(16);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":158889,"byte_end":158967,"line_start":2620,"line_end":2620,"column_start":5,"column_end":83}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":158972,"byte_end":158977,"line_start":2621,"line_end":2621,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":158982,"byte_end":158985,"line_start":2622,"line_end":2622,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":158990,"byte_end":158997,"line_start":2623,"line_end":2623,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":906},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":160232,"byte_end":160243,"line_start":2659,"line_end":2659,"column_start":12,"column_end":23},"name":"replace_key","qualname":"<OccupiedEntry>::replace_key","value":"fn (self) -> K","parent":null,"children":[],"decl_id":null,"docs":" Replaces the key in the hash map with the key used to create this entry.","sig":null,"attributes":[{"value":"/ Replaces the key in the hash map with the key used to create this entry.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":159321,"byte_end":159397,"line_start":2634,"line_end":2634,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":159402,"byte_end":159405,"line_start":2635,"line_end":2635,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":159410,"byte_end":159424,"line_start":2636,"line_end":2636,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":159429,"byte_end":159432,"line_start":2637,"line_end":2637,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":159437,"byte_end":159444,"line_start":2638,"line_end":2638,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::hash_map::{Entry, HashMap};","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":159449,"byte_end":159495,"line_start":2639,"line_end":2639,"column_start":5,"column_end":51}},{"value":"/ use std::rc::Rc;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":159500,"byte_end":159520,"line_start":2640,"line_end":2640,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":159525,"byte_end":159528,"line_start":2641,"line_end":2641,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<Rc<String>, u32> = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":159533,"byte_end":159592,"line_start":2642,"line_end":2642,"column_start":5,"column_end":64}},{"value":"/ let mut known_strings: Vec<Rc<String>> = Vec::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":159597,"byte_end":159653,"line_start":2643,"line_end":2643,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":159658,"byte_end":159661,"line_start":2644,"line_end":2644,"column_start":5,"column_end":8}},{"value":"/ // Initialise known strings, run program, etc.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":159666,"byte_end":159716,"line_start":2645,"line_end":2645,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":159721,"byte_end":159724,"line_start":2646,"line_end":2646,"column_start":5,"column_end":8}},{"value":"/ reclaim_memory(&mut map, &known_strings);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":159729,"byte_end":159774,"line_start":2647,"line_end":2647,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":159779,"byte_end":159782,"line_start":2648,"line_end":2648,"column_start":5,"column_end":8}},{"value":"/ fn reclaim_memory(map: &mut HashMap<Rc<String>, u32>, known_strings: &[Rc<String>] ) {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":159787,"byte_end":159877,"line_start":2649,"line_end":2649,"column_start":5,"column_end":95}},{"value":"/     for s in known_strings {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":159882,"byte_end":159914,"line_start":2650,"line_end":2650,"column_start":5,"column_end":37}},{"value":"/         if let Entry::Occupied(entry) = map.entry(s.clone()) {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":159919,"byte_end":159985,"line_start":2651,"line_end":2651,"column_start":5,"column_end":71}},{"value":"/             // Replaces the entry's key with our version of it in `known_strings`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":159990,"byte_end":160076,"line_start":2652,"line_end":2652,"column_start":5,"column_end":91}},{"value":"/             entry.replace_key();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":160081,"byte_end":160117,"line_start":2653,"line_end":2653,"column_start":5,"column_end":41}},{"value":"/         }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":160122,"byte_end":160135,"line_start":2654,"line_end":2654,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":160140,"byte_end":160149,"line_start":2655,"line_end":2655,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":160154,"byte_end":160159,"line_start":2656,"line_end":2656,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":160164,"byte_end":160171,"line_start":2657,"line_end":2657,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":912},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":160810,"byte_end":160813,"line_start":2678,"line_end":2678,"column_start":12,"column_end":15},"name":"key","qualname":"<VacantEntry>::key","value":"fn (&self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key that would be used when inserting a value\n through the `VacantEntry`.","sig":null,"attributes":[{"value":"/ Gets a reference to the key that would be used when inserting a value","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":160420,"byte_end":160493,"line_start":2666,"line_end":2666,"column_start":5,"column_end":78}},{"value":"/ through the `VacantEntry`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":160498,"byte_end":160528,"line_start":2667,"line_end":2667,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":160533,"byte_end":160536,"line_start":2668,"line_end":2668,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":160541,"byte_end":160555,"line_start":2669,"line_end":2669,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":160560,"byte_end":160563,"line_start":2670,"line_end":2670,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":160568,"byte_end":160575,"line_start":2671,"line_end":2671,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":160580,"byte_end":160607,"line_start":2672,"line_end":2672,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":160612,"byte_end":160615,"line_start":2673,"line_end":2673,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":160620,"byte_end":160673,"line_start":2674,"line_end":2674,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":160678,"byte_end":160737,"line_start":2675,"line_end":2675,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":160742,"byte_end":160749,"line_start":2676,"line_end":2676,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":913},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":161249,"byte_end":161257,"line_start":2697,"line_end":2697,"column_start":12,"column_end":20},"name":"into_key","qualname":"<VacantEntry>::into_key","value":"fn (self) -> K","parent":null,"children":[],"decl_id":null,"docs":" Take ownership of the key.","sig":null,"attributes":[{"value":"/ Take ownership of the key.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":160858,"byte_end":160888,"line_start":2682,"line_end":2682,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":160893,"byte_end":160896,"line_start":2683,"line_end":2683,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":160901,"byte_end":160915,"line_start":2684,"line_end":2684,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":160920,"byte_end":160923,"line_start":2685,"line_end":2685,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":160928,"byte_end":160935,"line_start":2686,"line_end":2686,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":160940,"byte_end":160967,"line_start":2687,"line_end":2687,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":160972,"byte_end":161007,"line_start":2688,"line_end":2688,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":161012,"byte_end":161015,"line_start":2689,"line_end":2689,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":161020,"byte_end":161073,"line_start":2690,"line_end":2690,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":161078,"byte_end":161081,"line_start":2691,"line_end":2691,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Vacant(v) = map.entry(\"poneyland\") {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":161086,"byte_end":161140,"line_start":2692,"line_end":2692,"column_start":5,"column_end":59}},{"value":"/     v.into_key();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":161145,"byte_end":161166,"line_start":2693,"line_end":2693,"column_start":5,"column_end":26}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":161171,"byte_end":161176,"line_start":2694,"line_end":2694,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":161181,"byte_end":161188,"line_start":2695,"line_end":2695,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":914},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":161808,"byte_end":161814,"line_start":2718,"line_end":2718,"column_start":12,"column_end":18},"name":"insert","qualname":"<VacantEntry>::insert","value":"fn (self, value: V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the VacantEntry's key,\n and returns a mutable reference to it.","sig":null,"attributes":[{"value":"/ Sets the value of the entry with the VacantEntry's key,","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":161299,"byte_end":161358,"line_start":2701,"line_end":2701,"column_start":5,"column_end":64}},{"value":"/ and returns a mutable reference to it.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":161363,"byte_end":161405,"line_start":2702,"line_end":2702,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":161410,"byte_end":161413,"line_start":2703,"line_end":2703,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":161418,"byte_end":161432,"line_start":2704,"line_end":2704,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":161437,"byte_end":161440,"line_start":2705,"line_end":2705,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":161445,"byte_end":161452,"line_start":2706,"line_end":2706,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashMap;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":161457,"byte_end":161484,"line_start":2707,"line_end":2707,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::Entry;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":161489,"byte_end":161524,"line_start":2708,"line_end":2708,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":161529,"byte_end":161532,"line_start":2709,"line_end":2709,"column_start":5,"column_end":8}},{"value":"/ let mut map: HashMap<&str, u32> = HashMap::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":161537,"byte_end":161590,"line_start":2710,"line_end":2710,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":161595,"byte_end":161598,"line_start":2711,"line_end":2711,"column_start":5,"column_end":8}},{"value":"/ if let Entry::Vacant(o) = map.entry(\"poneyland\") {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":161603,"byte_end":161657,"line_start":2712,"line_end":2712,"column_start":5,"column_end":59}},{"value":"/     o.insert(37);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":161662,"byte_end":161683,"line_start":2713,"line_end":2713,"column_start":5,"column_end":26}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":161688,"byte_end":161693,"line_start":2714,"line_end":2714,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[\"poneyland\"], 37);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":161698,"byte_end":161735,"line_start":2715,"line_end":2715,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":161740,"byte_end":161747,"line_start":2716,"line_end":2716,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1019},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":203833,"byte_end":203840,"line_start":116,"line_end":116,"column_start":12,"column_end":19},"name":"HashSet","qualname":"::set::HashSet","value":"HashSet {  }","parent":null,"children":[{"krate":0,"index":1022}],"decl_id":null,"docs":" A hash set implemented as a `HashMap` where the value is `()`.","sig":null,"attributes":[{"value":"/ A hash set implemented as a `HashMap` where the value is `()`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":200439,"byte_end":200505,"line_start":19,"line_end":19,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":200506,"byte_end":200509,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ As with the [`HashMap`] type, a `HashSet` requires that the elements","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":200510,"byte_end":200582,"line_start":21,"line_end":21,"column_start":1,"column_end":73}},{"value":"/ implement the [`Eq`] and [`Hash`] traits. This can frequently be achieved by","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":200583,"byte_end":200663,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/ using `#[derive(PartialEq, Eq, Hash)]`. If you implement these yourself,","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":200664,"byte_end":200740,"line_start":23,"line_end":23,"column_start":1,"column_end":77}},{"value":"/ it is important that the following property holds:","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":200741,"byte_end":200795,"line_start":24,"line_end":24,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":200796,"byte_end":200799,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":200800,"byte_end":200811,"line_start":26,"line_end":26,"column_start":1,"column_end":12}},{"value":"/ k1 == k2 -> hash(k1) == hash(k2)","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":200812,"byte_end":200848,"line_start":27,"line_end":27,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":200849,"byte_end":200856,"line_start":28,"line_end":28,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":200857,"byte_end":200860,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ In other words, if two keys are equal, their hashes must be equal.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":200861,"byte_end":200931,"line_start":30,"line_end":30,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":200932,"byte_end":200935,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":200936,"byte_end":200939,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ It is a logic error for an item to be modified in such a way that the","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":200940,"byte_end":201013,"line_start":33,"line_end":33,"column_start":1,"column_end":74}},{"value":"/ item's hash, as determined by the [`Hash`] trait, or its equality, as","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":201014,"byte_end":201087,"line_start":34,"line_end":34,"column_start":1,"column_end":74}},{"value":"/ determined by the [`Eq`] trait, changes while it is in the set. This is","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":201088,"byte_end":201163,"line_start":35,"line_end":35,"column_start":1,"column_end":76}},{"value":"/ normally only possible through [`Cell`], [`RefCell`], global state, I/O, or","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":201164,"byte_end":201243,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"/ unsafe code.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":201244,"byte_end":201260,"line_start":37,"line_end":37,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":201261,"byte_end":201264,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ It is also a logic error for the [`Hash`] implementation of a key to panic.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":201265,"byte_end":201344,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"/ This is generally only possible if the trait is implemented manually. If a","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":201345,"byte_end":201423,"line_start":40,"line_end":40,"column_start":1,"column_end":79}},{"value":"/ panic does occur then the contents of the `HashSet` may become corrupted and","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":201424,"byte_end":201504,"line_start":41,"line_end":41,"column_start":1,"column_end":81}},{"value":"/ some items may be dropped from the table.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":201505,"byte_end":201550,"line_start":42,"line_end":42,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":201551,"byte_end":201554,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":201555,"byte_end":201569,"line_start":44,"line_end":44,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":201570,"byte_end":201573,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":201574,"byte_end":201581,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":201582,"byte_end":201609,"line_start":47,"line_end":47,"column_start":1,"column_end":28}},{"value":"/ // Type inference lets us omit an explicit type signature (which","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":201610,"byte_end":201678,"line_start":48,"line_end":48,"column_start":1,"column_end":69}},{"value":"/ // would be `HashSet<String>` in this example).","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":201679,"byte_end":201730,"line_start":49,"line_end":49,"column_start":1,"column_end":52}},{"value":"/ let mut books = HashSet::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":201731,"byte_end":201766,"line_start":50,"line_end":50,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":201767,"byte_end":201770,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ // Add some books.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":201771,"byte_end":201793,"line_start":52,"line_end":52,"column_start":1,"column_end":23}},{"value":"/ books.insert(\"A Dance With Dragons\".to_string());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":201794,"byte_end":201847,"line_start":53,"line_end":53,"column_start":1,"column_end":54}},{"value":"/ books.insert(\"To Kill a Mockingbird\".to_string());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":201848,"byte_end":201902,"line_start":54,"line_end":54,"column_start":1,"column_end":55}},{"value":"/ books.insert(\"The Odyssey\".to_string());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":201903,"byte_end":201947,"line_start":55,"line_end":55,"column_start":1,"column_end":45}},{"value":"/ books.insert(\"The Great Gatsby\".to_string());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":201948,"byte_end":201997,"line_start":56,"line_end":56,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":201998,"byte_end":202001,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ // Check for a specific one.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":202002,"byte_end":202034,"line_start":58,"line_end":58,"column_start":1,"column_end":33}},{"value":"/ if !books.contains(\"The Winds of Winter\") {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":202035,"byte_end":202082,"line_start":59,"line_end":59,"column_start":1,"column_end":48}},{"value":"/     println!(\"We have {} books, but The Winds of Winter ain't one.\",","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":202083,"byte_end":202155,"line_start":60,"line_end":60,"column_start":1,"column_end":73}},{"value":"/              books.len());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":202156,"byte_end":202186,"line_start":61,"line_end":61,"column_start":1,"column_end":31}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":202187,"byte_end":202192,"line_start":62,"line_end":62,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":202193,"byte_end":202196,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ // Remove a book.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":202197,"byte_end":202218,"line_start":64,"line_end":64,"column_start":1,"column_end":22}},{"value":"/ books.remove(\"The Odyssey\");","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":202219,"byte_end":202251,"line_start":65,"line_end":65,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":202252,"byte_end":202255,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ // Iterate over everything.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":202256,"byte_end":202287,"line_start":67,"line_end":67,"column_start":1,"column_end":32}},{"value":"/ for book in &books {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":202288,"byte_end":202312,"line_start":68,"line_end":68,"column_start":1,"column_end":25}},{"value":"/     println!(\"{}\", book);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":202313,"byte_end":202342,"line_start":69,"line_end":69,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":202343,"byte_end":202348,"line_start":70,"line_end":70,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":202349,"byte_end":202356,"line_start":71,"line_end":71,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":202357,"byte_end":202360,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ The easiest way to use `HashSet` with a custom type is to derive","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":202361,"byte_end":202429,"line_start":73,"line_end":73,"column_start":1,"column_end":69}},{"value":"/ [`Eq`] and [`Hash`]. We must also derive [`PartialEq`], this will in the","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":202430,"byte_end":202506,"line_start":74,"line_end":74,"column_start":1,"column_end":77}},{"value":"/ future be implied by [`Eq`].","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":202507,"byte_end":202539,"line_start":75,"line_end":75,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":202540,"byte_end":202543,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":202544,"byte_end":202551,"line_start":77,"line_end":77,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":202552,"byte_end":202579,"line_start":78,"line_end":78,"column_start":1,"column_end":28}},{"value":"/ #[derive(Hash, Eq, PartialEq, Debug)]","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":202580,"byte_end":202621,"line_start":79,"line_end":79,"column_start":1,"column_end":42}},{"value":"/ struct Viking {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":202622,"byte_end":202641,"line_start":80,"line_end":80,"column_start":1,"column_end":20}},{"value":"/     name: String,","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":202642,"byte_end":202663,"line_start":81,"line_end":81,"column_start":1,"column_end":22}},{"value":"/     power: usize,","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":202664,"byte_end":202685,"line_start":82,"line_end":82,"column_start":1,"column_end":22}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":202686,"byte_end":202691,"line_start":83,"line_end":83,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":202692,"byte_end":202695,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ let mut vikings = HashSet::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":202696,"byte_end":202733,"line_start":85,"line_end":85,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":202734,"byte_end":202737,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ vikings.insert(Viking { name: \"Einar\".to_string(), power: 9 });","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":202738,"byte_end":202805,"line_start":87,"line_end":87,"column_start":1,"column_end":68}},{"value":"/ vikings.insert(Viking { name: \"Einar\".to_string(), power: 9 });","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":202806,"byte_end":202873,"line_start":88,"line_end":88,"column_start":1,"column_end":68}},{"value":"/ vikings.insert(Viking { name: \"Olaf\".to_string(), power: 4 });","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":202874,"byte_end":202940,"line_start":89,"line_end":89,"column_start":1,"column_end":67}},{"value":"/ vikings.insert(Viking { name: \"Harald\".to_string(), power: 8 });","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":202941,"byte_end":203009,"line_start":90,"line_end":90,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":203010,"byte_end":203013,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ // Use derived implementation to print the vikings.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":203014,"byte_end":203069,"line_start":92,"line_end":92,"column_start":1,"column_end":56}},{"value":"/ for x in &vikings {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":203070,"byte_end":203093,"line_start":93,"line_end":93,"column_start":1,"column_end":24}},{"value":"/     println!(\"{:?}\", x);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":203094,"byte_end":203122,"line_start":94,"line_end":94,"column_start":1,"column_end":29}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":203123,"byte_end":203128,"line_start":95,"line_end":95,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":203129,"byte_end":203136,"line_start":96,"line_end":96,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":203137,"byte_end":203140,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ A `HashSet` with fixed list of elements can be initialized from an array:","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":203141,"byte_end":203218,"line_start":98,"line_end":98,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":203219,"byte_end":203222,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":203223,"byte_end":203230,"line_start":100,"line_end":100,"column_start":1,"column_end":8}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":203231,"byte_end":203258,"line_start":101,"line_end":101,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":203259,"byte_end":203262,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":203263,"byte_end":203278,"line_start":103,"line_end":103,"column_start":1,"column_end":16}},{"value":"/ let viking_names: HashSet<&'static str> =","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":203279,"byte_end":203324,"line_start":104,"line_end":104,"column_start":1,"column_end":46}},{"value":"/     [ \"Einar\", \"Olaf\", \"Harald\" ].iter().cloned().collect();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":203325,"byte_end":203389,"line_start":105,"line_end":105,"column_start":1,"column_end":65}},{"value":"/ // use the values stored in the set","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":203390,"byte_end":203429,"line_start":106,"line_end":106,"column_start":1,"column_end":40}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":203430,"byte_end":203435,"line_start":107,"line_end":107,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":203436,"byte_end":203443,"line_start":108,"line_end":108,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":203444,"byte_end":203447,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ [`Cell`]: https://doc.rust-lang.org/std/cell/struct.Cell.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":203448,"byte_end":203513,"line_start":110,"line_end":110,"column_start":1,"column_end":66}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":203514,"byte_end":203573,"line_start":111,"line_end":111,"column_start":1,"column_end":60}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":203574,"byte_end":203638,"line_start":112,"line_end":112,"column_start":1,"column_end":65}},{"value":"/ [`HashMap`]: struct.HashMap.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":203639,"byte_end":203675,"line_start":113,"line_end":113,"column_start":1,"column_end":37}},{"value":"/ [`PartialEq`]: https://doc.rust-lang.org/std/cmp/trait.PartialEq.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":203676,"byte_end":203749,"line_start":114,"line_end":114,"column_start":1,"column_end":74}},{"value":"/ [`RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":203750,"byte_end":203821,"line_start":115,"line_end":115,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1031},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":205649,"byte_end":205657,"line_start":183,"line_end":183,"column_start":12,"column_end":20},"name":"capacity","qualname":"<HashSet<T, S>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the set can hold without reallocating.","sig":null,"attributes":[{"value":"/ Returns the number of elements the set can hold without reallocating.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":205323,"byte_end":205396,"line_start":173,"line_end":173,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":205401,"byte_end":205404,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":205409,"byte_end":205423,"line_start":175,"line_end":175,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":205428,"byte_end":205431,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":205436,"byte_end":205443,"line_start":177,"line_end":177,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":205448,"byte_end":205475,"line_start":178,"line_end":178,"column_start":5,"column_end":32}},{"value":"/ let set: HashSet<i32> = HashSet::with_capacity(100);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":205480,"byte_end":205536,"line_start":179,"line_end":179,"column_start":5,"column_end":61}},{"value":"/ assert!(set.capacity() >= 100);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":205541,"byte_end":205576,"line_start":180,"line_end":180,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":205581,"byte_end":205588,"line_start":181,"line_end":181,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1032},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":206182,"byte_end":206186,"line_start":204,"line_end":204,"column_start":12,"column_end":16},"name":"iter","qualname":"<HashSet<T, S>>::iter","value":"fn (&self) -> Iter<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all elements in arbitrary order.\n The iterator element type is `&'a T`.","sig":null,"attributes":[{"value":"/ An iterator visiting all elements in arbitrary order.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":205715,"byte_end":205772,"line_start":187,"line_end":187,"column_start":5,"column_end":62}},{"value":"/ The iterator element type is `&'a T`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":205777,"byte_end":205818,"line_start":188,"line_end":188,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":205823,"byte_end":205826,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":205831,"byte_end":205845,"line_start":190,"line_end":190,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":205850,"byte_end":205853,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":205858,"byte_end":205865,"line_start":192,"line_end":192,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":205870,"byte_end":205897,"line_start":193,"line_end":193,"column_start":5,"column_end":32}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":205902,"byte_end":205935,"line_start":194,"line_end":194,"column_start":5,"column_end":38}},{"value":"/ set.insert(\"a\");","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":205940,"byte_end":205960,"line_start":195,"line_end":195,"column_start":5,"column_end":25}},{"value":"/ set.insert(\"b\");","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":205965,"byte_end":205985,"line_start":196,"line_end":196,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":205990,"byte_end":205993,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ // Will print in an arbitrary order.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":205998,"byte_end":206038,"line_start":198,"line_end":198,"column_start":5,"column_end":45}},{"value":"/ for x in set.iter() {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":206043,"byte_end":206068,"line_start":199,"line_end":199,"column_start":5,"column_end":30}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":206073,"byte_end":206099,"line_start":200,"line_end":200,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":206104,"byte_end":206109,"line_start":201,"line_end":201,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":206114,"byte_end":206121,"line_start":202,"line_end":202,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1033},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":206609,"byte_end":206612,"line_start":223,"line_end":223,"column_start":12,"column_end":15},"name":"len","qualname":"<HashSet<T, S>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the set.","sig":null,"attributes":[{"value":"/ Returns the number of elements in the set.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":206282,"byte_end":206328,"line_start":210,"line_end":210,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":206333,"byte_end":206336,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":206341,"byte_end":206355,"line_start":212,"line_end":212,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":206360,"byte_end":206363,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":206368,"byte_end":206375,"line_start":214,"line_end":214,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":206380,"byte_end":206407,"line_start":215,"line_end":215,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":206412,"byte_end":206415,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ let mut v = HashSet::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":206420,"byte_end":206451,"line_start":217,"line_end":217,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(v.len(), 0);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":206456,"byte_end":206483,"line_start":218,"line_end":218,"column_start":5,"column_end":32}},{"value":"/ v.insert(1);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":206488,"byte_end":206504,"line_start":219,"line_end":219,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(v.len(), 1);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":206509,"byte_end":206536,"line_start":220,"line_end":220,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":206541,"byte_end":206548,"line_start":221,"line_end":221,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1034},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":206996,"byte_end":207004,"line_start":240,"line_end":240,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<HashSet<T, S>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains no elements.","sig":null,"attributes":[{"value":"/ Returns `true` if the set contains no elements.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":206665,"byte_end":206716,"line_start":227,"line_end":227,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":206721,"byte_end":206724,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":206729,"byte_end":206743,"line_start":229,"line_end":229,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":206748,"byte_end":206751,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":206756,"byte_end":206763,"line_start":231,"line_end":231,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":206768,"byte_end":206795,"line_start":232,"line_end":232,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":206800,"byte_end":206803,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ let mut v = HashSet::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":206808,"byte_end":206839,"line_start":234,"line_end":234,"column_start":5,"column_end":36}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":206844,"byte_end":206870,"line_start":235,"line_end":235,"column_start":5,"column_end":31}},{"value":"/ v.insert(1);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":206875,"byte_end":206891,"line_start":236,"line_end":236,"column_start":5,"column_end":21}},{"value":"/ assert!(!v.is_empty());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":206896,"byte_end":206923,"line_start":237,"line_end":237,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":206928,"byte_end":206935,"line_start":238,"line_end":238,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1035},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":207552,"byte_end":207557,"line_start":262,"line_end":262,"column_start":12,"column_end":17},"name":"drain","qualname":"<HashSet<T, S>>::drain","value":"fn (&mut self) -> Drain<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Clears the set, returning all elements in an iterator.","sig":null,"attributes":[{"value":"/ Clears the set, returning all elements in an iterator.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":207061,"byte_end":207119,"line_start":244,"line_end":244,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":207124,"byte_end":207127,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":207132,"byte_end":207146,"line_start":246,"line_end":246,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":207151,"byte_end":207154,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":207159,"byte_end":207166,"line_start":248,"line_end":248,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":207171,"byte_end":207198,"line_start":249,"line_end":249,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":207203,"byte_end":207206,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":207211,"byte_end":207277,"line_start":251,"line_end":251,"column_start":5,"column_end":71}},{"value":"/ assert!(!set.is_empty());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":207282,"byte_end":207311,"line_start":252,"line_end":252,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":207316,"byte_end":207319,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ // print 1, 2, 3 in an arbitrary order","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":207324,"byte_end":207366,"line_start":254,"line_end":254,"column_start":5,"column_end":47}},{"value":"/ for i in set.drain() {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":207371,"byte_end":207397,"line_start":255,"line_end":255,"column_start":5,"column_end":31}},{"value":"/     println!(\"{}\", i);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":207402,"byte_end":207428,"line_start":256,"line_end":256,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":207433,"byte_end":207438,"line_start":257,"line_end":257,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":207443,"byte_end":207446,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ assert!(set.is_empty());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":207451,"byte_end":207479,"line_start":259,"line_end":259,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":207484,"byte_end":207491,"line_start":260,"line_end":260,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1036},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":208088,"byte_end":208094,"line_start":282,"line_end":282,"column_start":12,"column_end":18},"name":"retain","qualname":"<HashSet<T, S>>::retain","value":"fn <F> (&mut self, mut f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Retains only the elements specified by the predicate.","sig":null,"attributes":[{"value":"/ Retains only the elements specified by the predicate.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":207660,"byte_end":207717,"line_start":268,"line_end":268,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":207722,"byte_end":207725,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ In other words, remove all elements `e` such that `f(&e)` returns `false`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":207730,"byte_end":207808,"line_start":270,"line_end":270,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":207813,"byte_end":207816,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":207821,"byte_end":207835,"line_start":272,"line_end":272,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":207840,"byte_end":207843,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":207848,"byte_end":207855,"line_start":274,"line_end":274,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":207860,"byte_end":207887,"line_start":275,"line_end":275,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":207892,"byte_end":207895,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ let xs = [1,2,3,4,5,6];","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":207900,"byte_end":207927,"line_start":277,"line_end":277,"column_start":5,"column_end":32}},{"value":"/ let mut set: HashSet<i32> = xs.iter().cloned().collect();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":207932,"byte_end":207993,"line_start":278,"line_end":278,"column_start":5,"column_end":66}},{"value":"/ set.retain(|&k| k % 2 == 0);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":207998,"byte_end":208030,"line_start":279,"line_end":279,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(set.len(), 3);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":208035,"byte_end":208064,"line_start":280,"line_end":280,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":208069,"byte_end":208076,"line_start":281,"line_end":281,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1039},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":208940,"byte_end":208952,"line_start":309,"line_end":309,"column_start":12,"column_end":24},"name":"drain_filter","qualname":"<HashSet<T, S>>::drain_filter","value":"fn <F> (&mut self, f: F) -> DrainFilter<'_, T, F>","parent":null,"children":[],"decl_id":null,"docs":" Drains elements which are false under the given predicate,\n and returns an iterator over the removed items.","sig":null,"attributes":[{"value":"/ Drains elements which are false under the given predicate,","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":208214,"byte_end":208276,"line_start":289,"line_end":289,"column_start":5,"column_end":67}},{"value":"/ and returns an iterator over the removed items.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":208281,"byte_end":208332,"line_start":290,"line_end":290,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":208337,"byte_end":208340,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ In other words, move all elements `e` such that `f(&e)` returns `false` out","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":208345,"byte_end":208424,"line_start":292,"line_end":292,"column_start":5,"column_end":84}},{"value":"/ into another iterator.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":208429,"byte_end":208455,"line_start":293,"line_end":293,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":208460,"byte_end":208463,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ When the returned DrainedFilter is dropped, the elements that don't satisfy","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":208468,"byte_end":208547,"line_start":295,"line_end":295,"column_start":5,"column_end":84}},{"value":"/ the predicate are dropped from the set.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":208552,"byte_end":208595,"line_start":296,"line_end":296,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":208600,"byte_end":208603,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":208608,"byte_end":208622,"line_start":298,"line_end":298,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":208627,"byte_end":208630,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":208635,"byte_end":208642,"line_start":300,"line_end":300,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":208647,"byte_end":208674,"line_start":301,"line_end":301,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":208679,"byte_end":208682,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<i32> = (0..8).collect();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":208687,"byte_end":208736,"line_start":303,"line_end":303,"column_start":5,"column_end":54}},{"value":"/ let drained = set.drain_filter(|&k| k % 2 == 0);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":208741,"byte_end":208793,"line_start":304,"line_end":304,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(drained.count(), 4);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":208798,"byte_end":208833,"line_start":305,"line_end":305,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(set.len(), 4);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":208838,"byte_end":208867,"line_start":306,"line_end":306,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":208872,"byte_end":208879,"line_start":307,"line_end":307,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1041},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":209562,"byte_end":209567,"line_start":335,"line_end":335,"column_start":12,"column_end":17},"name":"clear","qualname":"<HashSet<T, S>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears the set, removing all values.","sig":null,"attributes":[{"value":"/ Clears the set, removing all values.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":209255,"byte_end":209295,"line_start":322,"line_end":322,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":209300,"byte_end":209303,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":209308,"byte_end":209322,"line_start":324,"line_end":324,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":209327,"byte_end":209330,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":209335,"byte_end":209342,"line_start":326,"line_end":326,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":209347,"byte_end":209374,"line_start":327,"line_end":327,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":209379,"byte_end":209382,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ let mut v = HashSet::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":209387,"byte_end":209418,"line_start":329,"line_end":329,"column_start":5,"column_end":36}},{"value":"/ v.insert(1);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":209423,"byte_end":209439,"line_start":330,"line_end":330,"column_start":5,"column_end":21}},{"value":"/ v.clear();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":209444,"byte_end":209458,"line_start":331,"line_end":331,"column_start":5,"column_end":19}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":209463,"byte_end":209489,"line_start":332,"line_end":332,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":209494,"byte_end":209501,"line_start":333,"line_end":333,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1045},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":210702,"byte_end":210713,"line_start":372,"line_end":372,"column_start":12,"column_end":23},"name":"with_hasher","qualname":"<HashSet<T, S>>::with_hasher","value":"fn (hasher: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty hash set which will use the given hasher to hash\n keys.","sig":null,"attributes":[{"value":"/ Creates a new empty hash set which will use the given hasher to hash","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":209690,"byte_end":209762,"line_start":345,"line_end":345,"column_start":5,"column_end":77}},{"value":"/ keys.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":209767,"byte_end":209776,"line_start":346,"line_end":346,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":209781,"byte_end":209784,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ The hash set is also created with the default initial capacity.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":209789,"byte_end":209856,"line_start":348,"line_end":348,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":209861,"byte_end":209864,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ Warning: `hasher` is normally randomly generated, and","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":209869,"byte_end":209926,"line_start":350,"line_end":350,"column_start":5,"column_end":62}},{"value":"/ is designed to allow `HashSet`s to be resistant to attacks that","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":209931,"byte_end":209998,"line_start":351,"line_end":351,"column_start":5,"column_end":72}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":210003,"byte_end":210066,"line_start":352,"line_end":352,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":210071,"byte_end":210135,"line_start":353,"line_end":353,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":210140,"byte_end":210143,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ The `hash_builder` passed should implement the [`BuildHasher`] trait for","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":210148,"byte_end":210224,"line_start":355,"line_end":355,"column_start":5,"column_end":81}},{"value":"/ the HashMap to be useful, see its documentation for details.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":210229,"byte_end":210293,"line_start":356,"line_end":356,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":210298,"byte_end":210301,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":210306,"byte_end":210309,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":210314,"byte_end":210328,"line_start":359,"line_end":359,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":210333,"byte_end":210336,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":210341,"byte_end":210348,"line_start":361,"line_end":361,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":210353,"byte_end":210380,"line_start":362,"line_end":362,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":210385,"byte_end":210433,"line_start":363,"line_end":363,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":210438,"byte_end":210441,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":210446,"byte_end":210488,"line_start":365,"line_end":365,"column_start":5,"column_end":47}},{"value":"/ let mut set = HashSet::with_hasher(s);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":210493,"byte_end":210535,"line_start":366,"line_end":366,"column_start":5,"column_end":47}},{"value":"/ set.insert(2);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":210540,"byte_end":210558,"line_start":367,"line_end":367,"column_start":5,"column_end":23}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":210563,"byte_end":210570,"line_start":368,"line_end":368,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":210575,"byte_end":210578,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":210583,"byte_end":210641,"line_start":370,"line_end":370,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1046},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":211934,"byte_end":211958,"line_start":405,"line_end":405,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<HashSet<T, S>>::with_capacity_and_hasher","value":"fn (capacity: usize, hasher: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashSet` with the specified capacity, using\n `hasher` to hash the keys.","sig":null,"attributes":[{"value":"/ Creates an empty `HashSet` with the specified capacity, using","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":210818,"byte_end":210883,"line_start":378,"line_end":378,"column_start":5,"column_end":70}},{"value":"/ `hasher` to hash the keys.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":210888,"byte_end":210918,"line_start":379,"line_end":379,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":210923,"byte_end":210926,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ The hash set will be able to hold at least `capacity` elements without","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":210931,"byte_end":211005,"line_start":381,"line_end":381,"column_start":5,"column_end":79}},{"value":"/ reallocating. If `capacity` is 0, the hash set will not allocate.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":211010,"byte_end":211079,"line_start":382,"line_end":382,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":211084,"byte_end":211087,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ Warning: `hasher` is normally randomly generated, and","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":211092,"byte_end":211149,"line_start":384,"line_end":384,"column_start":5,"column_end":62}},{"value":"/ is designed to allow `HashSet`s to be resistant to attacks that","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":211154,"byte_end":211221,"line_start":385,"line_end":385,"column_start":5,"column_end":72}},{"value":"/ cause many collisions and very poor performance. Setting it","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":211226,"byte_end":211289,"line_start":386,"line_end":386,"column_start":5,"column_end":68}},{"value":"/ manually using this function can expose a DoS attack vector.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":211294,"byte_end":211358,"line_start":387,"line_end":387,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":211363,"byte_end":211366,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ The `hash_builder` passed should implement the [`BuildHasher`] trait for","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":211371,"byte_end":211447,"line_start":389,"line_end":389,"column_start":5,"column_end":81}},{"value":"/ the HashMap to be useful, see its documentation for details.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":211452,"byte_end":211516,"line_start":390,"line_end":390,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":211521,"byte_end":211524,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":211529,"byte_end":211543,"line_start":392,"line_end":392,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":211548,"byte_end":211551,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":211556,"byte_end":211563,"line_start":394,"line_end":394,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":211568,"byte_end":211595,"line_start":395,"line_end":395,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":211600,"byte_end":211648,"line_start":396,"line_end":396,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":211653,"byte_end":211656,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ let s = DefaultHashBuilder::default();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":211661,"byte_end":211703,"line_start":398,"line_end":398,"column_start":5,"column_end":47}},{"value":"/ let mut set = HashSet::with_capacity_and_hasher(10, s);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":211708,"byte_end":211767,"line_start":399,"line_end":399,"column_start":5,"column_end":64}},{"value":"/ set.insert(1);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":211772,"byte_end":211790,"line_start":400,"line_end":400,"column_start":5,"column_end":23}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":211795,"byte_end":211802,"line_start":401,"line_end":401,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":211807,"byte_end":211810,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":211815,"byte_end":211873,"line_start":403,"line_end":403,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1047},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":212630,"byte_end":212636,"line_start":426,"line_end":426,"column_start":12,"column_end":18},"name":"hasher","qualname":"<HashSet<T, S>>::hasher","value":"fn (&self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the set's [`BuildHasher`].","sig":null,"attributes":[{"value":"/ Returns a reference to the set's [`BuildHasher`].","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":212103,"byte_end":212156,"line_start":411,"line_end":411,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":212161,"byte_end":212164,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ [`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":212169,"byte_end":212247,"line_start":413,"line_end":413,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":212252,"byte_end":212255,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":212260,"byte_end":212274,"line_start":415,"line_end":415,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":212279,"byte_end":212282,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":212287,"byte_end":212294,"line_start":417,"line_end":417,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":212299,"byte_end":212326,"line_start":418,"line_end":418,"column_start":5,"column_end":32}},{"value":"/ use hashbrown::hash_map::DefaultHashBuilder;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":212331,"byte_end":212379,"line_start":419,"line_end":419,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":212384,"byte_end":212387,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ let hasher = DefaultHashBuilder::default();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":212392,"byte_end":212439,"line_start":421,"line_end":421,"column_start":5,"column_end":52}},{"value":"/ let set: HashSet<i32> = HashSet::with_hasher(hasher);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":212444,"byte_end":212501,"line_start":422,"line_end":422,"column_start":5,"column_end":62}},{"value":"/ let hasher: &DefaultHashBuilder = set.hasher();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":212506,"byte_end":212557,"line_start":423,"line_end":423,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":212562,"byte_end":212569,"line_start":424,"line_end":424,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1048},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":213232,"byte_end":213239,"line_start":447,"line_end":447,"column_start":12,"column_end":19},"name":"reserve","qualname":"<HashSet<T, S>>::reserve","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more elements to be inserted\n in the `HashSet`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more elements to be inserted","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":212689,"byte_end":212765,"line_start":430,"line_end":430,"column_start":5,"column_end":81}},{"value":"/ in the `HashSet`. The collection may reserve more space to avoid","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":212770,"byte_end":212838,"line_start":431,"line_end":431,"column_start":5,"column_end":73}},{"value":"/ frequent reallocations.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":212843,"byte_end":212870,"line_start":432,"line_end":432,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":212875,"byte_end":212878,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":212883,"byte_end":212895,"line_start":434,"line_end":434,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":212900,"byte_end":212903,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ Panics if the new allocation size overflows `usize`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":212908,"byte_end":212964,"line_start":436,"line_end":436,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":212969,"byte_end":212972,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":212977,"byte_end":212991,"line_start":438,"line_end":438,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":212996,"byte_end":212999,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":213004,"byte_end":213011,"line_start":440,"line_end":440,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":213016,"byte_end":213043,"line_start":441,"line_end":441,"column_start":5,"column_end":32}},{"value":"/ let mut set: HashSet<i32> = HashSet::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":213048,"byte_end":213095,"line_start":442,"line_end":442,"column_start":5,"column_end":52}},{"value":"/ set.reserve(10);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":213100,"byte_end":213120,"line_start":443,"line_end":443,"column_start":5,"column_end":25}},{"value":"/ assert!(set.capacity() >= 10);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":213125,"byte_end":213159,"line_start":444,"line_end":444,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":213164,"byte_end":213171,"line_start":445,"line_end":445,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1049},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":213946,"byte_end":213957,"line_start":468,"line_end":468,"column_start":12,"column_end":23},"name":"try_reserve","qualname":"<HashSet<T, S>>::try_reserve","value":"fn (&mut self, additional: usize) -> Result<(), TryReserveError>","parent":null,"children":[],"decl_id":null,"docs":" Tries to reserve capacity for at least `additional` more elements to be inserted\n in the given `HashSet<K,V>`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"/ Tries to reserve capacity for at least `additional` more elements to be inserted","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":213320,"byte_end":213404,"line_start":451,"line_end":451,"column_start":5,"column_end":89}},{"value":"/ in the given `HashSet<K,V>`. The collection may reserve more space to avoid","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":213409,"byte_end":213488,"line_start":452,"line_end":452,"column_start":5,"column_end":84}},{"value":"/ frequent reallocations.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":213493,"byte_end":213520,"line_start":453,"line_end":453,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":213525,"byte_end":213528,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":213533,"byte_end":213545,"line_start":455,"line_end":455,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":213550,"byte_end":213553,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ If the capacity overflows, or the allocator reports a failure, then an error","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":213558,"byte_end":213638,"line_start":457,"line_end":457,"column_start":5,"column_end":85}},{"value":"/ is returned.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":213643,"byte_end":213659,"line_start":458,"line_end":458,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":213664,"byte_end":213667,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":213672,"byte_end":213686,"line_start":460,"line_end":460,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":213691,"byte_end":213694,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":213699,"byte_end":213706,"line_start":462,"line_end":462,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":213711,"byte_end":213738,"line_start":463,"line_end":463,"column_start":5,"column_end":32}},{"value":"/ let mut set: HashSet<i32> = HashSet::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":213743,"byte_end":213790,"line_start":464,"line_end":464,"column_start":5,"column_end":52}},{"value":"/ set.try_reserve(10).expect(\"why is the test harness OOMing on 10 bytes?\");","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":213795,"byte_end":213873,"line_start":465,"line_end":465,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":213878,"byte_end":213885,"line_start":466,"line_end":466,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1050},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":214654,"byte_end":214667,"line_start":489,"line_end":489,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<HashSet<T, S>>::shrink_to_fit","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the set as much as possible. It will drop\n down as much as possible while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the set as much as possible. It will drop","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":214073,"byte_end":214142,"line_start":472,"line_end":472,"column_start":5,"column_end":74}},{"value":"/ down as much as possible while maintaining the internal rules","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":214147,"byte_end":214212,"line_start":473,"line_end":473,"column_start":5,"column_end":70}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":214217,"byte_end":214290,"line_start":474,"line_end":474,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":214295,"byte_end":214298,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":214303,"byte_end":214317,"line_start":476,"line_end":476,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":214322,"byte_end":214325,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":214330,"byte_end":214337,"line_start":478,"line_end":478,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":214342,"byte_end":214369,"line_start":479,"line_end":479,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":214374,"byte_end":214377,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::with_capacity(100);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":214382,"byte_end":214428,"line_start":481,"line_end":481,"column_start":5,"column_end":51}},{"value":"/ set.insert(1);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":214433,"byte_end":214451,"line_start":482,"line_end":482,"column_start":5,"column_end":23}},{"value":"/ set.insert(2);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":214456,"byte_end":214474,"line_start":483,"line_end":483,"column_start":5,"column_end":23}},{"value":"/ assert!(set.capacity() >= 100);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":214479,"byte_end":214514,"line_start":484,"line_end":484,"column_start":5,"column_end":40}},{"value":"/ set.shrink_to_fit();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":214519,"byte_end":214543,"line_start":485,"line_end":485,"column_start":5,"column_end":29}},{"value":"/ assert!(set.capacity() >= 2);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":214548,"byte_end":214581,"line_start":486,"line_end":486,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":214586,"byte_end":214593,"line_start":487,"line_end":487,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1051},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":215483,"byte_end":215492,"line_start":515,"line_end":515,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<HashSet<T, S>>::shrink_to","value":"fn (&mut self, min_capacity: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the set with a lower limit. It will drop\n down no lower than the supplied limit while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the set with a lower limit. It will drop","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":214725,"byte_end":214793,"line_start":493,"line_end":493,"column_start":5,"column_end":73}},{"value":"/ down no lower than the supplied limit while maintaining the internal rules","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":214798,"byte_end":214876,"line_start":494,"line_end":494,"column_start":5,"column_end":83}},{"value":"/ and possibly leaving some space in accordance with the resize policy.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":214881,"byte_end":214954,"line_start":495,"line_end":495,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":214959,"byte_end":214962,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ Panics if the current capacity is smaller than the supplied","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":214967,"byte_end":215030,"line_start":497,"line_end":497,"column_start":5,"column_end":68}},{"value":"/ minimum capacity.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":215035,"byte_end":215056,"line_start":498,"line_end":498,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":215061,"byte_end":215064,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":215069,"byte_end":215083,"line_start":500,"line_end":500,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":215088,"byte_end":215091,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":215096,"byte_end":215103,"line_start":502,"line_end":502,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":215108,"byte_end":215135,"line_start":503,"line_end":503,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":215140,"byte_end":215143,"line_start":504,"line_end":504,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::with_capacity(100);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":215148,"byte_end":215194,"line_start":505,"line_end":505,"column_start":5,"column_end":51}},{"value":"/ set.insert(1);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":215199,"byte_end":215217,"line_start":506,"line_end":506,"column_start":5,"column_end":23}},{"value":"/ set.insert(2);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":215222,"byte_end":215240,"line_start":507,"line_end":507,"column_start":5,"column_end":23}},{"value":"/ assert!(set.capacity() >= 100);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":215245,"byte_end":215280,"line_start":508,"line_end":508,"column_start":5,"column_end":40}},{"value":"/ set.shrink_to(10);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":215285,"byte_end":215307,"line_start":509,"line_end":509,"column_start":5,"column_end":27}},{"value":"/ assert!(set.capacity() >= 10);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":215312,"byte_end":215346,"line_start":510,"line_end":510,"column_start":5,"column_end":39}},{"value":"/ set.shrink_to(0);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":215351,"byte_end":215372,"line_start":511,"line_end":511,"column_start":5,"column_end":26}},{"value":"/ assert!(set.capacity() >= 2);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":215377,"byte_end":215410,"line_start":512,"line_end":512,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":215415,"byte_end":215422,"line_start":513,"line_end":513,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1052},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":216434,"byte_end":216444,"line_start":543,"line_end":543,"column_start":12,"column_end":22},"name":"difference","qualname":"<HashSet<T, S>>::difference","value":"fn <'a> (&'a self, other: &'a Self) -> Difference<'a, T, S>","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the difference,\n i.e., the values that are in `self` but not in `other`.","sig":null,"attributes":[{"value":"/ Visits the values representing the difference,","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":215579,"byte_end":215629,"line_start":519,"line_end":519,"column_start":5,"column_end":55}},{"value":"/ i.e., the values that are in `self` but not in `other`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":215634,"byte_end":215693,"line_start":520,"line_end":520,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":215698,"byte_end":215701,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":215706,"byte_end":215720,"line_start":522,"line_end":522,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":215725,"byte_end":215728,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":215733,"byte_end":215740,"line_start":524,"line_end":524,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":215745,"byte_end":215772,"line_start":525,"line_end":525,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":215777,"byte_end":215837,"line_start":526,"line_end":526,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":215842,"byte_end":215905,"line_start":527,"line_end":527,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":215910,"byte_end":215913,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ // Can be seen as `a - b`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":215918,"byte_end":215948,"line_start":529,"line_end":529,"column_start":5,"column_end":35}},{"value":"/ for x in a.difference(&b) {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":215953,"byte_end":215984,"line_start":530,"line_end":530,"column_start":5,"column_end":36}},{"value":"/     println!(\"{}\", x); // Print 1","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":215989,"byte_end":216026,"line_start":531,"line_end":531,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":216031,"byte_end":216036,"line_start":532,"line_end":532,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":216041,"byte_end":216044,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ let diff: HashSet<_> = a.difference(&b).collect();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":216049,"byte_end":216103,"line_start":534,"line_end":534,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(diff, [1].iter().collect());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":216108,"byte_end":216151,"line_start":535,"line_end":535,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":216156,"byte_end":216159,"line_start":536,"line_end":536,"column_start":5,"column_end":8}},{"value":"/ // Note that difference is not symmetric,","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":216164,"byte_end":216209,"line_start":537,"line_end":537,"column_start":5,"column_end":50}},{"value":"/ // and `b - a` means something else:","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":216214,"byte_end":216254,"line_start":538,"line_end":538,"column_start":5,"column_end":45}},{"value":"/ let diff: HashSet<_> = b.difference(&a).collect();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":216259,"byte_end":216313,"line_start":539,"line_end":539,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(diff, [4].iter().collect());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":216318,"byte_end":216361,"line_start":540,"line_end":540,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":216366,"byte_end":216373,"line_start":541,"line_end":541,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1054},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":217393,"byte_end":217413,"line_start":572,"line_end":572,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<HashSet<T, S>>::symmetric_difference","value":"fn <'a> (&'a self, other: &'a Self) -> SymmetricDifference<'a, T, S>","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the symmetric difference,\n i.e., the values that are in `self` or in `other` but not in both.","sig":null,"attributes":[{"value":"/ Visits the values representing the symmetric difference,","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":216594,"byte_end":216654,"line_start":550,"line_end":550,"column_start":5,"column_end":65}},{"value":"/ i.e., the values that are in `self` or in `other` but not in both.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":216659,"byte_end":216729,"line_start":551,"line_end":551,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":216734,"byte_end":216737,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":216742,"byte_end":216756,"line_start":553,"line_end":553,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":216761,"byte_end":216764,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":216769,"byte_end":216776,"line_start":555,"line_end":555,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":216781,"byte_end":216808,"line_start":556,"line_end":556,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":216813,"byte_end":216873,"line_start":557,"line_end":557,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":216878,"byte_end":216941,"line_start":558,"line_end":558,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":216946,"byte_end":216949,"line_start":559,"line_end":559,"column_start":5,"column_end":8}},{"value":"/ // Print 1, 4 in arbitrary order.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":216954,"byte_end":216991,"line_start":560,"line_end":560,"column_start":5,"column_end":42}},{"value":"/ for x in a.symmetric_difference(&b) {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":216996,"byte_end":217037,"line_start":561,"line_end":561,"column_start":5,"column_end":46}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":217042,"byte_end":217068,"line_start":562,"line_end":562,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":217073,"byte_end":217078,"line_start":563,"line_end":563,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":217083,"byte_end":217086,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ let diff1: HashSet<_> = a.symmetric_difference(&b).collect();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":217091,"byte_end":217156,"line_start":565,"line_end":565,"column_start":5,"column_end":70}},{"value":"/ let diff2: HashSet<_> = b.symmetric_difference(&a).collect();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":217161,"byte_end":217226,"line_start":566,"line_end":566,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":217231,"byte_end":217234,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(diff1, diff2);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":217239,"byte_end":217268,"line_start":568,"line_end":568,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(diff1, [1, 4].iter().collect());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":217273,"byte_end":217320,"line_start":569,"line_end":569,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":217325,"byte_end":217332,"line_start":570,"line_end":570,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1056},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":218267,"byte_end":218279,"line_start":597,"line_end":597,"column_start":12,"column_end":24},"name":"intersection","qualname":"<HashSet<T, S>>::intersection","value":"fn <'a> (&'a self, other: &'a Self) -> Intersection<'a, T, S>","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the intersection,\n i.e., the values that are both in `self` and `other`.","sig":null,"attributes":[{"value":"/ Visits the values representing the intersection,","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":217603,"byte_end":217655,"line_start":578,"line_end":578,"column_start":5,"column_end":57}},{"value":"/ i.e., the values that are both in `self` and `other`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":217660,"byte_end":217717,"line_start":579,"line_end":579,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":217722,"byte_end":217725,"line_start":580,"line_end":580,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":217730,"byte_end":217744,"line_start":581,"line_end":581,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":217749,"byte_end":217752,"line_start":582,"line_end":582,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":217757,"byte_end":217764,"line_start":583,"line_end":583,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":217769,"byte_end":217796,"line_start":584,"line_end":584,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":217801,"byte_end":217861,"line_start":585,"line_end":585,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":217866,"byte_end":217929,"line_start":586,"line_end":586,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":217934,"byte_end":217937,"line_start":587,"line_end":587,"column_start":5,"column_end":8}},{"value":"/ // Print 2, 3 in arbitrary order.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":217942,"byte_end":217979,"line_start":588,"line_end":588,"column_start":5,"column_end":42}},{"value":"/ for x in a.intersection(&b) {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":217984,"byte_end":218017,"line_start":589,"line_end":589,"column_start":5,"column_end":38}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":218022,"byte_end":218048,"line_start":590,"line_end":590,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":218053,"byte_end":218058,"line_start":591,"line_end":591,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":218063,"byte_end":218066,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ let intersection: HashSet<_> = a.intersection(&b).collect();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":218071,"byte_end":218135,"line_start":593,"line_end":593,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(intersection, [2, 3].iter().collect());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":218140,"byte_end":218194,"line_start":594,"line_end":594,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":218199,"byte_end":218206,"line_start":595,"line_end":595,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1058},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":219237,"byte_end":219242,"line_start":628,"line_end":628,"column_start":12,"column_end":17},"name":"union","qualname":"<HashSet<T, S>>::union","value":"fn <'a> (&'a self, other: &'a Self) -> Union<'a, T, S>","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the union,\n i.e., all the values in `self` or `other`, without duplicates.","sig":null,"attributes":[{"value":"/ Visits the values representing the union,","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":218587,"byte_end":218632,"line_start":609,"line_end":609,"column_start":5,"column_end":50}},{"value":"/ i.e., all the values in `self` or `other`, without duplicates.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":218637,"byte_end":218703,"line_start":610,"line_end":610,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":218708,"byte_end":218711,"line_start":611,"line_end":611,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":218716,"byte_end":218730,"line_start":612,"line_end":612,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":218735,"byte_end":218738,"line_start":613,"line_end":613,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":218743,"byte_end":218750,"line_start":614,"line_end":614,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":218755,"byte_end":218782,"line_start":615,"line_end":615,"column_start":5,"column_end":32}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":218787,"byte_end":218847,"line_start":616,"line_end":616,"column_start":5,"column_end":65}},{"value":"/ let b: HashSet<_> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":218852,"byte_end":218915,"line_start":617,"line_end":617,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":218920,"byte_end":218923,"line_start":618,"line_end":618,"column_start":5,"column_end":8}},{"value":"/ // Print 1, 2, 3, 4 in arbitrary order.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":218928,"byte_end":218971,"line_start":619,"line_end":619,"column_start":5,"column_end":48}},{"value":"/ for x in a.union(&b) {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":218976,"byte_end":219002,"line_start":620,"line_end":620,"column_start":5,"column_end":31}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":219007,"byte_end":219033,"line_start":621,"line_end":621,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":219038,"byte_end":219043,"line_start":622,"line_end":622,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":219048,"byte_end":219051,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ let union: HashSet<_> = a.union(&b).collect();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":219056,"byte_end":219106,"line_start":624,"line_end":624,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(union, [1, 2, 3, 4].iter().collect());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":219111,"byte_end":219164,"line_start":625,"line_end":625,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":219169,"byte_end":219176,"line_start":626,"line_end":626,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1060},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":220222,"byte_end":220230,"line_start":658,"line_end":658,"column_start":12,"column_end":20},"name":"contains","qualname":"<HashSet<T, S>>::contains","value":"fn <Q> (&self, value: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains a value.","sig":null,"attributes":[{"value":"/ Returns `true` if the set contains a value.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":219542,"byte_end":219589,"line_start":639,"line_end":639,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":219594,"byte_end":219597,"line_start":640,"line_end":640,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":219602,"byte_end":219669,"line_start":641,"line_end":641,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":219674,"byte_end":219741,"line_start":642,"line_end":642,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":219746,"byte_end":219765,"line_start":643,"line_end":643,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":219770,"byte_end":219773,"line_start":644,"line_end":644,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":219778,"byte_end":219792,"line_start":645,"line_end":645,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":219797,"byte_end":219800,"line_start":646,"line_end":646,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":219805,"byte_end":219812,"line_start":647,"line_end":647,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":219817,"byte_end":219844,"line_start":648,"line_end":648,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":219849,"byte_end":219852,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/ let set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":219857,"byte_end":219919,"line_start":650,"line_end":650,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(set.contains(&1), true);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":219924,"byte_end":219963,"line_start":651,"line_end":651,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(set.contains(&4), false);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":219968,"byte_end":220008,"line_start":652,"line_end":652,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":220013,"byte_end":220020,"line_start":653,"line_end":653,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":220025,"byte_end":220028,"line_start":654,"line_end":654,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":220033,"byte_end":220092,"line_start":655,"line_end":655,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":220097,"byte_end":220161,"line_start":656,"line_end":656,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1062},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":221092,"byte_end":221095,"line_start":685,"line_end":685,"column_start":12,"column_end":15},"name":"get","qualname":"<HashSet<T, S>>::get","value":"fn <Q> (&self, value: &Q) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value in the set, if any, that is equal to the given value.","sig":null,"attributes":[{"value":"/ Returns a reference to the value in the set, if any, that is equal to the given value.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":220376,"byte_end":220466,"line_start":666,"line_end":666,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":220471,"byte_end":220474,"line_start":667,"line_end":667,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":220479,"byte_end":220546,"line_start":668,"line_end":668,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":220551,"byte_end":220618,"line_start":669,"line_end":669,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":220623,"byte_end":220642,"line_start":670,"line_end":670,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":220647,"byte_end":220650,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":220655,"byte_end":220669,"line_start":672,"line_end":672,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":220674,"byte_end":220677,"line_start":673,"line_end":673,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":220682,"byte_end":220689,"line_start":674,"line_end":674,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":220694,"byte_end":220721,"line_start":675,"line_end":675,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":220726,"byte_end":220729,"line_start":676,"line_end":676,"column_start":5,"column_end":8}},{"value":"/ let set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":220734,"byte_end":220796,"line_start":677,"line_end":677,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(set.get(&2), Some(&2));","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":220801,"byte_end":220839,"line_start":678,"line_end":678,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(set.get(&4), None);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":220844,"byte_end":220878,"line_start":679,"line_end":679,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":220883,"byte_end":220890,"line_start":680,"line_end":680,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":220895,"byte_end":220898,"line_start":681,"line_end":681,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":220903,"byte_end":220962,"line_start":682,"line_end":682,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":220967,"byte_end":221031,"line_start":683,"line_end":683,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1064},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":221924,"byte_end":221937,"line_start":712,"line_end":712,"column_start":12,"column_end":25},"name":"get_or_insert","qualname":"<HashSet<T, S>>::get_or_insert","value":"fn (&mut self, value: T) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Inserts the given `value` into the set if it is not present, then\n returns a reference to the value in the set.","sig":null,"attributes":[{"value":"/ Inserts the given `value` into the set if it is not present, then","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":221387,"byte_end":221456,"line_start":697,"line_end":697,"column_start":5,"column_end":74}},{"value":"/ returns a reference to the value in the set.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":221461,"byte_end":221509,"line_start":698,"line_end":698,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":221514,"byte_end":221517,"line_start":699,"line_end":699,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":221522,"byte_end":221536,"line_start":700,"line_end":700,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":221541,"byte_end":221544,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":221549,"byte_end":221556,"line_start":702,"line_end":702,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":221561,"byte_end":221588,"line_start":703,"line_end":703,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":221593,"byte_end":221596,"line_start":704,"line_end":704,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":221601,"byte_end":221667,"line_start":705,"line_end":705,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(set.len(), 3);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":221672,"byte_end":221701,"line_start":706,"line_end":706,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(set.get_or_insert(2), &2);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":221706,"byte_end":221747,"line_start":707,"line_end":707,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(set.get_or_insert(100), &100);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":221752,"byte_end":221797,"line_start":708,"line_end":708,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(set.len(), 4); // 100 was inserted","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":221802,"byte_end":221851,"line_start":709,"line_end":709,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":221856,"byte_end":221863,"line_start":710,"line_end":710,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1065},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":222928,"byte_end":222947,"line_start":741,"line_end":741,"column_start":12,"column_end":31},"name":"get_or_insert_owned","qualname":"<HashSet<T, S>>::get_or_insert_owned","value":"fn <Q> (&mut self, value: &Q) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Inserts an owned copy of the given `value` into the set if it is not\n present, then returns a reference to the value in the set.","sig":null,"attributes":[{"value":"/ Inserts an owned copy of the given `value` into the set if it is not","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":222292,"byte_end":222364,"line_start":722,"line_end":722,"column_start":5,"column_end":77}},{"value":"/ present, then returns a reference to the value in the set.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":222369,"byte_end":222431,"line_start":723,"line_end":723,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":222436,"byte_end":222439,"line_start":724,"line_end":724,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":222444,"byte_end":222458,"line_start":725,"line_end":725,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":222463,"byte_end":222466,"line_start":726,"line_end":726,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":222471,"byte_end":222478,"line_start":727,"line_end":727,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":222483,"byte_end":222510,"line_start":728,"line_end":728,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":222515,"byte_end":222518,"line_start":729,"line_end":729,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<String> = [\"cat\", \"dog\", \"horse\"]","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":222523,"byte_end":222581,"line_start":730,"line_end":730,"column_start":5,"column_end":63}},{"value":"/     .iter().map(|&pet| pet.to_owned()).collect();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":222586,"byte_end":222639,"line_start":731,"line_end":731,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":222644,"byte_end":222647,"line_start":732,"line_end":732,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.len(), 3);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":222652,"byte_end":222681,"line_start":733,"line_end":733,"column_start":5,"column_end":34}},{"value":"/ for &pet in &[\"cat\", \"dog\", \"fish\"] {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":222686,"byte_end":222727,"line_start":734,"line_end":734,"column_start":5,"column_end":46}},{"value":"/     let value = set.get_or_insert_owned(pet);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":222732,"byte_end":222781,"line_start":735,"line_end":735,"column_start":5,"column_end":54}},{"value":"/     assert_eq!(value, pet);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":222786,"byte_end":222817,"line_start":736,"line_end":736,"column_start":5,"column_end":36}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":222822,"byte_end":222827,"line_start":737,"line_end":737,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(set.len(), 4); // a new \"fish\" was inserted","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":222832,"byte_end":222890,"line_start":738,"line_end":738,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":222895,"byte_end":222902,"line_start":739,"line_end":739,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":222907,"byte_end":222916,"line_start":740,"line_end":740,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1068},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":224104,"byte_end":224122,"line_start":774,"line_end":774,"column_start":12,"column_end":30},"name":"get_or_insert_with","qualname":"<HashSet<T, S>>::get_or_insert_with","value":"fn <Q, F> (&mut self, value: &Q, f: F) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Inserts a value computed from `f` into the set if the given `value` is\n not present, then returns a reference to the value in the set.","sig":null,"attributes":[{"value":"/ Inserts a value computed from `f` into the set if the given `value` is","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":223413,"byte_end":223487,"line_start":755,"line_end":755,"column_start":5,"column_end":79}},{"value":"/ not present, then returns a reference to the value in the set.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":223492,"byte_end":223558,"line_start":756,"line_end":756,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":223563,"byte_end":223566,"line_start":757,"line_end":757,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":223571,"byte_end":223585,"line_start":758,"line_end":758,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":223590,"byte_end":223593,"line_start":759,"line_end":759,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":223598,"byte_end":223605,"line_start":760,"line_end":760,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":223610,"byte_end":223637,"line_start":761,"line_end":761,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":223642,"byte_end":223645,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<String> = [\"cat\", \"dog\", \"horse\"]","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":223650,"byte_end":223708,"line_start":763,"line_end":763,"column_start":5,"column_end":63}},{"value":"/     .iter().map(|&pet| pet.to_owned()).collect();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":223713,"byte_end":223766,"line_start":764,"line_end":764,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":223771,"byte_end":223774,"line_start":765,"line_end":765,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.len(), 3);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":223779,"byte_end":223808,"line_start":766,"line_end":766,"column_start":5,"column_end":34}},{"value":"/ for &pet in &[\"cat\", \"dog\", \"fish\"] {","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":223813,"byte_end":223854,"line_start":767,"line_end":767,"column_start":5,"column_end":46}},{"value":"/     let value = set.get_or_insert_with(pet, str::to_owned);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":223859,"byte_end":223922,"line_start":768,"line_end":768,"column_start":5,"column_end":68}},{"value":"/     assert_eq!(value, pet);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":223927,"byte_end":223958,"line_start":769,"line_end":769,"column_start":5,"column_end":36}},{"value":"/ }","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":223963,"byte_end":223968,"line_start":770,"line_end":770,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(set.len(), 4); // a new \"fish\" was inserted","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":223973,"byte_end":224031,"line_start":771,"line_end":771,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":224036,"byte_end":224043,"line_start":772,"line_end":772,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1072},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":225128,"byte_end":225139,"line_start":806,"line_end":806,"column_start":12,"column_end":23},"name":"is_disjoint","qualname":"<HashSet<T, S>>::is_disjoint","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `self` has no elements in common with `other`.\n This is equivalent to checking for an empty intersection.","sig":null,"attributes":[{"value":"/ Returns `true` if `self` has no elements in common with `other`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":224596,"byte_end":224664,"line_start":789,"line_end":789,"column_start":5,"column_end":73}},{"value":"/ This is equivalent to checking for an empty intersection.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":224669,"byte_end":224730,"line_start":790,"line_end":790,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":224735,"byte_end":224738,"line_start":791,"line_end":791,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":224743,"byte_end":224757,"line_start":792,"line_end":792,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":224762,"byte_end":224765,"line_start":793,"line_end":793,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":224770,"byte_end":224777,"line_start":794,"line_end":794,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":224782,"byte_end":224809,"line_start":795,"line_end":795,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":224814,"byte_end":224817,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/ let a: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":224822,"byte_end":224882,"line_start":797,"line_end":797,"column_start":5,"column_end":65}},{"value":"/ let mut b = HashSet::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":224887,"byte_end":224918,"line_start":798,"line_end":798,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":224923,"byte_end":224926,"line_start":799,"line_end":799,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.is_disjoint(&b), true);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":224931,"byte_end":224971,"line_start":800,"line_end":800,"column_start":5,"column_end":45}},{"value":"/ b.insert(4);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":224976,"byte_end":224992,"line_start":801,"line_end":801,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(a.is_disjoint(&b), true);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":224997,"byte_end":225037,"line_start":802,"line_end":802,"column_start":5,"column_end":45}},{"value":"/ b.insert(1);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":225042,"byte_end":225058,"line_start":803,"line_end":803,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(a.is_disjoint(&b), false);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":225063,"byte_end":225104,"line_start":804,"line_end":804,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":225109,"byte_end":225116,"line_start":805,"line_end":805,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1074},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":225761,"byte_end":225770,"line_start":827,"line_end":827,"column_start":12,"column_end":21},"name":"is_subset","qualname":"<HashSet<T, S>>::is_subset","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set is a subset of another,\n i.e., `other` contains at least all the values in `self`.","sig":null,"attributes":[{"value":"/ Returns `true` if the set is a subset of another,","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":225230,"byte_end":225283,"line_start":810,"line_end":810,"column_start":5,"column_end":58}},{"value":"/ i.e., `other` contains at least all the values in `self`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":225288,"byte_end":225349,"line_start":811,"line_end":811,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":225354,"byte_end":225357,"line_start":812,"line_end":812,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":225362,"byte_end":225376,"line_start":813,"line_end":813,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":225381,"byte_end":225384,"line_start":814,"line_end":814,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":225389,"byte_end":225396,"line_start":815,"line_end":815,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":225401,"byte_end":225428,"line_start":816,"line_end":816,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":225433,"byte_end":225436,"line_start":817,"line_end":817,"column_start":5,"column_end":8}},{"value":"/ let sup: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":225441,"byte_end":225503,"line_start":818,"line_end":818,"column_start":5,"column_end":67}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":225508,"byte_end":225541,"line_start":819,"line_end":819,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":225546,"byte_end":225549,"line_start":820,"line_end":820,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.is_subset(&sup), true);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":225554,"byte_end":225596,"line_start":821,"line_end":821,"column_start":5,"column_end":47}},{"value":"/ set.insert(2);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":225601,"byte_end":225619,"line_start":822,"line_end":822,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_subset(&sup), true);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":225624,"byte_end":225666,"line_start":823,"line_end":823,"column_start":5,"column_end":47}},{"value":"/ set.insert(4);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":225671,"byte_end":225689,"line_start":824,"line_end":824,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_subset(&sup), false);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":225694,"byte_end":225737,"line_start":825,"line_end":825,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":225742,"byte_end":225749,"line_start":826,"line_end":826,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1076},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":226514,"byte_end":226525,"line_start":852,"line_end":852,"column_start":12,"column_end":23},"name":"is_superset","qualname":"<HashSet<T, S>>::is_superset","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set is a superset of another,\n i.e., `self` contains at least all the values in `other`.","sig":null,"attributes":[{"value":"/ Returns `true` if the set is a superset of another,","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":225889,"byte_end":225944,"line_start":831,"line_end":831,"column_start":5,"column_end":60}},{"value":"/ i.e., `self` contains at least all the values in `other`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":225949,"byte_end":226010,"line_start":832,"line_end":832,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":226015,"byte_end":226018,"line_start":833,"line_end":833,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":226023,"byte_end":226037,"line_start":834,"line_end":834,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":226042,"byte_end":226045,"line_start":835,"line_end":835,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":226050,"byte_end":226057,"line_start":836,"line_end":836,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":226062,"byte_end":226089,"line_start":837,"line_end":837,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":226094,"byte_end":226097,"line_start":838,"line_end":838,"column_start":5,"column_end":8}},{"value":"/ let sub: HashSet<_> = [1, 2].iter().cloned().collect();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":226102,"byte_end":226161,"line_start":839,"line_end":839,"column_start":5,"column_end":64}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":226166,"byte_end":226199,"line_start":840,"line_end":840,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":226204,"byte_end":226207,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.is_superset(&sub), false);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":226212,"byte_end":226257,"line_start":842,"line_end":842,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":226262,"byte_end":226265,"line_start":843,"line_end":843,"column_start":5,"column_end":8}},{"value":"/ set.insert(0);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":226270,"byte_end":226288,"line_start":844,"line_end":844,"column_start":5,"column_end":23}},{"value":"/ set.insert(1);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":226293,"byte_end":226311,"line_start":845,"line_end":845,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_superset(&sub), false);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":226316,"byte_end":226361,"line_start":846,"line_end":846,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":226366,"byte_end":226369,"line_start":847,"line_end":847,"column_start":5,"column_end":8}},{"value":"/ set.insert(2);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":226374,"byte_end":226392,"line_start":848,"line_end":848,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.is_superset(&sub), true);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":226397,"byte_end":226441,"line_start":849,"line_end":849,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":226446,"byte_end":226453,"line_start":850,"line_end":850,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1077},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":227106,"byte_end":227112,"line_start":874,"line_end":874,"column_start":12,"column_end":18},"name":"insert","qualname":"<HashSet<T, S>>::insert","value":"fn (&mut self, value: T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set.","sig":null,"attributes":[{"value":"/ Adds a value to the set.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":226598,"byte_end":226626,"line_start":856,"line_end":856,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":226631,"byte_end":226634,"line_start":857,"line_end":857,"column_start":5,"column_end":8}},{"value":"/ If the set did not have this value present, `true` is returned.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":226639,"byte_end":226706,"line_start":858,"line_end":858,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":226711,"byte_end":226714,"line_start":859,"line_end":859,"column_start":5,"column_end":8}},{"value":"/ If the set did have this value present, `false` is returned.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":226719,"byte_end":226783,"line_start":860,"line_end":860,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":226788,"byte_end":226791,"line_start":861,"line_end":861,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":226796,"byte_end":226810,"line_start":862,"line_end":862,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":226815,"byte_end":226818,"line_start":863,"line_end":863,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":226823,"byte_end":226830,"line_start":864,"line_end":864,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":226835,"byte_end":226862,"line_start":865,"line_end":865,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":226867,"byte_end":226870,"line_start":866,"line_end":866,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":226875,"byte_end":226908,"line_start":867,"line_end":867,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":226913,"byte_end":226916,"line_start":868,"line_end":868,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.insert(2), true);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":226921,"byte_end":226957,"line_start":869,"line_end":869,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(set.insert(2), false);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":226962,"byte_end":226999,"line_start":870,"line_end":870,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(set.len(), 1);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":227004,"byte_end":227033,"line_start":871,"line_end":871,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":227038,"byte_end":227045,"line_start":872,"line_end":872,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1078},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":227747,"byte_end":227754,"line_start":894,"line_end":894,"column_start":12,"column_end":19},"name":"replace","qualname":"<HashSet<T, S>>::replace","value":"fn (&mut self, value: T) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set, replacing the existing value, if any, that is equal to the given\n one. Returns the replaced value.","sig":null,"attributes":[{"value":"/ Adds a value to the set, replacing the existing value, if any, that is equal to the given","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":227200,"byte_end":227293,"line_start":878,"line_end":878,"column_start":5,"column_end":98}},{"value":"/ one. Returns the replaced value.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":227298,"byte_end":227334,"line_start":879,"line_end":879,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":227339,"byte_end":227342,"line_start":880,"line_end":880,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":227347,"byte_end":227361,"line_start":881,"line_end":881,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":227366,"byte_end":227369,"line_start":882,"line_end":882,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":227374,"byte_end":227381,"line_start":883,"line_end":883,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":227386,"byte_end":227413,"line_start":884,"line_end":884,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":227418,"byte_end":227421,"line_start":885,"line_end":885,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":227426,"byte_end":227459,"line_start":886,"line_end":886,"column_start":5,"column_end":38}},{"value":"/ set.insert(Vec::<i32>::new());","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":227464,"byte_end":227498,"line_start":887,"line_end":887,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":227503,"byte_end":227506,"line_start":888,"line_end":888,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.get(&[][..]).unwrap().capacity(), 0);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":227511,"byte_end":227567,"line_start":889,"line_end":889,"column_start":5,"column_end":61}},{"value":"/ set.replace(Vec::with_capacity(10));","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":227572,"byte_end":227612,"line_start":890,"line_end":890,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(set.get(&[][..]).unwrap().capacity(), 10);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":227617,"byte_end":227674,"line_start":891,"line_end":891,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":227679,"byte_end":227686,"line_start":892,"line_end":892,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1079},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":228762,"byte_end":228768,"line_start":926,"line_end":926,"column_start":12,"column_end":18},"name":"remove","qualname":"<HashSet<T, S>>::remove","value":"fn <Q> (&mut self, value: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Removes a value from the set. Returns whether the value was\n present in the set.","sig":null,"attributes":[{"value":"/ Removes a value from the set. Returns whether the value was","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":228040,"byte_end":228103,"line_start":904,"line_end":904,"column_start":5,"column_end":68}},{"value":"/ present in the set.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":228108,"byte_end":228131,"line_start":905,"line_end":905,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":228136,"byte_end":228139,"line_start":906,"line_end":906,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":228144,"byte_end":228211,"line_start":907,"line_end":907,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":228216,"byte_end":228283,"line_start":908,"line_end":908,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":228288,"byte_end":228307,"line_start":909,"line_end":909,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":228312,"byte_end":228315,"line_start":910,"line_end":910,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":228320,"byte_end":228334,"line_start":911,"line_end":911,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":228339,"byte_end":228342,"line_start":912,"line_end":912,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":228347,"byte_end":228354,"line_start":913,"line_end":913,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":228359,"byte_end":228386,"line_start":914,"line_end":914,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":228391,"byte_end":228394,"line_start":915,"line_end":915,"column_start":5,"column_end":8}},{"value":"/ let mut set = HashSet::new();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":228399,"byte_end":228432,"line_start":916,"line_end":916,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":228437,"byte_end":228440,"line_start":917,"line_end":917,"column_start":5,"column_end":8}},{"value":"/ set.insert(2);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":228445,"byte_end":228463,"line_start":918,"line_end":918,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(set.remove(&2), true);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":228468,"byte_end":228505,"line_start":919,"line_end":919,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(set.remove(&2), false);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":228510,"byte_end":228548,"line_start":920,"line_end":920,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":228553,"byte_end":228560,"line_start":921,"line_end":921,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":228565,"byte_end":228568,"line_start":922,"line_end":922,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":228573,"byte_end":228632,"line_start":923,"line_end":923,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":228637,"byte_end":228701,"line_start":924,"line_end":924,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1081},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":229638,"byte_end":229642,"line_start":953,"line_end":953,"column_start":12,"column_end":16},"name":"take","qualname":"<HashSet<T, S>>::take","value":"fn <Q> (&mut self, value: &Q) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the given one.","sig":null,"attributes":[{"value":"/ Removes and returns the value in the set, if any, that is equal to the given one.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":228922,"byte_end":229007,"line_start":934,"line_end":934,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":229012,"byte_end":229015,"line_start":935,"line_end":935,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":229020,"byte_end":229087,"line_start":936,"line_end":936,"column_start":5,"column_end":72}},{"value":"/ [`Hash`] and [`Eq`] on the borrowed form *must* match those for","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":229092,"byte_end":229159,"line_start":937,"line_end":937,"column_start":5,"column_end":72}},{"value":"/ the value type.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":229164,"byte_end":229183,"line_start":938,"line_end":938,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":229188,"byte_end":229191,"line_start":939,"line_end":939,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":229196,"byte_end":229210,"line_start":940,"line_end":940,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":229215,"byte_end":229218,"line_start":941,"line_end":941,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":229223,"byte_end":229230,"line_start":942,"line_end":942,"column_start":5,"column_end":12}},{"value":"/ use hashbrown::HashSet;","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":229235,"byte_end":229262,"line_start":943,"line_end":943,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":229267,"byte_end":229270,"line_start":944,"line_end":944,"column_start":5,"column_end":8}},{"value":"/ let mut set: HashSet<_> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":229275,"byte_end":229341,"line_start":945,"line_end":945,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(set.take(&2), Some(2));","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":229346,"byte_end":229384,"line_start":946,"line_end":946,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(set.take(&2), None);","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":229389,"byte_end":229424,"line_start":947,"line_end":947,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":229429,"byte_end":229436,"line_start":948,"line_end":948,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":229441,"byte_end":229444,"line_start":949,"line_end":949,"column_start":5,"column_end":8}},{"value":"/ [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":229449,"byte_end":229508,"line_start":950,"line_end":950,"column_start":5,"column_end":64}},{"value":"/ [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":229513,"byte_end":229577,"line_start":951,"line_end":951,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":1136},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":235760,"byte_end":235764,"line_start":1204,"line_end":1204,"column_start":12,"column_end":16},"name":"Iter","qualname":"::set::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":1139}],"decl_id":null,"docs":" An iterator over the items of a `HashSet`.","sig":null,"attributes":[{"value":"/ An iterator over the items of a `HashSet`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":235507,"byte_end":235553,"line_start":1197,"line_end":1197,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":235554,"byte_end":235557,"line_start":1198,"line_end":1198,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iter`] method on [`HashSet`].","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":235558,"byte_end":235625,"line_start":1199,"line_end":1199,"column_start":1,"column_end":68}},{"value":"/ See its documentation for more.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":235626,"byte_end":235661,"line_start":1200,"line_end":1200,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":235662,"byte_end":235665,"line_start":1201,"line_end":1201,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":235666,"byte_end":235702,"line_start":1202,"line_end":1202,"column_start":1,"column_end":37}},{"value":"/ [`iter`]: struct.HashSet.html#method.iter","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":235703,"byte_end":235748,"line_start":1203,"line_end":1203,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1140},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":236118,"byte_end":236126,"line_start":1215,"line_end":1215,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::set::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":1142}],"decl_id":null,"docs":" An owning iterator over the items of a `HashSet`.","sig":null,"attributes":[{"value":"/ An owning iterator over the items of a `HashSet`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":235804,"byte_end":235857,"line_start":1208,"line_end":1208,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":235858,"byte_end":235861,"line_start":1209,"line_end":1209,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`into_iter`] method on [`HashSet`]","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":235862,"byte_end":235933,"line_start":1210,"line_end":1210,"column_start":1,"column_end":72}},{"value":"/ (provided by the `IntoIterator` trait). See its documentation for more.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":235934,"byte_end":236009,"line_start":1211,"line_end":1211,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":236010,"byte_end":236013,"line_start":1212,"line_end":1212,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":236014,"byte_end":236050,"line_start":1213,"line_end":1213,"column_start":1,"column_end":37}},{"value":"/ [`into_iter`]: struct.HashSet.html#method.into_iter","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":236051,"byte_end":236106,"line_start":1214,"line_end":1214,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":1143},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":236431,"byte_end":236436,"line_start":1226,"line_end":1226,"column_start":12,"column_end":17},"name":"Drain","qualname":"::set::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":1146}],"decl_id":null,"docs":" A draining iterator over the items of a `HashSet`.","sig":null,"attributes":[{"value":"/ A draining iterator over the items of a `HashSet`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":236167,"byte_end":236221,"line_start":1219,"line_end":1219,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":236222,"byte_end":236225,"line_start":1220,"line_end":1220,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain`] method on [`HashSet`].","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":236226,"byte_end":236294,"line_start":1221,"line_end":1221,"column_start":1,"column_end":69}},{"value":"/ See its documentation for more.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":236295,"byte_end":236330,"line_start":1222,"line_end":1222,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":236331,"byte_end":236334,"line_start":1223,"line_end":1223,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":236335,"byte_end":236371,"line_start":1224,"line_end":1224,"column_start":1,"column_end":37}},{"value":"/ [`drain`]: struct.HashSet.html#method.drain","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":236372,"byte_end":236419,"line_start":1225,"line_end":1225,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":1147},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":236803,"byte_end":236814,"line_start":1237,"line_end":1237,"column_start":12,"column_end":23},"name":"DrainFilter","qualname":"::set::DrainFilter","value":"DrainFilter {  }","parent":null,"children":[{"krate":0,"index":1151},{"krate":0,"index":1152}],"decl_id":null,"docs":" A draining iterator over entries of a `HashSet` which don't satisfy the predicate `f`.","sig":null,"attributes":[{"value":"/ A draining iterator over entries of a `HashSet` which don't satisfy the predicate `f`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":236482,"byte_end":236572,"line_start":1230,"line_end":1230,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":236573,"byte_end":236576,"line_start":1231,"line_end":1231,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`drain_filter`] method on [`HashSet`]. See its","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":236577,"byte_end":236660,"line_start":1232,"line_end":1232,"column_start":1,"column_end":84}},{"value":"/ documentation for more.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":236661,"byte_end":236688,"line_start":1233,"line_end":1233,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":236689,"byte_end":236692,"line_start":1234,"line_end":1234,"column_start":1,"column_end":4}},{"value":"/ [`drain_filter`]: struct.HashSet.html#method.drain_filter","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":236693,"byte_end":236754,"line_start":1235,"line_end":1235,"column_start":1,"column_end":62}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":236755,"byte_end":236791,"line_start":1236,"line_end":1236,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":1153},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":237216,"byte_end":237228,"line_start":1252,"line_end":1252,"column_start":12,"column_end":24},"name":"Intersection","qualname":"::set::Intersection","value":"Intersection {  }","parent":null,"children":[{"krate":0,"index":1157},{"krate":0,"index":1158}],"decl_id":null,"docs":" A lazy iterator producing elements in the intersection of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the intersection of `HashSet`s.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":236912,"byte_end":236985,"line_start":1245,"line_end":1245,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":236986,"byte_end":236989,"line_start":1246,"line_end":1246,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`intersection`] method on [`HashSet`].","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":236990,"byte_end":237065,"line_start":1247,"line_end":1247,"column_start":1,"column_end":76}},{"value":"/ See its documentation for more.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":237066,"byte_end":237101,"line_start":1248,"line_end":1248,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":237102,"byte_end":237105,"line_start":1249,"line_end":1249,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":237106,"byte_end":237142,"line_start":1250,"line_end":1250,"column_start":1,"column_end":37}},{"value":"/ [`intersection`]: struct.HashSet.html#method.intersection","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":237143,"byte_end":237204,"line_start":1251,"line_end":1251,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":1159},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":237648,"byte_end":237658,"line_start":1266,"line_end":1266,"column_start":12,"column_end":22},"name":"Difference","qualname":"::set::Difference","value":"Difference {  }","parent":null,"children":[{"krate":0,"index":1163},{"krate":0,"index":1164}],"decl_id":null,"docs":" A lazy iterator producing elements in the difference of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the difference of `HashSet`s.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":237352,"byte_end":237423,"line_start":1259,"line_end":1259,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":237424,"byte_end":237427,"line_start":1260,"line_end":1260,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`difference`] method on [`HashSet`].","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":237428,"byte_end":237501,"line_start":1261,"line_end":1261,"column_start":1,"column_end":74}},{"value":"/ See its documentation for more.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":237502,"byte_end":237537,"line_start":1262,"line_end":1262,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":237538,"byte_end":237541,"line_start":1263,"line_end":1263,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":237542,"byte_end":237578,"line_start":1264,"line_end":1264,"column_start":1,"column_end":37}},{"value":"/ [`difference`]: struct.HashSet.html#method.difference","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":237579,"byte_end":237636,"line_start":1265,"line_end":1265,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":1165},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":238118,"byte_end":238137,"line_start":1280,"line_end":1280,"column_start":12,"column_end":31},"name":"SymmetricDifference","qualname":"::set::SymmetricDifference","value":"SymmetricDifference {  }","parent":null,"children":[{"krate":0,"index":1169}],"decl_id":null,"docs":" A lazy iterator producing elements in the symmetric difference of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the symmetric difference of `HashSet`s.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":237782,"byte_end":237863,"line_start":1273,"line_end":1273,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":237864,"byte_end":237867,"line_start":1274,"line_end":1274,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`symmetric_difference`] method on","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":237868,"byte_end":237938,"line_start":1275,"line_end":1275,"column_start":1,"column_end":71}},{"value":"/ [`HashSet`]. See its documentation for more.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":237939,"byte_end":237987,"line_start":1276,"line_end":1276,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":237988,"byte_end":237991,"line_start":1277,"line_end":1277,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":237992,"byte_end":238028,"line_start":1278,"line_end":1278,"column_start":1,"column_end":37}},{"value":"/ [`symmetric_difference`]: struct.HashSet.html#method.symmetric_difference","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":238029,"byte_end":238106,"line_start":1279,"line_end":1279,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":1170},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":238490,"byte_end":238495,"line_start":1291,"line_end":1291,"column_start":12,"column_end":17},"name":"Union","qualname":"::set::Union","value":"Union {  }","parent":null,"children":[{"krate":0,"index":1174}],"decl_id":null,"docs":" A lazy iterator producing elements in the union of `HashSet`s.","sig":null,"attributes":[{"value":"/ A lazy iterator producing elements in the union of `HashSet`s.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":238214,"byte_end":238280,"line_start":1284,"line_end":1284,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":238281,"byte_end":238284,"line_start":1285,"line_end":1285,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`union`] method on [`HashSet`].","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":238285,"byte_end":238353,"line_start":1286,"line_end":1286,"column_start":1,"column_end":69}},{"value":"/ See its documentation for more.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":238354,"byte_end":238389,"line_start":1287,"line_end":1287,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":238390,"byte_end":238393,"line_start":1288,"line_end":1288,"column_start":1,"column_end":4}},{"value":"/ [`HashSet`]: struct.HashSet.html","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":238394,"byte_end":238430,"line_start":1289,"line_end":1289,"column_start":1,"column_end":37}},{"value":"/ [`union`]: struct.HashSet.html#method.union","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":238431,"byte_end":238478,"line_start":1290,"line_end":1290,"column_start":1,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":1339},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","byte_start":1904,"byte_end":1912,"line_start":77,"line_end":77,"column_start":9,"column_end":17},"name":"hash_map","qualname":"::hash_map","value":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1340}],"decl_id":null,"docs":" A hash map implemented with quadratic probing and SIMD lookup.\n","sig":null,"attributes":[{"value":"! A hash map implemented with quadratic probing and SIMD lookup.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","byte_start":1919,"byte_end":1985,"line_start":78,"line_end":78,"column_start":5,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":1341},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","byte_start":2459,"byte_end":2467,"line_start":94,"line_end":94,"column_start":9,"column_end":17},"name":"hash_set","qualname":"::hash_set","value":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1342}],"decl_id":null,"docs":" A hash set implemented as a `HashMap` where the value is `()`.\n","sig":null,"attributes":[{"value":"! A hash set implemented as a `HashMap` where the value is `()`.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","byte_start":2474,"byte_end":2540,"line_start":95,"line_end":95,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1394},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","byte_start":3219,"byte_end":3235,"line_start":117,"line_end":117,"column_start":5,"column_end":21},"name":"CapacityOverflow","qualname":"::TryReserveError::CapacityOverflow","value":"TryReserveError::CapacityOverflow","parent":{"krate":0,"index":1393},"children":[],"decl_id":null,"docs":" Error due to the computed capacity exceeding the collection's maximum\n (usually `isize::MAX` bytes).\n","sig":null,"attributes":[{"value":"/ Error due to the computed capacity exceeding the collection's maximum","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","byte_start":3103,"byte_end":3176,"line_start":115,"line_end":115,"column_start":5,"column_end":78}},{"value":"/ (usually `isize::MAX` bytes).","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","byte_start":3181,"byte_end":3214,"line_start":116,"line_end":116,"column_start":5,"column_end":38}}]},{"kind":"StructVariant","id":{"krate":0,"index":1396},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","byte_start":3289,"byte_end":3299,"line_start":120,"line_end":120,"column_start":5,"column_end":15},"name":"AllocError","qualname":"::TryReserveError::AllocError","value":"TryReserveError::AllocError { layout }","parent":{"krate":0,"index":1393},"children":[],"decl_id":null,"docs":" The memory allocator returned an error\n","sig":null,"attributes":[{"value":"/ The memory allocator returned an error","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","byte_start":3242,"byte_end":3284,"line_start":119,"line_end":119,"column_start":5,"column_end":47}}]},{"kind":"Enum","id":{"krate":0,"index":1393},"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","byte_start":3081,"byte_end":3096,"line_start":114,"line_end":114,"column_start":10,"column_end":25},"name":"TryReserveError","qualname":"::TryReserveError","value":"TryReserveError::{CapacityOverflow, AllocError}","parent":null,"children":[{"krate":0,"index":1394},{"krate":0,"index":1396}],"decl_id":null,"docs":" The error type for `try_reserve` methods.\n","sig":null,"attributes":[{"value":"/ The error type for `try_reserve` methods.","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/lib.rs","byte_start":2987,"byte_end":3032,"line_start":112,"line_end":112,"column_start":1,"column_end":46}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/sse2.rs","byte_start":5836264,"byte_end":5836269,"line_start":23,"line_end":23,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1354},{"krate":0,"index":1355},{"krate":0,"index":1362},{"krate":0,"index":1363},{"krate":0,"index":1364},{"krate":0,"index":1365},{"krate":0,"index":1366},{"krate":0,"index":1367},{"krate":0,"index":1368},{"krate":0,"index":1369}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/bitmask.rs","byte_start":75737,"byte_end":75744,"line_start":20,"line_end":20,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/bitmask.rs","byte_start":78358,"byte_end":78365,"line_start":99,"line_end":99,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/bitmask.rs","byte_start":78653,"byte_end":78664,"line_start":113,"line_end":113,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":7634,"byte_end":7645,"line_start":73,"line_end":73,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":10376,"byte_end":10384,"line_start":153,"line_end":153,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":70},{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":15307,"byte_end":15313,"line_start":282,"line_end":282,"column_start":25,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":15339,"byte_end":15345,"line_start":284,"line_end":284,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":15478,"byte_end":15484,"line_start":291,"line_end":291,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":95},{"krate":0,"index":97}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":18306,"byte_end":18314,"line_start":378,"line_end":378,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":138},{"krate":0,"index":141},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":48001,"byte_end":48009,"line_start":1103,"line_end":1103,"column_start":25,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":48054,"byte_end":48062,"line_start":1104,"line_end":1104,"column_start":25,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":48109,"byte_end":48117,"line_start":1106,"line_end":1106,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":163},{"krate":0,"index":165}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":50539,"byte_end":50547,"line_start":1171,"line_end":1171,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1391}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":51330,"byte_end":51338,"line_start":1195,"line_end":1195,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":174},{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":55291,"byte_end":55299,"line_start":1301,"line_end":1301,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":55721,"byte_end":55729,"line_start":1317,"line_end":1317,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":56571,"byte_end":56583,"line_start":1348,"line_end":1348,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":59406,"byte_end":59418,"line_start":1417,"line_end":1417,"column_start":25,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":59449,"byte_end":59461,"line_start":1418,"line_end":1418,"column_start":25,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":59487,"byte_end":59499,"line_start":1420,"line_end":1420,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":203}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":59789,"byte_end":59801,"line_start":1432,"line_end":1432,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":61268,"byte_end":61280,"line_start":1470,"line_end":1470,"column_start":27,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":62175,"byte_end":62182,"line_start":1489,"line_end":1489,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":68121,"byte_end":68128,"line_start":1607,"line_end":1607,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":222}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":68336,"byte_end":68343,"line_start":1617,"line_end":1617,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":69028,"byte_end":69035,"line_start":1640,"line_end":1640,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":69068,"byte_end":69075,"line_start":1641,"line_end":1641,"column_start":27,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":69272,"byte_end":69283,"line_start":1650,"line_end":1650,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":239}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":69436,"byte_end":69447,"line_start":1657,"line_end":1657,"column_start":25,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":69492,"byte_end":69503,"line_start":1658,"line_end":1658,"column_start":25,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":70143,"byte_end":70154,"line_start":1680,"line_end":1680,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":246}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":70667,"byte_end":70678,"line_start":1699,"line_end":1699,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":71018,"byte_end":71029,"line_start":1713,"line_end":1713,"column_start":31,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":71062,"byte_end":71073,"line_start":1714,"line_end":1714,"column_start":27,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":71613,"byte_end":71621,"line_start":1731,"line_end":1731,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":265}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":71778,"byte_end":71786,"line_start":1738,"line_end":1738,"column_start":25,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":71835,"byte_end":71843,"line_start":1739,"line_end":1739,"column_start":25,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":71886,"byte_end":71894,"line_start":1741,"line_end":1741,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":272}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":72622,"byte_end":72630,"line_start":1764,"line_end":1764,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":73023,"byte_end":73031,"line_start":1781,"line_end":1781,"column_start":31,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":73068,"byte_end":73076,"line_start":1782,"line_end":1782,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":73608,"byte_end":73619,"line_start":1804,"line_end":1804,"column_start":13,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":294}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":74190,"byte_end":74201,"line_start":1825,"line_end":1825,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":298},{"krate":0,"index":299}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":85902,"byte_end":85909,"line_start":193,"line_end":193,"column_start":46,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":335},{"krate":0,"index":336}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":87643,"byte_end":87650,"line_start":251,"line_end":251,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":358},{"krate":0,"index":360}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":98765,"byte_end":98772,"line_start":639,"line_end":639,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":365},{"krate":0,"index":367},{"krate":0,"index":369},{"krate":0,"index":371},{"krate":0,"index":373},{"krate":0,"index":375},{"krate":0,"index":377},{"krate":0,"index":380},{"krate":0,"index":383},{"krate":0,"index":385},{"krate":0,"index":388},{"krate":0,"index":391},{"krate":0,"index":393}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":112459,"byte_end":112466,"line_start":1061,"line_end":1061,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":400},{"krate":0,"index":401}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":115399,"byte_end":115406,"line_start":1119,"line_end":1119,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":406}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":115727,"byte_end":115734,"line_start":1135,"line_end":1135,"column_start":22,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":115828,"byte_end":115835,"line_start":1143,"line_end":1143,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":417}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":116031,"byte_end":116038,"line_start":1153,"line_end":1153,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":422}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":116328,"byte_end":116335,"line_start":1164,"line_end":1164,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":428},{"krate":0,"index":429}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":117181,"byte_end":117185,"line_start":1196,"line_end":1196,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":439}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":117423,"byte_end":117427,"line_start":1206,"line_end":1206,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":443}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":118205,"byte_end":118212,"line_start":1228,"line_end":1228,"column_start":40,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":118238,"byte_end":118245,"line_start":1230,"line_end":1230,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":456}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":118909,"byte_end":118917,"line_start":1252,"line_end":1252,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":464}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":119572,"byte_end":119576,"line_start":1275,"line_end":1275,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":473}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":119774,"byte_end":119778,"line_start":1284,"line_end":1284,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":477}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":120302,"byte_end":120308,"line_start":1302,"line_end":1302,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":486}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":120508,"byte_end":120514,"line_start":1311,"line_end":1311,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":490}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":120984,"byte_end":120989,"line_start":1328,"line_end":1328,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":499}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":121740,"byte_end":121751,"line_start":1354,"line_end":1354,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":512}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":122145,"byte_end":122161,"line_start":1370,"line_end":1370,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":122311,"byte_end":122322,"line_start":1377,"line_end":1377,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":525},{"krate":0,"index":526}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":122739,"byte_end":122755,"line_start":1395,"line_end":1395,"column_start":12,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":536}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":124820,"byte_end":124839,"line_start":1460,"line_end":1460,"column_start":28,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":124913,"byte_end":124932,"line_start":1466,"line_end":1466,"column_start":28,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":125539,"byte_end":125557,"line_start":1491,"line_end":1491,"column_start":19,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":590},{"krate":0,"index":592}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":126382,"byte_end":126400,"line_start":1518,"line_end":1518,"column_start":19,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":600},{"krate":0,"index":603}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":127356,"byte_end":127371,"line_start":1547,"line_end":1547,"column_start":19,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":612},{"krate":0,"index":614},{"krate":0,"index":617},{"krate":0,"index":620}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":128913,"byte_end":128924,"line_start":1598,"line_end":1598,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":631}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":132838,"byte_end":132857,"line_start":1726,"line_end":1726,"column_start":16,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":637},{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":640},{"krate":0,"index":641},{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":649}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":135984,"byte_end":136001,"line_start":1818,"line_end":1818,"column_start":19,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":658},{"krate":0,"index":661}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":138020,"byte_end":138038,"line_start":1884,"line_end":1884,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":667}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":138215,"byte_end":138226,"line_start":1890,"line_end":1890,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":672}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":138557,"byte_end":138576,"line_start":1899,"line_end":1899,"column_start":36,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":676}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":138831,"byte_end":138848,"line_start":1908,"line_end":1908,"column_start":25,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":681}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":139013,"byte_end":139028,"line_start":1914,"line_end":1914,"column_start":25,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":686}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":139617,"byte_end":139622,"line_start":1934,"line_end":1934,"column_start":39,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":702}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":140179,"byte_end":140192,"line_start":1953,"line_end":1953,"column_start":31,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":140285,"byte_end":140298,"line_start":1960,"line_end":1960,"column_start":31,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":140400,"byte_end":140413,"line_start":1968,"line_end":1968,"column_start":39,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":723}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":140897,"byte_end":140908,"line_start":1987,"line_end":1987,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":736}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":141605,"byte_end":141612,"line_start":2013,"line_end":2013,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":757},{"krate":0,"index":758},{"krate":0,"index":759}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":142391,"byte_end":142395,"line_start":2042,"line_end":2042,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":764},{"krate":0,"index":765},{"krate":0,"index":766}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":142965,"byte_end":142969,"line_start":2061,"line_end":2061,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":770}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":143123,"byte_end":143127,"line_start":2068,"line_end":2068,"column_start":30,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":143170,"byte_end":143177,"line_start":2070,"line_end":2070,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":778},{"krate":0,"index":779},{"krate":0,"index":780}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":143759,"byte_end":143766,"line_start":2089,"line_end":2089,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":784}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":143919,"byte_end":143926,"line_start":2095,"line_end":2095,"column_start":30,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":143967,"byte_end":143974,"line_start":2097,"line_end":2097,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":791}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":144180,"byte_end":144188,"line_start":2107,"line_end":2107,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":795},{"krate":0,"index":796},{"krate":0,"index":797}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":144519,"byte_end":144527,"line_start":2119,"line_end":2119,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":801}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":144676,"byte_end":144684,"line_start":2125,"line_end":2125,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":144735,"byte_end":144743,"line_start":2127,"line_end":2127,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":808}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":144905,"byte_end":144909,"line_start":2133,"line_end":2133,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":813},{"krate":0,"index":814},{"krate":0,"index":815}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":145381,"byte_end":145385,"line_start":2149,"line_end":2149,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":819}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":145538,"byte_end":145542,"line_start":2155,"line_end":2155,"column_start":30,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":145585,"byte_end":145591,"line_start":2157,"line_end":2157,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":827},{"krate":0,"index":828},{"krate":0,"index":829}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":146063,"byte_end":146069,"line_start":2173,"line_end":2173,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":833}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":146222,"byte_end":146228,"line_start":2179,"line_end":2179,"column_start":30,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":146271,"byte_end":146280,"line_start":2181,"line_end":2181,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":841},{"krate":0,"index":842},{"krate":0,"index":843}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":146760,"byte_end":146769,"line_start":2197,"line_end":2197,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":847}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":146922,"byte_end":146931,"line_start":2203,"line_end":2203,"column_start":30,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":146972,"byte_end":146981,"line_start":2205,"line_end":2205,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":854}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":147197,"byte_end":147202,"line_start":2215,"line_end":2215,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":859},{"krate":0,"index":860},{"krate":0,"index":861}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":147537,"byte_end":147542,"line_start":2227,"line_end":2227,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":865}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":147695,"byte_end":147700,"line_start":2233,"line_end":2233,"column_start":30,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":147741,"byte_end":147746,"line_start":2235,"line_end":2235,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":872}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":147946,"byte_end":147951,"line_start":2245,"line_end":2245,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":878},{"krate":0,"index":879},{"krate":0,"index":880},{"krate":0,"index":882},{"krate":0,"index":884},{"krate":0,"index":885}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":152702,"byte_end":152707,"line_start":2411,"line_end":2411,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":892}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":153464,"byte_end":153477,"line_start":2438,"line_end":2438,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":898},{"krate":0,"index":899},{"krate":0,"index":900},{"krate":0,"index":901},{"krate":0,"index":902},{"krate":0,"index":903},{"krate":0,"index":904},{"krate":0,"index":905},{"krate":0,"index":906}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":160389,"byte_end":160400,"line_start":2665,"line_end":2665,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":912},{"krate":0,"index":913},{"krate":0,"index":914},{"krate":0,"index":916}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":162650,"byte_end":162657,"line_start":2748,"line_end":2748,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":922}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":163230,"byte_end":163237,"line_start":2766,"line_end":2766,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":929}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":164684,"byte_end":164691,"line_start":2811,"line_end":2811,"column_start":46,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":937}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/scopeguard.rs","byte_start":199303,"byte_end":199313,"line_start":20,"line_end":20,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":984},{"krate":0,"index":985}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/scopeguard.rs","byte_start":199501,"byte_end":199511,"line_start":31,"line_end":31,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":989}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/scopeguard.rs","byte_start":199690,"byte_end":199700,"line_start":41,"line_end":41,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":993}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":203947,"byte_end":203954,"line_start":120,"line_end":120,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1026},{"krate":0,"index":1027}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":205303,"byte_end":205310,"line_start":172,"line_end":172,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1031},{"krate":0,"index":1032},{"krate":0,"index":1033},{"krate":0,"index":1034},{"krate":0,"index":1035},{"krate":0,"index":1036},{"krate":0,"index":1039},{"krate":0,"index":1041}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Inherent","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":209626,"byte_end":209633,"line_start":340,"line_end":340,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1045},{"krate":0,"index":1046},{"krate":0,"index":1047},{"krate":0,"index":1048},{"krate":0,"index":1049},{"krate":0,"index":1050},{"krate":0,"index":1051},{"krate":0,"index":1052},{"krate":0,"index":1054},{"krate":0,"index":1056},{"krate":0,"index":1058},{"krate":0,"index":1060},{"krate":0,"index":1062},{"krate":0,"index":1064},{"krate":0,"index":1065},{"krate":0,"index":1068},{"krate":0,"index":1072},{"krate":0,"index":1074},{"krate":0,"index":1076},{"krate":0,"index":1077},{"krate":0,"index":1078},{"krate":0,"index":1079},{"krate":0,"index":1081}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":229959,"byte_end":229966,"line_start":966,"line_end":966,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1086}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":230214,"byte_end":230221,"line_start":980,"line_end":980,"column_start":19,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":230303,"byte_end":230310,"line_start":987,"line_end":987,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1094}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":230531,"byte_end":230538,"line_start":997,"line_end":997,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1098}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":230846,"byte_end":230853,"line_start":1010,"line_end":1010,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1103}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":231419,"byte_end":231426,"line_start":1033,"line_end":1033,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1110}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":231991,"byte_end":231998,"line_start":1056,"line_end":1056,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1115}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":238818,"byte_end":238825,"line_start":1305,"line_end":1305,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1185},{"krate":0,"index":1186},{"krate":0,"index":1187}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":239700,"byte_end":239704,"line_start":1337,"line_end":1337,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1190}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":239888,"byte_end":239892,"line_start":1345,"line_end":1345,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1194},{"krate":0,"index":1195},{"krate":0,"index":1196}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":240221,"byte_end":240225,"line_start":1357,"line_end":1357,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1200}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":240371,"byte_end":240375,"line_start":1363,"line_end":1363,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":240422,"byte_end":240426,"line_start":1365,"line_end":1365,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1205}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":240583,"byte_end":240591,"line_start":1371,"line_end":1371,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1208},{"krate":0,"index":1209},{"krate":0,"index":1210}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":241043,"byte_end":241051,"line_start":1387,"line_end":1387,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1213}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":241193,"byte_end":241201,"line_start":1393,"line_end":1393,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":241244,"byte_end":241252,"line_start":1395,"line_end":1395,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1218}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":241466,"byte_end":241471,"line_start":1402,"line_end":1402,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1222},{"krate":0,"index":1223},{"krate":0,"index":1224}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":241927,"byte_end":241932,"line_start":1418,"line_end":1418,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1227}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":242078,"byte_end":242083,"line_start":1424,"line_end":1424,"column_start":27,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":242130,"byte_end":242135,"line_start":1426,"line_end":1426,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1232}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":242356,"byte_end":242367,"line_start":1433,"line_end":1433,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1238}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":242678,"byte_end":242689,"line_start":1447,"line_end":1447,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1242},{"krate":0,"index":1243}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":242982,"byte_end":242994,"line_start":1461,"line_end":1461,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1248}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":243213,"byte_end":243225,"line_start":1471,"line_end":1471,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1253},{"krate":0,"index":1254},{"krate":0,"index":1255}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":243763,"byte_end":243775,"line_start":1495,"line_end":1495,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1259}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":244000,"byte_end":244012,"line_start":1505,"line_end":1505,"column_start":30,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":244093,"byte_end":244103,"line_start":1512,"line_end":1512,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1266}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":244320,"byte_end":244330,"line_start":1522,"line_end":1522,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1271},{"krate":0,"index":1272},{"krate":0,"index":1273}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":244872,"byte_end":244882,"line_start":1546,"line_end":1546,"column_start":30,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":244968,"byte_end":244978,"line_start":1553,"line_end":1553,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1280}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":245195,"byte_end":245214,"line_start":1563,"line_end":1563,"column_start":22,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1284}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":245420,"byte_end":245439,"line_start":1572,"line_end":1572,"column_start":29,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1289},{"krate":0,"index":1290},{"krate":0,"index":1291}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":245811,"byte_end":245830,"line_start":1589,"line_end":1589,"column_start":30,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":245916,"byte_end":245935,"line_start":1596,"line_end":1596,"column_start":27,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1298}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":246152,"byte_end":246157,"line_start":1606,"line_end":1606,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1302}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":246350,"byte_end":246355,"line_start":1615,"line_end":1615,"column_start":30,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":246441,"byte_end":246446,"line_start":1622,"line_end":1622,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1309}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":246670,"byte_end":246675,"line_start":1632,"line_end":1632,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1314},{"krate":0,"index":1315},{"krate":0,"index":1316}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/sse2.rs","byte_start":5836264,"byte_end":5836269,"line_start":23,"line_end":23,"column_start":6,"column_end":11},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1371},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/bitmask.rs","byte_start":75737,"byte_end":75744,"line_start":20,"line_end":20,"column_start":6,"column_end":13},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1377},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/bitmask.rs","byte_start":78358,"byte_end":78365,"line_start":99,"line_end":99,"column_start":23,"column_end":30},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1377},"to":{"krate":1,"index":4875}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/bitmask.rs","byte_start":78653,"byte_end":78664,"line_start":113,"line_end":113,"column_start":19,"column_end":30},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":41},"to":{"krate":1,"index":4965}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":7634,"byte_end":7645,"line_start":73,"line_end":73,"column_start":6,"column_end":17},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1383},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":10376,"byte_end":10384,"line_start":153,"line_end":153,"column_start":19,"column_end":27},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":65},"to":{"krate":1,"index":4965}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":15307,"byte_end":15313,"line_start":282,"line_end":282,"column_start":25,"column_end":31},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":76},"to":{"krate":1,"index":1903}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":15339,"byte_end":15345,"line_start":284,"line_end":284,"column_start":19,"column_end":25},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":76},"to":{"krate":1,"index":1604}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":15478,"byte_end":15484,"line_start":291,"line_end":291,"column_start":9,"column_end":15},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":76},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":18306,"byte_end":18314,"line_start":378,"line_end":378,"column_start":9,"column_end":17},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":98},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":48001,"byte_end":48009,"line_start":1103,"line_end":1103,"column_start":25,"column_end":33},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":98},"to":{"krate":1,"index":1903}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":48054,"byte_end":48062,"line_start":1104,"line_end":1104,"column_start":25,"column_end":33},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":98},"to":{"krate":1,"index":1915}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":48109,"byte_end":48117,"line_start":1106,"line_end":1106,"column_start":26,"column_end":34},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":98},"to":{"krate":1,"index":1604}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":50539,"byte_end":50547,"line_start":1171,"line_end":1171,"column_start":34,"column_end":42},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":98},"to":{"krate":0,"index":167}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":51330,"byte_end":51338,"line_start":1195,"line_end":1195,"column_start":16,"column_end":24},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":98},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":55291,"byte_end":55299,"line_start":1301,"line_end":1301,"column_start":18,"column_end":26},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":98},"to":{"krate":1,"index":2098}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":55721,"byte_end":55729,"line_start":1317,"line_end":1317,"column_start":26,"column_end":34},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":98},"to":{"krate":1,"index":4875}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":56571,"byte_end":56583,"line_start":1348,"line_end":1348,"column_start":9,"column_end":21},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":188},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":59406,"byte_end":59418,"line_start":1417,"line_end":1417,"column_start":25,"column_end":37},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":188},"to":{"krate":1,"index":1903}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":59449,"byte_end":59461,"line_start":1418,"line_end":1418,"column_start":25,"column_end":37},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":188},"to":{"krate":1,"index":1915}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":59487,"byte_end":59499,"line_start":1420,"line_end":1420,"column_start":19,"column_end":31},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":188},"to":{"krate":1,"index":1604}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":59789,"byte_end":59801,"line_start":1432,"line_end":1432,"column_start":22,"column_end":34},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":188},"to":{"krate":1,"index":4965}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":61268,"byte_end":61280,"line_start":1470,"line_end":1470,"column_start":27,"column_end":39},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":188},"to":{"krate":1,"index":5221}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":62175,"byte_end":62182,"line_start":1489,"line_end":1489,"column_start":9,"column_end":16},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":211},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":68121,"byte_end":68128,"line_start":1607,"line_end":1607,"column_start":19,"column_end":26},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":211},"to":{"krate":1,"index":1604}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":68336,"byte_end":68343,"line_start":1617,"line_end":1617,"column_start":22,"column_end":29},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":211},"to":{"krate":1,"index":4965}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":69028,"byte_end":69035,"line_start":1640,"line_end":1640,"column_start":31,"column_end":38},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":211},"to":{"krate":1,"index":4920}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":69068,"byte_end":69075,"line_start":1641,"line_end":1641,"column_start":27,"column_end":34},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":211},"to":{"krate":1,"index":5221}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":69272,"byte_end":69283,"line_start":1650,"line_end":1650,"column_start":9,"column_end":20},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":232},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":69436,"byte_end":69447,"line_start":1657,"line_end":1657,"column_start":25,"column_end":36},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":232},"to":{"krate":1,"index":1903}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":69492,"byte_end":69503,"line_start":1658,"line_end":1658,"column_start":25,"column_end":36},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":232},"to":{"krate":1,"index":1915}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":70143,"byte_end":70154,"line_start":1680,"line_end":1680,"column_start":18,"column_end":29},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":232},"to":{"krate":1,"index":2098}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":70667,"byte_end":70678,"line_start":1699,"line_end":1699,"column_start":22,"column_end":33},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":232},"to":{"krate":1,"index":4965}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":71018,"byte_end":71029,"line_start":1713,"line_end":1713,"column_start":31,"column_end":42},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":232},"to":{"krate":1,"index":4920}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":71062,"byte_end":71073,"line_start":1714,"line_end":1714,"column_start":27,"column_end":38},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":232},"to":{"krate":1,"index":5221}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":71613,"byte_end":71621,"line_start":1731,"line_end":1731,"column_start":9,"column_end":17},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":256},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":71778,"byte_end":71786,"line_start":1738,"line_end":1738,"column_start":25,"column_end":33},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":256},"to":{"krate":1,"index":1903}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":71835,"byte_end":71843,"line_start":1739,"line_end":1739,"column_start":25,"column_end":33},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":256},"to":{"krate":1,"index":1915}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":71886,"byte_end":71894,"line_start":1741,"line_end":1741,"column_start":18,"column_end":26},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":256},"to":{"krate":1,"index":2098}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":72622,"byte_end":72630,"line_start":1764,"line_end":1764,"column_start":22,"column_end":30},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":256},"to":{"krate":1,"index":4965}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":73023,"byte_end":73031,"line_start":1781,"line_end":1781,"column_start":31,"column_end":39},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":256},"to":{"krate":1,"index":4920}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":73068,"byte_end":73076,"line_start":1782,"line_end":1782,"column_start":27,"column_end":35},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":256},"to":{"krate":1,"index":5221}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":73608,"byte_end":73619,"line_start":1804,"line_end":1804,"column_start":13,"column_end":24},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":282},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/raw/mod.rs","byte_start":74190,"byte_end":74201,"line_start":1825,"line_end":1825,"column_start":26,"column_end":37},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":282},"to":{"krate":1,"index":4965}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":85902,"byte_end":85909,"line_start":193,"line_end":193,"column_start":46,"column_end":53},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":325},"to":{"krate":1,"index":1604}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":87643,"byte_end":87650,"line_start":251,"line_end":251,"column_start":15,"column_end":22},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":325},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":98765,"byte_end":98772,"line_start":639,"line_end":639,"column_start":15,"column_end":22},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":325},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":112459,"byte_end":112466,"line_start":1061,"line_end":1061,"column_start":15,"column_end":22},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":325},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":115399,"byte_end":115406,"line_start":1119,"line_end":1119,"column_start":29,"column_end":36},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":325},"to":{"krate":1,"index":1632}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":115727,"byte_end":115734,"line_start":1135,"line_end":1135,"column_start":22,"column_end":29},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":325},"to":{"krate":1,"index":1637}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":115828,"byte_end":115835,"line_start":1143,"line_end":1143,"column_start":25,"column_end":32},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":325},"to":{"krate":1,"index":6176}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":116031,"byte_end":116038,"line_start":1153,"line_end":1153,"column_start":27,"column_end":34},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":325},"to":{"krate":1,"index":1893}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":116328,"byte_end":116335,"line_start":1164,"line_end":1164,"column_start":40,"column_end":47},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":325},"to":{"krate":1,"index":2155}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":117181,"byte_end":117185,"line_start":1196,"line_end":1196,"column_start":22,"column_end":26},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":430},"to":{"krate":1,"index":1604}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":117423,"byte_end":117427,"line_start":1206,"line_end":1206,"column_start":41,"column_end":45},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":430},"to":{"krate":1,"index":6176}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":118205,"byte_end":118212,"line_start":1228,"line_end":1228,"column_start":40,"column_end":47},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":444},"to":{"krate":1,"index":1903}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":118238,"byte_end":118245,"line_start":1230,"line_end":1230,"column_start":12,"column_end":19},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":444},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":118909,"byte_end":118917,"line_start":1252,"line_end":1252,"column_start":12,"column_end":20},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":457},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":119572,"byte_end":119576,"line_start":1275,"line_end":1275,"column_start":22,"column_end":26},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":465},"to":{"krate":1,"index":1604}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":119774,"byte_end":119778,"line_start":1284,"line_end":1284,"column_start":34,"column_end":38},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":465},"to":{"krate":1,"index":6176}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":120302,"byte_end":120308,"line_start":1302,"line_end":1302,"column_start":22,"column_end":28},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":478},"to":{"krate":1,"index":1604}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":120508,"byte_end":120514,"line_start":1311,"line_end":1311,"column_start":34,"column_end":40},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":478},"to":{"krate":1,"index":6176}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":120984,"byte_end":120989,"line_start":1328,"line_end":1328,"column_start":12,"column_end":17},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":491},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":121740,"byte_end":121751,"line_start":1354,"line_end":1354,"column_start":28,"column_end":39},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":500},"to":{"krate":1,"index":2098}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":122145,"byte_end":122161,"line_start":1370,"line_end":1370,"column_start":28,"column_end":44},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":513},"to":{"krate":1,"index":2098}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":122311,"byte_end":122322,"line_start":1377,"line_end":1377,"column_start":28,"column_end":39},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":500},"to":{"krate":1,"index":4965}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":122739,"byte_end":122755,"line_start":1395,"line_end":1395,"column_start":12,"column_end":28},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":527},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":124820,"byte_end":124839,"line_start":1460,"line_end":1460,"column_start":28,"column_end":47},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":560},"to":{"krate":1,"index":1903}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":124913,"byte_end":124932,"line_start":1466,"line_end":1466,"column_start":28,"column_end":47},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":560},"to":{"krate":1,"index":1915}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":125539,"byte_end":125557,"line_start":1491,"line_end":1491,"column_start":19,"column_end":37},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":543},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":126382,"byte_end":126400,"line_start":1518,"line_end":1518,"column_start":19,"column_end":37},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":543},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":127356,"byte_end":127371,"line_start":1547,"line_end":1547,"column_start":19,"column_end":34},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":579},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":128913,"byte_end":128924,"line_start":1598,"line_end":1598,"column_start":19,"column_end":30},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":549},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":132838,"byte_end":132857,"line_start":1726,"line_end":1726,"column_start":16,"column_end":35},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":560},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":135984,"byte_end":136001,"line_start":1818,"line_end":1818,"column_start":19,"column_end":36},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":572},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":138020,"byte_end":138038,"line_start":1884,"line_end":1884,"column_start":25,"column_end":43},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":543},"to":{"krate":1,"index":6176}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":138215,"byte_end":138226,"line_start":1890,"line_end":1890,"column_start":39,"column_end":50},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":549},"to":{"krate":1,"index":6176}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":138557,"byte_end":138576,"line_start":1899,"line_end":1899,"column_start":36,"column_end":55},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":560},"to":{"krate":1,"index":6176}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":138831,"byte_end":138848,"line_start":1908,"line_end":1908,"column_start":25,"column_end":42},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":572},"to":{"krate":1,"index":6176}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":139013,"byte_end":139028,"line_start":1914,"line_end":1914,"column_start":25,"column_end":40},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":579},"to":{"krate":1,"index":6176}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":139617,"byte_end":139622,"line_start":1934,"line_end":1934,"column_start":39,"column_end":44},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":687},"to":{"krate":1,"index":6176}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":140179,"byte_end":140192,"line_start":1953,"line_end":1953,"column_start":31,"column_end":44},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":703},"to":{"krate":1,"index":1903}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":140285,"byte_end":140298,"line_start":1960,"line_end":1960,"column_start":31,"column_end":44},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":703},"to":{"krate":1,"index":1915}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":140400,"byte_end":140413,"line_start":1968,"line_end":1968,"column_start":39,"column_end":52},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":703},"to":{"krate":1,"index":6176}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":140897,"byte_end":140908,"line_start":1987,"line_end":1987,"column_start":32,"column_end":43},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":724},"to":{"krate":1,"index":6176}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":141605,"byte_end":141612,"line_start":2013,"line_end":2013,"column_start":32,"column_end":39},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":325},"to":{"krate":1,"index":4875}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":142391,"byte_end":142395,"line_start":2042,"line_end":2042,"column_start":29,"column_end":33},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":430},"to":{"krate":1,"index":4965}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":142965,"byte_end":142969,"line_start":2061,"line_end":2061,"column_start":34,"column_end":38},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":430},"to":{"krate":1,"index":4920}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":143123,"byte_end":143127,"line_start":2068,"line_end":2068,"column_start":30,"column_end":34},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":430},"to":{"krate":1,"index":5221}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":143170,"byte_end":143177,"line_start":2070,"line_end":2070,"column_start":29,"column_end":36},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":444},"to":{"krate":1,"index":4965}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":143759,"byte_end":143766,"line_start":2089,"line_end":2089,"column_start":34,"column_end":41},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":444},"to":{"krate":1,"index":4920}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":143919,"byte_end":143926,"line_start":2095,"line_end":2095,"column_start":30,"column_end":37},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":444},"to":{"krate":1,"index":5221}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":143967,"byte_end":143974,"line_start":2097,"line_end":2097,"column_start":27,"column_end":34},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":444},"to":{"krate":1,"index":6176}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":144180,"byte_end":144188,"line_start":2107,"line_end":2107,"column_start":25,"column_end":33},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":457},"to":{"krate":1,"index":4965}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":144519,"byte_end":144527,"line_start":2119,"line_end":2119,"column_start":34,"column_end":42},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":457},"to":{"krate":1,"index":4920}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":144676,"byte_end":144684,"line_start":2125,"line_end":2125,"column_start":30,"column_end":38},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":457},"to":{"krate":1,"index":5221}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":144735,"byte_end":144743,"line_start":2127,"line_end":2127,"column_start":41,"column_end":49},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":457},"to":{"krate":1,"index":6176}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":144905,"byte_end":144909,"line_start":2133,"line_end":2133,"column_start":29,"column_end":33},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":465},"to":{"krate":1,"index":4965}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":145381,"byte_end":145385,"line_start":2149,"line_end":2149,"column_start":34,"column_end":38},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":465},"to":{"krate":1,"index":4920}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":145538,"byte_end":145542,"line_start":2155,"line_end":2155,"column_start":30,"column_end":34},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":465},"to":{"krate":1,"index":5221}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":145585,"byte_end":145591,"line_start":2157,"line_end":2157,"column_start":29,"column_end":35},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":478},"to":{"krate":1,"index":4965}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":146063,"byte_end":146069,"line_start":2173,"line_end":2173,"column_start":34,"column_end":40},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":478},"to":{"krate":1,"index":4920}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":146222,"byte_end":146228,"line_start":2179,"line_end":2179,"column_start":30,"column_end":36},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":478},"to":{"krate":1,"index":5221}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":146271,"byte_end":146280,"line_start":2181,"line_end":2181,"column_start":29,"column_end":38},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":538},"to":{"krate":1,"index":4965}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":146760,"byte_end":146769,"line_start":2197,"line_end":2197,"column_start":34,"column_end":43},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":538},"to":{"krate":1,"index":4920}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":146922,"byte_end":146931,"line_start":2203,"line_end":2203,"column_start":30,"column_end":39},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":538},"to":{"krate":1,"index":5221}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":146972,"byte_end":146981,"line_start":2205,"line_end":2205,"column_start":27,"column_end":36},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":538},"to":{"krate":1,"index":6176}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":147197,"byte_end":147202,"line_start":2215,"line_end":2215,"column_start":29,"column_end":34},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":491},"to":{"krate":1,"index":4965}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":147537,"byte_end":147542,"line_start":2227,"line_end":2227,"column_start":34,"column_end":39},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":491},"to":{"krate":1,"index":4920}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":147695,"byte_end":147700,"line_start":2233,"line_end":2233,"column_start":30,"column_end":35},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":491},"to":{"krate":1,"index":5221}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":147741,"byte_end":147746,"line_start":2235,"line_end":2235,"column_start":27,"column_end":32},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":491},"to":{"krate":1,"index":6176}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":147946,"byte_end":147951,"line_start":2245,"line_end":2245,"column_start":19,"column_end":24},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":687},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":152702,"byte_end":152707,"line_start":2411,"line_end":2411,"column_start":28,"column_end":33},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":687},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":153464,"byte_end":153477,"line_start":2438,"line_end":2438,"column_start":19,"column_end":32},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":703},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":160389,"byte_end":160400,"line_start":2665,"line_end":2665,"column_start":19,"column_end":30},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":724},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":162650,"byte_end":162657,"line_start":2748,"line_end":2748,"column_start":40,"column_end":47},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":325},"to":{"krate":1,"index":4871}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":163230,"byte_end":163237,"line_start":2766,"line_end":2766,"column_start":34,"column_end":41},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":325},"to":{"krate":1,"index":4884}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/map.rs","byte_start":164684,"byte_end":164691,"line_start":2811,"line_end":2811,"column_start":46,"column_end":53},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":325},"to":{"krate":1,"index":4884}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/scopeguard.rs","byte_start":199303,"byte_end":199313,"line_start":20,"line_end":20,"column_start":22,"column_end":32},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":973},"to":{"krate":1,"index":2074}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/scopeguard.rs","byte_start":199501,"byte_end":199511,"line_start":31,"line_end":31,"column_start":25,"column_end":35},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":973},"to":{"krate":1,"index":2087}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/scopeguard.rs","byte_start":199690,"byte_end":199700,"line_start":41,"line_end":41,"column_start":21,"column_end":31},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":973},"to":{"krate":1,"index":2098}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":203947,"byte_end":203954,"line_start":120,"line_end":120,"column_start":36,"column_end":43},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1019},"to":{"krate":1,"index":1604}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":205303,"byte_end":205310,"line_start":172,"line_end":172,"column_start":12,"column_end":19},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1019},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":209626,"byte_end":209633,"line_start":340,"line_end":340,"column_start":12,"column_end":19},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1019},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":229959,"byte_end":229966,"line_start":966,"line_end":966,"column_start":26,"column_end":33},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1019},"to":{"krate":1,"index":1632}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":230214,"byte_end":230221,"line_start":980,"line_end":980,"column_start":19,"column_end":26},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":1019},"to":{"krate":1,"index":1637}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":230303,"byte_end":230310,"line_start":987,"line_end":987,"column_start":27,"column_end":34},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":1019},"to":{"krate":1,"index":6176}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":230531,"byte_end":230538,"line_start":997,"line_end":997,"column_start":32,"column_end":39},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1019},"to":{"krate":1,"index":4871}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":230846,"byte_end":230853,"line_start":1010,"line_end":1010,"column_start":26,"column_end":33},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":1019},"to":{"krate":1,"index":4884}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":231419,"byte_end":231426,"line_start":1033,"line_end":1033,"column_start":34,"column_end":41},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":1019},"to":{"krate":1,"index":4884}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":231991,"byte_end":231998,"line_start":1056,"line_end":1056,"column_start":24,"column_end":31},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":1019},"to":{"krate":1,"index":1893}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":238818,"byte_end":238825,"line_start":1305,"line_end":1305,"column_start":29,"column_end":36},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":1019},"to":{"krate":1,"index":4875}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":239700,"byte_end":239704,"line_start":1337,"line_end":1337,"column_start":19,"column_end":23},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":1136},"to":{"krate":1,"index":1604}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":239888,"byte_end":239892,"line_start":1345,"line_end":1345,"column_start":26,"column_end":30},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":1136},"to":{"krate":1,"index":4965}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":240221,"byte_end":240225,"line_start":1357,"line_end":1357,"column_start":35,"column_end":39},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":1136},"to":{"krate":1,"index":4920}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":240371,"byte_end":240375,"line_start":1363,"line_end":1363,"column_start":27,"column_end":31},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1136},"to":{"krate":1,"index":5221}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":240422,"byte_end":240426,"line_start":1365,"line_end":1365,"column_start":36,"column_end":40},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1136},"to":{"krate":1,"index":6176}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":240583,"byte_end":240591,"line_start":1371,"line_end":1371,"column_start":22,"column_end":30},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":1140},"to":{"krate":1,"index":4965}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":241043,"byte_end":241051,"line_start":1387,"line_end":1387,"column_start":31,"column_end":39},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":1140},"to":{"krate":1,"index":4920}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":241193,"byte_end":241201,"line_start":1393,"line_end":1393,"column_start":27,"column_end":35},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":1140},"to":{"krate":1,"index":5221}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":241244,"byte_end":241252,"line_start":1395,"line_end":1395,"column_start":36,"column_end":44},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":1140},"to":{"krate":1,"index":6176}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":241466,"byte_end":241471,"line_start":1402,"line_end":1402,"column_start":22,"column_end":27},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":1143},"to":{"krate":1,"index":4965}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":241927,"byte_end":241932,"line_start":1418,"line_end":1418,"column_start":31,"column_end":36},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1143},"to":{"krate":1,"index":4920}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":242078,"byte_end":242083,"line_start":1424,"line_end":1424,"column_start":27,"column_end":32},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":1143},"to":{"krate":1,"index":5221}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":242130,"byte_end":242135,"line_start":1426,"line_end":1426,"column_start":36,"column_end":41},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":1143},"to":{"krate":1,"index":6176}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":242356,"byte_end":242367,"line_start":1433,"line_end":1433,"column_start":25,"column_end":36},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":1147},"to":{"krate":1,"index":2098}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":242678,"byte_end":242689,"line_start":1447,"line_end":1447,"column_start":25,"column_end":36},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":1147},"to":{"krate":1,"index":4965}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":242982,"byte_end":242994,"line_start":1461,"line_end":1461,"column_start":22,"column_end":34},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":1153},"to":{"krate":1,"index":1604}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":243213,"byte_end":243225,"line_start":1471,"line_end":1471,"column_start":29,"column_end":41},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":1153},"to":{"krate":1,"index":4965}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":243763,"byte_end":243775,"line_start":1495,"line_end":1495,"column_start":27,"column_end":39},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":1153},"to":{"krate":1,"index":6176}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":244000,"byte_end":244012,"line_start":1505,"line_end":1505,"column_start":30,"column_end":42},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":1153},"to":{"krate":1,"index":5221}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":244093,"byte_end":244103,"line_start":1512,"line_end":1512,"column_start":22,"column_end":32},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":1159},"to":{"krate":1,"index":1604}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":244320,"byte_end":244330,"line_start":1522,"line_end":1522,"column_start":29,"column_end":39},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":1159},"to":{"krate":1,"index":4965}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":244872,"byte_end":244882,"line_start":1546,"line_end":1546,"column_start":30,"column_end":40},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":1159},"to":{"krate":1,"index":5221}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":244968,"byte_end":244978,"line_start":1553,"line_end":1553,"column_start":27,"column_end":37},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":1159},"to":{"krate":1,"index":6176}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":245195,"byte_end":245214,"line_start":1563,"line_end":1563,"column_start":22,"column_end":41},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":1165},"to":{"krate":1,"index":1604}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":245420,"byte_end":245439,"line_start":1572,"line_end":1572,"column_start":29,"column_end":48},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":1165},"to":{"krate":1,"index":4965}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":245811,"byte_end":245830,"line_start":1589,"line_end":1589,"column_start":30,"column_end":49},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":1165},"to":{"krate":1,"index":5221}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":245916,"byte_end":245935,"line_start":1596,"line_end":1596,"column_start":27,"column_end":46},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":1165},"to":{"krate":1,"index":6176}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":246152,"byte_end":246157,"line_start":1606,"line_end":1606,"column_start":22,"column_end":27},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":1170},"to":{"krate":1,"index":1604}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":246350,"byte_end":246355,"line_start":1615,"line_end":1615,"column_start":30,"column_end":35},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":1170},"to":{"krate":1,"index":5221}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":246441,"byte_end":246446,"line_start":1622,"line_end":1622,"column_start":27,"column_end":32},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":1170},"to":{"krate":1,"index":6176}},{"span":{"file_name":"/Users/raphael/.cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.8.2/src/set.rs","byte_start":246670,"byte_end":246675,"line_start":1632,"line_end":1632,"column_start":29,"column_end":34},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":1170},"to":{"krate":1,"index":4965}}]}